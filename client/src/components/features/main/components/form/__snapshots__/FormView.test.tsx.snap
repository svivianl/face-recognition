// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FormView component should change input url 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      SyntheticEvent {
        "_dispatchInstances": null,
        "_dispatchListeners": null,
        "_targetInst": FiberNode {
          "_debugHookTypes": null,
          "_debugID": 141,
          "_debugIsCurrentlyTiming": false,
          "_debugNeedsRemount": false,
          "_debugOwner": FiberNode {
            "_debugHookTypes": null,
            "_debugID": 130,
            "_debugIsCurrentlyTiming": false,
            "_debugNeedsRemount": false,
            "_debugOwner": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 128,
              "_debugIsCurrentlyTiming": false,
              "_debugNeedsRemount": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "dependencies": null,
              "effectTag": 1,
              "elementType": [Function],
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "buttonDisabled": false,
                  "buttonText": "Detect",
                  "onChange": [MockFunction] {
                    "calls": [Circular],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "onSubmit": [MockFunction],
                },
                "refProp": null,
                "wrappingComponentProps": null,
              },
              "memoizedState": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "buttonDisabled": false,
                  "buttonText": "Detect",
                  "onChange": [MockFunction] {
                    "calls": [Circular],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "onSubmit": [MockFunction],
                },
                "wrappingComponentProps": null,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "buttonDisabled": false,
                  "buttonText": "Detect",
                  "onChange": [MockFunction] {
                    "calls": [Circular],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "onSubmit": [MockFunction],
                },
                "refProp": null,
                "wrappingComponentProps": null,
              },
              "ref": null,
              "return": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 125,
                "_debugIsCurrentlyTiming": false,
                "_debugNeedsRemount": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 125,
                  "_debugIsCurrentlyTiming": false,
                  "_debugNeedsRemount": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": [Circular],
                  "child": null,
                  "childExpirationTime": 0,
                  "dependencies": null,
                  "effectTag": 0,
                  "elementType": null,
                  "expirationTime": 1073741823,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": null,
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": FiberRootNode {
                    "callbackExpirationTime": 0,
                    "callbackNode": null,
                    "callbackPriority": 90,
                    "containerInfo": <div>
                      <div
                        class="border border-dark rounded url-form-container form-container mt-3"
                      >
                        <form>
                          <div
                            class="form-group"
                          >
                            <div
                              class="form-input"
                            >
                              <label
                                class="mr-2"
                                for="url"
                              >
                                URL
                                <span
                                  class="text-danger"
                                >
                                  *
                                </span>
                              </label>
                              <input
                                class="form-control d-inline-block"
                                id="url"
                                placeholder="https://samples.clarifai.com/face-det.jpg"
                                type="url"
                                value=""
                              />
                              <button
                                class="btn btn-primary"
                                type="submit"
                              >
                                Detect
                              </button>
                            </div>
                          </div>
                        </form>
                      </div>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "finishedExpirationTime": 0,
                    "finishedWork": null,
                    "firstPendingTime": 0,
                    "firstSuspendedTime": 0,
                    "hydrate": false,
                    "interactionThreadID": 17,
                    "lastExpiredTime": 0,
                    "lastPingedTime": 0,
                    "lastSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextKnownPendingLevel": 0,
                    "pendingChildren": null,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "pingCache": null,
                    "tag": 0,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseQueue": Object {
                      "callback": null,
                      "expirationTime": 1073741823,
                      "next": [Circular],
                      "payload": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            }
                          }
                          refProp={null}
                          wrappingComponentProps={null}
                        />,
                      },
                      "priority": 97,
                      "suspenseConfig": null,
                      "tag": 0,
                    },
                    "baseState": null,
                    "effects": null,
                    "shared": Object {
                      "pending": null,
                    },
                  },
                },
                "child": [Circular],
                "childExpirationTime": 0,
                "dependencies": null,
                "effectTag": 0,
                "elementType": null,
                "expirationTime": 0,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": null,
                "memoizedState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      }
                    }
                    refProp={null}
                    wrappingComponentProps={null}
                  />,
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": FiberRootNode {
                  "callbackExpirationTime": 0,
                  "callbackNode": null,
                  "callbackPriority": 90,
                  "containerInfo": <div>
                    <div
                      class="border border-dark rounded url-form-container form-container mt-3"
                    >
                      <form>
                        <div
                          class="form-group"
                        >
                          <div
                            class="form-input"
                          >
                            <label
                              class="mr-2"
                              for="url"
                            >
                              URL
                              <span
                                class="text-danger"
                              >
                                *
                              </span>
                            </label>
                            <input
                              class="form-control d-inline-block"
                              id="url"
                              placeholder="https://samples.clarifai.com/face-det.jpg"
                              type="url"
                              value=""
                            />
                            <button
                              class="btn btn-primary"
                              type="submit"
                            >
                              Detect
                            </button>
                          </div>
                        </div>
                      </form>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "finishedExpirationTime": 0,
                  "finishedWork": null,
                  "firstPendingTime": 0,
                  "firstSuspendedTime": 0,
                  "hydrate": false,
                  "interactionThreadID": 17,
                  "lastExpiredTime": 0,
                  "lastPingedTime": 0,
                  "lastSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextKnownPendingLevel": 0,
                  "pendingChildren": null,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "pingCache": null,
                  "tag": 0,
                  "timeoutHandle": -1,
                },
                "tag": 3,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseQueue": null,
                  "baseState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        }
                      }
                      refProp={null}
                      wrappingComponentProps={null}
                    />,
                  },
                  "effects": null,
                  "shared": Object {
                    "pending": null,
                  },
                },
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": WrapperComponent {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "buttonDisabled": false,
                    "buttonText": "Detect",
                    "onChange": [MockFunction] {
                      "calls": [Circular],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "onSubmit": [MockFunction],
                  },
                  "refProp": null,
                  "wrappingComponentProps": null,
                },
                "refs": Object {},
                "state": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "buttonDisabled": false,
                    "buttonText": "Detect",
                    "onChange": [MockFunction] {
                      "calls": [Circular],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "onSubmit": [MockFunction],
                  },
                  "wrappingComponentProps": null,
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 1,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": Object {
                "baseQueue": null,
                "baseState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "buttonDisabled": false,
                    "buttonText": "Detect",
                    "onChange": [MockFunction] {
                      "calls": [Circular],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "onSubmit": [MockFunction],
                  },
                  "wrappingComponentProps": null,
                },
                "effects": null,
                "shared": Object {
                  "pending": null,
                },
              },
            },
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 132,
              "_debugIsCurrentlyTiming": false,
              "_debugNeedsRemount": false,
              "_debugOwner": [Circular],
              "_debugSource": Object {
                "columnNumber": 5,
                "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                "lineNumber": 14,
              },
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 134,
                "_debugIsCurrentlyTiming": false,
                "_debugNeedsRemount": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "columnNumber": 7,
                  "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                  "lineNumber": 15,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 136,
                  "_debugIsCurrentlyTiming": false,
                  "_debugNeedsRemount": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "columnNumber": 9,
                    "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                    "lineNumber": 16,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 138,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "columnNumber": 11,
                      "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                      "lineNumber": 17,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 140,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "columnNumber": 13,
                        "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                        "lineNumber": 18,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 144,
                        "_debugIsCurrentlyTiming": false,
                        "_debugNeedsRemount": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "dependencies": null,
                        "effectTag": 0,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": "URL",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": "URL",
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 145,
                          "_debugIsCurrentlyTiming": false,
                          "_debugNeedsRemount": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "columnNumber": 18,
                            "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                            "lineNumber": 19,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "dependencies": null,
                          "effectTag": 0,
                          "elementType": "span",
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": "*",
                            "className": "text-danger",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": "*",
                            "className": "text-danger",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": <span
                            class="text-danger"
                          >
                            *
                          </span>,
                          "tag": 5,
                          "treeBaseDuration": 0,
                          "type": "span",
                          "updateQueue": null,
                        },
                        "stateNode": URL,
                        "tag": 6,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 0,
                      "elementType": "label",
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          "URL",
                          <span
                            className="text-danger"
                          >
                            *
                          </span>,
                        ],
                        "className": "mr-2",
                        "htmlFor": "url",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          "URL",
                          <span
                            className="text-danger"
                          >
                            *
                          </span>,
                        ],
                        "className": "mr-2",
                        "htmlFor": "url",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": [Circular],
                      "stateNode": <label
                        class="mr-2"
                        for="url"
                      >
                        URL
                        <span
                          class="text-danger"
                        >
                          *
                        </span>
                      </label>,
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": "label",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 0,
                    "elementType": "div",
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        <label
                          className="mr-2"
                          htmlFor="url"
                        >
                          URL
                          <span
                            className="text-danger"
                          >
                            *
                          </span>
                        </label>,
                        <input
                          className="form-control d-inline-block"
                          id="url"
                          onChange={
                            [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            }
                          }
                          placeholder="https://samples.clarifai.com/face-det.jpg"
                          type="url"
                        />,
                        <button
                          className="btn btn-primary"
                          disabled={false}
                          onClick={[MockFunction]}
                          type="submit"
                        >
                          Detect
                        </button>,
                      ],
                      "className": "form-input",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        <label
                          className="mr-2"
                          htmlFor="url"
                        >
                          URL
                          <span
                            className="text-danger"
                          >
                            *
                          </span>
                        </label>,
                        <input
                          className="form-control d-inline-block"
                          id="url"
                          onChange={
                            [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            }
                          }
                          placeholder="https://samples.clarifai.com/face-det.jpg"
                          type="url"
                        />,
                        <button
                          className="btn btn-primary"
                          disabled={false}
                          onClick={[MockFunction]}
                          type="submit"
                        >
                          Detect
                        </button>,
                      ],
                      "className": "form-input",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <div
                      class="form-input"
                    >
                      <label
                        class="mr-2"
                        for="url"
                      >
                        URL
                        <span
                          class="text-danger"
                        >
                          *
                        </span>
                      </label>
                      <input
                        class="form-control d-inline-block"
                        id="url"
                        placeholder="https://samples.clarifai.com/face-det.jpg"
                        type="url"
                        value=""
                      />
                      <button
                        class="btn btn-primary"
                        type="submit"
                      >
                        Detect
                      </button>
                    </div>,
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "dependencies": null,
                  "effectTag": 0,
                  "elementType": "div",
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      <div
                        className="form-input"
                      >
                        <label
                          className="mr-2"
                          htmlFor="url"
                        >
                          URL
                          <span
                            className="text-danger"
                          >
                            *
                          </span>
                        </label>
                        <input
                          className="form-control d-inline-block"
                          id="url"
                          onChange={
                            [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            }
                          }
                          placeholder="https://samples.clarifai.com/face-det.jpg"
                          type="url"
                        />
                        <button
                          className="btn btn-primary"
                          disabled={false}
                          onClick={[MockFunction]}
                          type="submit"
                        >
                          Detect
                        </button>
                      </div>,
                      undefined,
                    ],
                    "className": "form-group",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      <div
                        className="form-input"
                      >
                        <label
                          className="mr-2"
                          htmlFor="url"
                        >
                          URL
                          <span
                            className="text-danger"
                          >
                            *
                          </span>
                        </label>
                        <input
                          className="form-control d-inline-block"
                          id="url"
                          onChange={
                            [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            }
                          }
                          placeholder="https://samples.clarifai.com/face-det.jpg"
                          type="url"
                        />
                        <button
                          className="btn btn-primary"
                          disabled={false}
                          onClick={[MockFunction]}
                          type="submit"
                        >
                          Detect
                        </button>
                      </div>,
                      undefined,
                    ],
                    "className": "form-group",
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": <div
                    class="form-group"
                  >
                    <div
                      class="form-input"
                    >
                      <label
                        class="mr-2"
                        for="url"
                      >
                        URL
                        <span
                          class="text-danger"
                        >
                          *
                        </span>
                      </label>
                      <input
                        class="form-control d-inline-block"
                        id="url"
                        placeholder="https://samples.clarifai.com/face-det.jpg"
                        type="url"
                        value=""
                      />
                      <button
                        class="btn btn-primary"
                        type="submit"
                      >
                        Detect
                      </button>
                    </div>
                  </div>,
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "dependencies": null,
                "effectTag": 0,
                "elementType": "form",
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": <div
                    className="form-group"
                  >
                    <div
                      className="form-input"
                    >
                      <label
                        className="mr-2"
                        htmlFor="url"
                      >
                        URL
                        <span
                          className="text-danger"
                        >
                          *
                        </span>
                      </label>
                      <input
                        className="form-control d-inline-block"
                        id="url"
                        onChange={
                          [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          }
                        }
                        placeholder="https://samples.clarifai.com/face-det.jpg"
                        type="url"
                      />
                      <button
                        className="btn btn-primary"
                        disabled={false}
                        onClick={[MockFunction]}
                        type="submit"
                      >
                        Detect
                      </button>
                    </div>
                  </div>,
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": <div
                    className="form-group"
                  >
                    <div
                      className="form-input"
                    >
                      <label
                        className="mr-2"
                        htmlFor="url"
                      >
                        URL
                        <span
                          className="text-danger"
                        >
                          *
                        </span>
                      </label>
                      <input
                        className="form-control d-inline-block"
                        id="url"
                        onChange={
                          [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          }
                        }
                        placeholder="https://samples.clarifai.com/face-det.jpg"
                        type="url"
                      />
                      <button
                        className="btn btn-primary"
                        disabled={false}
                        onClick={[MockFunction]}
                        type="submit"
                      >
                        Detect
                      </button>
                    </div>
                  </div>,
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": <form>
                  <div
                    class="form-group"
                  >
                    <div
                      class="form-input"
                    >
                      <label
                        class="mr-2"
                        for="url"
                      >
                        URL
                        <span
                          class="text-danger"
                        >
                          *
                        </span>
                      </label>
                      <input
                        class="form-control d-inline-block"
                        id="url"
                        placeholder="https://samples.clarifai.com/face-det.jpg"
                        type="url"
                        value=""
                      />
                      <button
                        class="btn btn-primary"
                        type="submit"
                      >
                        Detect
                      </button>
                    </div>
                  </div>
                </form>,
                "tag": 5,
                "treeBaseDuration": 0,
                "type": "form",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "dependencies": null,
              "effectTag": 0,
              "elementType": "div",
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": <form>
                  <div
                    className="form-group"
                  >
                    <div
                      className="form-input"
                    >
                      <label
                        className="mr-2"
                        htmlFor="url"
                      >
                        URL
                        <span
                          className="text-danger"
                        >
                          *
                        </span>
                      </label>
                      <input
                        className="form-control d-inline-block"
                        id="url"
                        onChange={
                          [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          }
                        }
                        placeholder="https://samples.clarifai.com/face-det.jpg"
                        type="url"
                      />
                      <button
                        className="btn btn-primary"
                        disabled={false}
                        onClick={[MockFunction]}
                        type="submit"
                      >
                        Detect
                      </button>
                    </div>
                  </div>
                </form>,
                "className": "border border-dark rounded url-form-container form-container mt-3",
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": <form>
                  <div
                    className="form-group"
                  >
                    <div
                      className="form-input"
                    >
                      <label
                        className="mr-2"
                        htmlFor="url"
                      >
                        URL
                        <span
                          className="text-danger"
                        >
                          *
                        </span>
                      </label>
                      <input
                        className="form-control d-inline-block"
                        id="url"
                        onChange={
                          [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          }
                        }
                        placeholder="https://samples.clarifai.com/face-det.jpg"
                        type="url"
                      />
                      <button
                        className="btn btn-primary"
                        disabled={false}
                        onClick={[MockFunction]}
                        type="submit"
                      >
                        Detect
                      </button>
                    </div>
                  </div>
                </form>,
                "className": "border border-dark rounded url-form-container form-container mt-3",
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": <div
                class="border border-dark rounded url-form-container form-container mt-3"
              >
                <form>
                  <div
                    class="form-group"
                  >
                    <div
                      class="form-input"
                    >
                      <label
                        class="mr-2"
                        for="url"
                      >
                        URL
                        <span
                          class="text-danger"
                        >
                          *
                        </span>
                      </label>
                      <input
                        class="form-control d-inline-block"
                        id="url"
                        placeholder="https://samples.clarifai.com/face-det.jpg"
                        type="url"
                        value=""
                      />
                      <button
                        class="btn btn-primary"
                        type="submit"
                      >
                        Detect
                      </button>
                    </div>
                  </div>
                </form>
              </div>,
              "tag": 5,
              "treeBaseDuration": 0,
              "type": "div",
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "dependencies": null,
            "effectTag": 1,
            "elementType": [Function],
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "buttonDisabled": false,
              "buttonText": "Detect",
              "onChange": [MockFunction] {
                "calls": [Circular],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
              "onSubmit": [MockFunction],
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "buttonDisabled": false,
              "buttonText": "Detect",
              "onChange": [MockFunction] {
                "calls": [Circular],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
              "onSubmit": [MockFunction],
            },
            "ref": null,
            "return": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 128,
              "_debugIsCurrentlyTiming": false,
              "_debugNeedsRemount": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "dependencies": null,
              "effectTag": 1,
              "elementType": [Function],
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "buttonDisabled": false,
                  "buttonText": "Detect",
                  "onChange": [MockFunction] {
                    "calls": [Circular],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "onSubmit": [MockFunction],
                },
                "refProp": null,
                "wrappingComponentProps": null,
              },
              "memoizedState": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "buttonDisabled": false,
                  "buttonText": "Detect",
                  "onChange": [MockFunction] {
                    "calls": [Circular],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "onSubmit": [MockFunction],
                },
                "wrappingComponentProps": null,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "buttonDisabled": false,
                  "buttonText": "Detect",
                  "onChange": [MockFunction] {
                    "calls": [Circular],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "onSubmit": [MockFunction],
                },
                "refProp": null,
                "wrappingComponentProps": null,
              },
              "ref": null,
              "return": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 125,
                "_debugIsCurrentlyTiming": false,
                "_debugNeedsRemount": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 125,
                  "_debugIsCurrentlyTiming": false,
                  "_debugNeedsRemount": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": [Circular],
                  "child": null,
                  "childExpirationTime": 0,
                  "dependencies": null,
                  "effectTag": 0,
                  "elementType": null,
                  "expirationTime": 1073741823,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": null,
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": FiberRootNode {
                    "callbackExpirationTime": 0,
                    "callbackNode": null,
                    "callbackPriority": 90,
                    "containerInfo": <div>
                      <div
                        class="border border-dark rounded url-form-container form-container mt-3"
                      >
                        <form>
                          <div
                            class="form-group"
                          >
                            <div
                              class="form-input"
                            >
                              <label
                                class="mr-2"
                                for="url"
                              >
                                URL
                                <span
                                  class="text-danger"
                                >
                                  *
                                </span>
                              </label>
                              <input
                                class="form-control d-inline-block"
                                id="url"
                                placeholder="https://samples.clarifai.com/face-det.jpg"
                                type="url"
                                value=""
                              />
                              <button
                                class="btn btn-primary"
                                type="submit"
                              >
                                Detect
                              </button>
                            </div>
                          </div>
                        </form>
                      </div>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "finishedExpirationTime": 0,
                    "finishedWork": null,
                    "firstPendingTime": 0,
                    "firstSuspendedTime": 0,
                    "hydrate": false,
                    "interactionThreadID": 17,
                    "lastExpiredTime": 0,
                    "lastPingedTime": 0,
                    "lastSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextKnownPendingLevel": 0,
                    "pendingChildren": null,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "pingCache": null,
                    "tag": 0,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseQueue": Object {
                      "callback": null,
                      "expirationTime": 1073741823,
                      "next": [Circular],
                      "payload": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            }
                          }
                          refProp={null}
                          wrappingComponentProps={null}
                        />,
                      },
                      "priority": 97,
                      "suspenseConfig": null,
                      "tag": 0,
                    },
                    "baseState": null,
                    "effects": null,
                    "shared": Object {
                      "pending": null,
                    },
                  },
                },
                "child": [Circular],
                "childExpirationTime": 0,
                "dependencies": null,
                "effectTag": 0,
                "elementType": null,
                "expirationTime": 0,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": null,
                "memoizedState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      }
                    }
                    refProp={null}
                    wrappingComponentProps={null}
                  />,
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": FiberRootNode {
                  "callbackExpirationTime": 0,
                  "callbackNode": null,
                  "callbackPriority": 90,
                  "containerInfo": <div>
                    <div
                      class="border border-dark rounded url-form-container form-container mt-3"
                    >
                      <form>
                        <div
                          class="form-group"
                        >
                          <div
                            class="form-input"
                          >
                            <label
                              class="mr-2"
                              for="url"
                            >
                              URL
                              <span
                                class="text-danger"
                              >
                                *
                              </span>
                            </label>
                            <input
                              class="form-control d-inline-block"
                              id="url"
                              placeholder="https://samples.clarifai.com/face-det.jpg"
                              type="url"
                              value=""
                            />
                            <button
                              class="btn btn-primary"
                              type="submit"
                            >
                              Detect
                            </button>
                          </div>
                        </div>
                      </form>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "finishedExpirationTime": 0,
                  "finishedWork": null,
                  "firstPendingTime": 0,
                  "firstSuspendedTime": 0,
                  "hydrate": false,
                  "interactionThreadID": 17,
                  "lastExpiredTime": 0,
                  "lastPingedTime": 0,
                  "lastSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextKnownPendingLevel": 0,
                  "pendingChildren": null,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "pingCache": null,
                  "tag": 0,
                  "timeoutHandle": -1,
                },
                "tag": 3,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseQueue": null,
                  "baseState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        }
                      }
                      refProp={null}
                      wrappingComponentProps={null}
                    />,
                  },
                  "effects": null,
                  "shared": Object {
                    "pending": null,
                  },
                },
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": WrapperComponent {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "buttonDisabled": false,
                    "buttonText": "Detect",
                    "onChange": [MockFunction] {
                      "calls": [Circular],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "onSubmit": [MockFunction],
                  },
                  "refProp": null,
                  "wrappingComponentProps": null,
                },
                "refs": Object {},
                "state": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "buttonDisabled": false,
                    "buttonText": "Detect",
                    "onChange": [MockFunction] {
                      "calls": [Circular],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "onSubmit": [MockFunction],
                  },
                  "wrappingComponentProps": null,
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 1,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": Object {
                "baseQueue": null,
                "baseState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "buttonDisabled": false,
                    "buttonText": "Detect",
                    "onChange": [MockFunction] {
                      "calls": [Circular],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "onSubmit": [MockFunction],
                  },
                  "wrappingComponentProps": null,
                },
                "effects": null,
                "shared": Object {
                  "pending": null,
                },
              },
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": null,
            "tag": 0,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "_debugSource": Object {
            "columnNumber": 13,
            "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
            "lineNumber": 21,
          },
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": null,
          "childExpirationTime": 0,
          "dependencies": null,
          "effectTag": 0,
          "elementType": "input",
          "expirationTime": 0,
          "firstEffect": null,
          "index": 1,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "className": "form-control d-inline-block",
            "id": "url",
            "onChange": [MockFunction] {
              "calls": [Circular],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            },
            "placeholder": "https://samples.clarifai.com/face-det.jpg",
            "type": "url",
            "value": undefined,
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "className": "form-control d-inline-block",
            "id": "url",
            "onChange": [MockFunction] {
              "calls": [Circular],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            },
            "placeholder": "https://samples.clarifai.com/face-det.jpg",
            "type": "url",
            "value": undefined,
          },
          "ref": null,
          "return": FiberNode {
            "_debugHookTypes": null,
            "_debugID": 138,
            "_debugIsCurrentlyTiming": false,
            "_debugNeedsRemount": false,
            "_debugOwner": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 130,
              "_debugIsCurrentlyTiming": false,
              "_debugNeedsRemount": false,
              "_debugOwner": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 128,
                "_debugIsCurrentlyTiming": false,
                "_debugNeedsRemount": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "dependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "buttonDisabled": false,
                    "buttonText": "Detect",
                    "onChange": [MockFunction] {
                      "calls": [Circular],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "onSubmit": [MockFunction],
                  },
                  "refProp": null,
                  "wrappingComponentProps": null,
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "buttonDisabled": false,
                    "buttonText": "Detect",
                    "onChange": [MockFunction] {
                      "calls": [Circular],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "onSubmit": [MockFunction],
                  },
                  "wrappingComponentProps": null,
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "buttonDisabled": false,
                    "buttonText": "Detect",
                    "onChange": [MockFunction] {
                      "calls": [Circular],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "onSubmit": [MockFunction],
                  },
                  "refProp": null,
                  "wrappingComponentProps": null,
                },
                "ref": null,
                "return": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 125,
                  "_debugIsCurrentlyTiming": false,
                  "_debugNeedsRemount": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 125,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 1073741823,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": FiberRootNode {
                      "callbackExpirationTime": 0,
                      "callbackNode": null,
                      "callbackPriority": 90,
                      "containerInfo": <div>
                        <div
                          class="border border-dark rounded url-form-container form-container mt-3"
                        >
                          <form>
                            <div
                              class="form-group"
                            >
                              <div
                                class="form-input"
                              >
                                <label
                                  class="mr-2"
                                  for="url"
                                >
                                  URL
                                  <span
                                    class="text-danger"
                                  >
                                    *
                                  </span>
                                </label>
                                <input
                                  class="form-control d-inline-block"
                                  id="url"
                                  placeholder="https://samples.clarifai.com/face-det.jpg"
                                  type="url"
                                  value=""
                                />
                                <button
                                  class="btn btn-primary"
                                  type="submit"
                                >
                                  Detect
                                </button>
                              </div>
                            </div>
                          </form>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "finishedExpirationTime": 0,
                      "finishedWork": null,
                      "firstPendingTime": 0,
                      "firstSuspendedTime": 0,
                      "hydrate": false,
                      "interactionThreadID": 17,
                      "lastExpiredTime": 0,
                      "lastPingedTime": 0,
                      "lastSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextKnownPendingLevel": 0,
                      "pendingChildren": null,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "tag": 0,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseQueue": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": [Circular],
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "buttonDisabled": false,
                                "buttonText": "Detect",
                                "onChange": [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                },
                                "onSubmit": [MockFunction],
                              }
                            }
                            refProp={null}
                            wrappingComponentProps={null}
                          />,
                        },
                        "priority": 97,
                        "suspenseConfig": null,
                        "tag": 0,
                      },
                      "baseState": null,
                      "effects": null,
                      "shared": Object {
                        "pending": null,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "dependencies": null,
                  "effectTag": 0,
                  "elementType": null,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        }
                      }
                      refProp={null}
                      wrappingComponentProps={null}
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": FiberRootNode {
                    "callbackExpirationTime": 0,
                    "callbackNode": null,
                    "callbackPriority": 90,
                    "containerInfo": <div>
                      <div
                        class="border border-dark rounded url-form-container form-container mt-3"
                      >
                        <form>
                          <div
                            class="form-group"
                          >
                            <div
                              class="form-input"
                            >
                              <label
                                class="mr-2"
                                for="url"
                              >
                                URL
                                <span
                                  class="text-danger"
                                >
                                  *
                                </span>
                              </label>
                              <input
                                class="form-control d-inline-block"
                                id="url"
                                placeholder="https://samples.clarifai.com/face-det.jpg"
                                type="url"
                                value=""
                              />
                              <button
                                class="btn btn-primary"
                                type="submit"
                              >
                                Detect
                              </button>
                            </div>
                          </div>
                        </form>
                      </div>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "finishedExpirationTime": 0,
                    "finishedWork": null,
                    "firstPendingTime": 0,
                    "firstSuspendedTime": 0,
                    "hydrate": false,
                    "interactionThreadID": 17,
                    "lastExpiredTime": 0,
                    "lastPingedTime": 0,
                    "lastSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextKnownPendingLevel": 0,
                    "pendingChildren": null,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "pingCache": null,
                    "tag": 0,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseQueue": null,
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          }
                        }
                        refProp={null}
                        wrappingComponentProps={null}
                      />,
                    },
                    "effects": null,
                    "shared": Object {
                      "pending": null,
                    },
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "refProp": null,
                    "wrappingComponentProps": null,
                  },
                  "refs": Object {},
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "wrappingComponentProps": null,
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": Object {
                  "baseQueue": null,
                  "baseState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "wrappingComponentProps": null,
                  },
                  "effects": null,
                  "shared": Object {
                    "pending": null,
                  },
                },
              },
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 132,
                "_debugIsCurrentlyTiming": false,
                "_debugNeedsRemount": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "columnNumber": 5,
                  "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                  "lineNumber": 14,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 134,
                  "_debugIsCurrentlyTiming": false,
                  "_debugNeedsRemount": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "columnNumber": 7,
                    "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                    "lineNumber": 15,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 136,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "columnNumber": 9,
                      "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                      "lineNumber": 16,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 0,
                    "elementType": "div",
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        <div
                          className="form-input"
                        >
                          <label
                            className="mr-2"
                            htmlFor="url"
                          >
                            URL
                            <span
                              className="text-danger"
                            >
                              *
                            </span>
                          </label>
                          <input
                            className="form-control d-inline-block"
                            id="url"
                            onChange={
                              [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              }
                            }
                            placeholder="https://samples.clarifai.com/face-det.jpg"
                            type="url"
                          />
                          <button
                            className="btn btn-primary"
                            disabled={false}
                            onClick={[MockFunction]}
                            type="submit"
                          >
                            Detect
                          </button>
                        </div>,
                        undefined,
                      ],
                      "className": "form-group",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        <div
                          className="form-input"
                        >
                          <label
                            className="mr-2"
                            htmlFor="url"
                          >
                            URL
                            <span
                              className="text-danger"
                            >
                              *
                            </span>
                          </label>
                          <input
                            className="form-control d-inline-block"
                            id="url"
                            onChange={
                              [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              }
                            }
                            placeholder="https://samples.clarifai.com/face-det.jpg"
                            type="url"
                          />
                          <button
                            className="btn btn-primary"
                            disabled={false}
                            onClick={[MockFunction]}
                            type="submit"
                          >
                            Detect
                          </button>
                        </div>,
                        undefined,
                      ],
                      "className": "form-group",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <div
                      class="form-group"
                    >
                      <div
                        class="form-input"
                      >
                        <label
                          class="mr-2"
                          for="url"
                        >
                          URL
                          <span
                            class="text-danger"
                          >
                            *
                          </span>
                        </label>
                        <input
                          class="form-control d-inline-block"
                          id="url"
                          placeholder="https://samples.clarifai.com/face-det.jpg"
                          type="url"
                          value=""
                        />
                        <button
                          class="btn btn-primary"
                          type="submit"
                        >
                          Detect
                        </button>
                      </div>
                    </div>,
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "dependencies": null,
                  "effectTag": 0,
                  "elementType": "form",
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <div
                      className="form-group"
                    >
                      <div
                        className="form-input"
                      >
                        <label
                          className="mr-2"
                          htmlFor="url"
                        >
                          URL
                          <span
                            className="text-danger"
                          >
                            *
                          </span>
                        </label>
                        <input
                          className="form-control d-inline-block"
                          id="url"
                          onChange={
                            [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            }
                          }
                          placeholder="https://samples.clarifai.com/face-det.jpg"
                          type="url"
                        />
                        <button
                          className="btn btn-primary"
                          disabled={false}
                          onClick={[MockFunction]}
                          type="submit"
                        >
                          Detect
                        </button>
                      </div>
                    </div>,
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <div
                      className="form-group"
                    >
                      <div
                        className="form-input"
                      >
                        <label
                          className="mr-2"
                          htmlFor="url"
                        >
                          URL
                          <span
                            className="text-danger"
                          >
                            *
                          </span>
                        </label>
                        <input
                          className="form-control d-inline-block"
                          id="url"
                          onChange={
                            [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            }
                          }
                          placeholder="https://samples.clarifai.com/face-det.jpg"
                          type="url"
                        />
                        <button
                          className="btn btn-primary"
                          disabled={false}
                          onClick={[MockFunction]}
                          type="submit"
                        >
                          Detect
                        </button>
                      </div>
                    </div>,
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": <form>
                    <div
                      class="form-group"
                    >
                      <div
                        class="form-input"
                      >
                        <label
                          class="mr-2"
                          for="url"
                        >
                          URL
                          <span
                            class="text-danger"
                          >
                            *
                          </span>
                        </label>
                        <input
                          class="form-control d-inline-block"
                          id="url"
                          placeholder="https://samples.clarifai.com/face-det.jpg"
                          type="url"
                          value=""
                        />
                        <button
                          class="btn btn-primary"
                          type="submit"
                        >
                          Detect
                        </button>
                      </div>
                    </div>
                  </form>,
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": "form",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "dependencies": null,
                "effectTag": 0,
                "elementType": "div",
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": <form>
                    <div
                      className="form-group"
                    >
                      <div
                        className="form-input"
                      >
                        <label
                          className="mr-2"
                          htmlFor="url"
                        >
                          URL
                          <span
                            className="text-danger"
                          >
                            *
                          </span>
                        </label>
                        <input
                          className="form-control d-inline-block"
                          id="url"
                          onChange={
                            [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            }
                          }
                          placeholder="https://samples.clarifai.com/face-det.jpg"
                          type="url"
                        />
                        <button
                          className="btn btn-primary"
                          disabled={false}
                          onClick={[MockFunction]}
                          type="submit"
                        >
                          Detect
                        </button>
                      </div>
                    </div>
                  </form>,
                  "className": "border border-dark rounded url-form-container form-container mt-3",
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": <form>
                    <div
                      className="form-group"
                    >
                      <div
                        className="form-input"
                      >
                        <label
                          className="mr-2"
                          htmlFor="url"
                        >
                          URL
                          <span
                            className="text-danger"
                          >
                            *
                          </span>
                        </label>
                        <input
                          className="form-control d-inline-block"
                          id="url"
                          onChange={
                            [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            }
                          }
                          placeholder="https://samples.clarifai.com/face-det.jpg"
                          type="url"
                        />
                        <button
                          className="btn btn-primary"
                          disabled={false}
                          onClick={[MockFunction]}
                          type="submit"
                        >
                          Detect
                        </button>
                      </div>
                    </div>
                  </form>,
                  "className": "border border-dark rounded url-form-container form-container mt-3",
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": <div
                  class="border border-dark rounded url-form-container form-container mt-3"
                >
                  <form>
                    <div
                      class="form-group"
                    >
                      <div
                        class="form-input"
                      >
                        <label
                          class="mr-2"
                          for="url"
                        >
                          URL
                          <span
                            class="text-danger"
                          >
                            *
                          </span>
                        </label>
                        <input
                          class="form-control d-inline-block"
                          id="url"
                          placeholder="https://samples.clarifai.com/face-det.jpg"
                          type="url"
                          value=""
                        />
                        <button
                          class="btn btn-primary"
                          type="submit"
                        >
                          Detect
                        </button>
                      </div>
                    </div>
                  </form>
                </div>,
                "tag": 5,
                "treeBaseDuration": 0,
                "type": "div",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "dependencies": null,
              "effectTag": 1,
              "elementType": [Function],
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "buttonDisabled": false,
                "buttonText": "Detect",
                "onChange": [MockFunction] {
                  "calls": [Circular],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": undefined,
                    },
                  ],
                },
                "onSubmit": [MockFunction],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "buttonDisabled": false,
                "buttonText": "Detect",
                "onChange": [MockFunction] {
                  "calls": [Circular],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": undefined,
                    },
                  ],
                },
                "onSubmit": [MockFunction],
              },
              "ref": null,
              "return": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 128,
                "_debugIsCurrentlyTiming": false,
                "_debugNeedsRemount": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "dependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "buttonDisabled": false,
                    "buttonText": "Detect",
                    "onChange": [MockFunction] {
                      "calls": [Circular],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "onSubmit": [MockFunction],
                  },
                  "refProp": null,
                  "wrappingComponentProps": null,
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "buttonDisabled": false,
                    "buttonText": "Detect",
                    "onChange": [MockFunction] {
                      "calls": [Circular],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "onSubmit": [MockFunction],
                  },
                  "wrappingComponentProps": null,
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "buttonDisabled": false,
                    "buttonText": "Detect",
                    "onChange": [MockFunction] {
                      "calls": [Circular],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "onSubmit": [MockFunction],
                  },
                  "refProp": null,
                  "wrappingComponentProps": null,
                },
                "ref": null,
                "return": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 125,
                  "_debugIsCurrentlyTiming": false,
                  "_debugNeedsRemount": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 125,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 1073741823,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": FiberRootNode {
                      "callbackExpirationTime": 0,
                      "callbackNode": null,
                      "callbackPriority": 90,
                      "containerInfo": <div>
                        <div
                          class="border border-dark rounded url-form-container form-container mt-3"
                        >
                          <form>
                            <div
                              class="form-group"
                            >
                              <div
                                class="form-input"
                              >
                                <label
                                  class="mr-2"
                                  for="url"
                                >
                                  URL
                                  <span
                                    class="text-danger"
                                  >
                                    *
                                  </span>
                                </label>
                                <input
                                  class="form-control d-inline-block"
                                  id="url"
                                  placeholder="https://samples.clarifai.com/face-det.jpg"
                                  type="url"
                                  value=""
                                />
                                <button
                                  class="btn btn-primary"
                                  type="submit"
                                >
                                  Detect
                                </button>
                              </div>
                            </div>
                          </form>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "finishedExpirationTime": 0,
                      "finishedWork": null,
                      "firstPendingTime": 0,
                      "firstSuspendedTime": 0,
                      "hydrate": false,
                      "interactionThreadID": 17,
                      "lastExpiredTime": 0,
                      "lastPingedTime": 0,
                      "lastSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextKnownPendingLevel": 0,
                      "pendingChildren": null,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "tag": 0,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseQueue": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": [Circular],
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "buttonDisabled": false,
                                "buttonText": "Detect",
                                "onChange": [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                },
                                "onSubmit": [MockFunction],
                              }
                            }
                            refProp={null}
                            wrappingComponentProps={null}
                          />,
                        },
                        "priority": 97,
                        "suspenseConfig": null,
                        "tag": 0,
                      },
                      "baseState": null,
                      "effects": null,
                      "shared": Object {
                        "pending": null,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "dependencies": null,
                  "effectTag": 0,
                  "elementType": null,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        }
                      }
                      refProp={null}
                      wrappingComponentProps={null}
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": FiberRootNode {
                    "callbackExpirationTime": 0,
                    "callbackNode": null,
                    "callbackPriority": 90,
                    "containerInfo": <div>
                      <div
                        class="border border-dark rounded url-form-container form-container mt-3"
                      >
                        <form>
                          <div
                            class="form-group"
                          >
                            <div
                              class="form-input"
                            >
                              <label
                                class="mr-2"
                                for="url"
                              >
                                URL
                                <span
                                  class="text-danger"
                                >
                                  *
                                </span>
                              </label>
                              <input
                                class="form-control d-inline-block"
                                id="url"
                                placeholder="https://samples.clarifai.com/face-det.jpg"
                                type="url"
                                value=""
                              />
                              <button
                                class="btn btn-primary"
                                type="submit"
                              >
                                Detect
                              </button>
                            </div>
                          </div>
                        </form>
                      </div>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "finishedExpirationTime": 0,
                    "finishedWork": null,
                    "firstPendingTime": 0,
                    "firstSuspendedTime": 0,
                    "hydrate": false,
                    "interactionThreadID": 17,
                    "lastExpiredTime": 0,
                    "lastPingedTime": 0,
                    "lastSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextKnownPendingLevel": 0,
                    "pendingChildren": null,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "pingCache": null,
                    "tag": 0,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseQueue": null,
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          }
                        }
                        refProp={null}
                        wrappingComponentProps={null}
                      />,
                    },
                    "effects": null,
                    "shared": Object {
                      "pending": null,
                    },
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "refProp": null,
                    "wrappingComponentProps": null,
                  },
                  "refs": Object {},
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "wrappingComponentProps": null,
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": Object {
                  "baseQueue": null,
                  "baseState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "wrappingComponentProps": null,
                  },
                  "effects": null,
                  "shared": Object {
                    "pending": null,
                  },
                },
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": null,
              "tag": 0,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "_debugSource": Object {
              "columnNumber": 11,
              "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
              "lineNumber": 17,
            },
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 140,
              "_debugIsCurrentlyTiming": false,
              "_debugNeedsRemount": false,
              "_debugOwner": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 130,
                "_debugIsCurrentlyTiming": false,
                "_debugNeedsRemount": false,
                "_debugOwner": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 128,
                  "_debugIsCurrentlyTiming": false,
                  "_debugNeedsRemount": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "dependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "refProp": null,
                    "wrappingComponentProps": null,
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "wrappingComponentProps": null,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "refProp": null,
                    "wrappingComponentProps": null,
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 125,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 125,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 1073741823,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": FiberRootNode {
                        "callbackExpirationTime": 0,
                        "callbackNode": null,
                        "callbackPriority": 90,
                        "containerInfo": <div>
                          <div
                            class="border border-dark rounded url-form-container form-container mt-3"
                          >
                            <form>
                              <div
                                class="form-group"
                              >
                                <div
                                  class="form-input"
                                >
                                  <label
                                    class="mr-2"
                                    for="url"
                                  >
                                    URL
                                    <span
                                      class="text-danger"
                                    >
                                      *
                                    </span>
                                  </label>
                                  <input
                                    class="form-control d-inline-block"
                                    id="url"
                                    placeholder="https://samples.clarifai.com/face-det.jpg"
                                    type="url"
                                    value=""
                                  />
                                  <button
                                    class="btn btn-primary"
                                    type="submit"
                                  >
                                    Detect
                                  </button>
                                </div>
                              </div>
                            </form>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "finishedExpirationTime": 0,
                        "finishedWork": null,
                        "firstPendingTime": 0,
                        "firstSuspendedTime": 0,
                        "hydrate": false,
                        "interactionThreadID": 17,
                        "lastExpiredTime": 0,
                        "lastPingedTime": 0,
                        "lastSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextKnownPendingLevel": 0,
                        "pendingChildren": null,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "tag": 0,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseQueue": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": [Circular],
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "buttonDisabled": false,
                                  "buttonText": "Detect",
                                  "onChange": [MockFunction] {
                                    "calls": [Circular],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                    ],
                                  },
                                  "onSubmit": [MockFunction],
                                }
                              }
                              refProp={null}
                              wrappingComponentProps={null}
                            />,
                          },
                          "priority": 97,
                          "suspenseConfig": null,
                          "tag": 0,
                        },
                        "baseState": null,
                        "effects": null,
                        "shared": Object {
                          "pending": null,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          }
                        }
                        refProp={null}
                        wrappingComponentProps={null}
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": FiberRootNode {
                      "callbackExpirationTime": 0,
                      "callbackNode": null,
                      "callbackPriority": 90,
                      "containerInfo": <div>
                        <div
                          class="border border-dark rounded url-form-container form-container mt-3"
                        >
                          <form>
                            <div
                              class="form-group"
                            >
                              <div
                                class="form-input"
                              >
                                <label
                                  class="mr-2"
                                  for="url"
                                >
                                  URL
                                  <span
                                    class="text-danger"
                                  >
                                    *
                                  </span>
                                </label>
                                <input
                                  class="form-control d-inline-block"
                                  id="url"
                                  placeholder="https://samples.clarifai.com/face-det.jpg"
                                  type="url"
                                  value=""
                                />
                                <button
                                  class="btn btn-primary"
                                  type="submit"
                                >
                                  Detect
                                </button>
                              </div>
                            </div>
                          </form>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "finishedExpirationTime": 0,
                      "finishedWork": null,
                      "firstPendingTime": 0,
                      "firstSuspendedTime": 0,
                      "hydrate": false,
                      "interactionThreadID": 17,
                      "lastExpiredTime": 0,
                      "lastPingedTime": 0,
                      "lastSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextKnownPendingLevel": 0,
                      "pendingChildren": null,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "tag": 0,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseQueue": null,
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            }
                          }
                          refProp={null}
                          wrappingComponentProps={null}
                        />,
                      },
                      "effects": null,
                      "shared": Object {
                        "pending": null,
                      },
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "refProp": null,
                      "wrappingComponentProps": null,
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "wrappingComponentProps": null,
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 1,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": Object {
                    "baseQueue": null,
                    "baseState": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "wrappingComponentProps": null,
                    },
                    "effects": null,
                    "shared": Object {
                      "pending": null,
                    },
                  },
                },
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 132,
                  "_debugIsCurrentlyTiming": false,
                  "_debugNeedsRemount": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "columnNumber": 5,
                    "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                    "lineNumber": 14,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 134,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "columnNumber": 7,
                      "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                      "lineNumber": 15,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 136,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "columnNumber": 9,
                        "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                        "lineNumber": 16,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 0,
                      "elementType": "div",
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          <div
                            className="form-input"
                          >
                            <label
                              className="mr-2"
                              htmlFor="url"
                            >
                              URL
                              <span
                                className="text-danger"
                              >
                                *
                              </span>
                            </label>
                            <input
                              className="form-control d-inline-block"
                              id="url"
                              onChange={
                                [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                }
                              }
                              placeholder="https://samples.clarifai.com/face-det.jpg"
                              type="url"
                            />
                            <button
                              className="btn btn-primary"
                              disabled={false}
                              onClick={[MockFunction]}
                              type="submit"
                            >
                              Detect
                            </button>
                          </div>,
                          undefined,
                        ],
                        "className": "form-group",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          <div
                            className="form-input"
                          >
                            <label
                              className="mr-2"
                              htmlFor="url"
                            >
                              URL
                              <span
                                className="text-danger"
                              >
                                *
                              </span>
                            </label>
                            <input
                              className="form-control d-inline-block"
                              id="url"
                              onChange={
                                [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                }
                              }
                              placeholder="https://samples.clarifai.com/face-det.jpg"
                              type="url"
                            />
                            <button
                              className="btn btn-primary"
                              disabled={false}
                              onClick={[MockFunction]}
                              type="submit"
                            >
                              Detect
                            </button>
                          </div>,
                          undefined,
                        ],
                        "className": "form-group",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <div
                        class="form-group"
                      >
                        <div
                          class="form-input"
                        >
                          <label
                            class="mr-2"
                            for="url"
                          >
                            URL
                            <span
                              class="text-danger"
                            >
                              *
                            </span>
                          </label>
                          <input
                            class="form-control d-inline-block"
                            id="url"
                            placeholder="https://samples.clarifai.com/face-det.jpg"
                            type="url"
                            value=""
                          />
                          <button
                            class="btn btn-primary"
                            type="submit"
                          >
                            Detect
                          </button>
                        </div>
                      </div>,
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 0,
                    "elementType": "form",
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <div
                        className="form-group"
                      >
                        <div
                          className="form-input"
                        >
                          <label
                            className="mr-2"
                            htmlFor="url"
                          >
                            URL
                            <span
                              className="text-danger"
                            >
                              *
                            </span>
                          </label>
                          <input
                            className="form-control d-inline-block"
                            id="url"
                            onChange={
                              [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              }
                            }
                            placeholder="https://samples.clarifai.com/face-det.jpg"
                            type="url"
                          />
                          <button
                            className="btn btn-primary"
                            disabled={false}
                            onClick={[MockFunction]}
                            type="submit"
                          >
                            Detect
                          </button>
                        </div>
                      </div>,
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <div
                        className="form-group"
                      >
                        <div
                          className="form-input"
                        >
                          <label
                            className="mr-2"
                            htmlFor="url"
                          >
                            URL
                            <span
                              className="text-danger"
                            >
                              *
                            </span>
                          </label>
                          <input
                            className="form-control d-inline-block"
                            id="url"
                            onChange={
                              [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              }
                            }
                            placeholder="https://samples.clarifai.com/face-det.jpg"
                            type="url"
                          />
                          <button
                            className="btn btn-primary"
                            disabled={false}
                            onClick={[MockFunction]}
                            type="submit"
                          >
                            Detect
                          </button>
                        </div>
                      </div>,
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <form>
                      <div
                        class="form-group"
                      >
                        <div
                          class="form-input"
                        >
                          <label
                            class="mr-2"
                            for="url"
                          >
                            URL
                            <span
                              class="text-danger"
                            >
                              *
                            </span>
                          </label>
                          <input
                            class="form-control d-inline-block"
                            id="url"
                            placeholder="https://samples.clarifai.com/face-det.jpg"
                            type="url"
                            value=""
                          />
                          <button
                            class="btn btn-primary"
                            type="submit"
                          >
                            Detect
                          </button>
                        </div>
                      </div>
                    </form>,
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": "form",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "dependencies": null,
                  "effectTag": 0,
                  "elementType": "div",
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <form>
                      <div
                        className="form-group"
                      >
                        <div
                          className="form-input"
                        >
                          <label
                            className="mr-2"
                            htmlFor="url"
                          >
                            URL
                            <span
                              className="text-danger"
                            >
                              *
                            </span>
                          </label>
                          <input
                            className="form-control d-inline-block"
                            id="url"
                            onChange={
                              [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              }
                            }
                            placeholder="https://samples.clarifai.com/face-det.jpg"
                            type="url"
                          />
                          <button
                            className="btn btn-primary"
                            disabled={false}
                            onClick={[MockFunction]}
                            type="submit"
                          >
                            Detect
                          </button>
                        </div>
                      </div>
                    </form>,
                    "className": "border border-dark rounded url-form-container form-container mt-3",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <form>
                      <div
                        className="form-group"
                      >
                        <div
                          className="form-input"
                        >
                          <label
                            className="mr-2"
                            htmlFor="url"
                          >
                            URL
                            <span
                              className="text-danger"
                            >
                              *
                            </span>
                          </label>
                          <input
                            className="form-control d-inline-block"
                            id="url"
                            onChange={
                              [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              }
                            }
                            placeholder="https://samples.clarifai.com/face-det.jpg"
                            type="url"
                          />
                          <button
                            className="btn btn-primary"
                            disabled={false}
                            onClick={[MockFunction]}
                            type="submit"
                          >
                            Detect
                          </button>
                        </div>
                      </div>
                    </form>,
                    "className": "border border-dark rounded url-form-container form-container mt-3",
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": <div
                    class="border border-dark rounded url-form-container form-container mt-3"
                  >
                    <form>
                      <div
                        class="form-group"
                      >
                        <div
                          class="form-input"
                        >
                          <label
                            class="mr-2"
                            for="url"
                          >
                            URL
                            <span
                              class="text-danger"
                            >
                              *
                            </span>
                          </label>
                          <input
                            class="form-control d-inline-block"
                            id="url"
                            placeholder="https://samples.clarifai.com/face-det.jpg"
                            type="url"
                            value=""
                          />
                          <button
                            class="btn btn-primary"
                            type="submit"
                          >
                            Detect
                          </button>
                        </div>
                      </div>
                    </form>
                  </div>,
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "dependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "buttonDisabled": false,
                  "buttonText": "Detect",
                  "onChange": [MockFunction] {
                    "calls": [Circular],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "onSubmit": [MockFunction],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "buttonDisabled": false,
                  "buttonText": "Detect",
                  "onChange": [MockFunction] {
                    "calls": [Circular],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "onSubmit": [MockFunction],
                },
                "ref": null,
                "return": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 128,
                  "_debugIsCurrentlyTiming": false,
                  "_debugNeedsRemount": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "dependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "refProp": null,
                    "wrappingComponentProps": null,
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "wrappingComponentProps": null,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "refProp": null,
                    "wrappingComponentProps": null,
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 125,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 125,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 1073741823,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": FiberRootNode {
                        "callbackExpirationTime": 0,
                        "callbackNode": null,
                        "callbackPriority": 90,
                        "containerInfo": <div>
                          <div
                            class="border border-dark rounded url-form-container form-container mt-3"
                          >
                            <form>
                              <div
                                class="form-group"
                              >
                                <div
                                  class="form-input"
                                >
                                  <label
                                    class="mr-2"
                                    for="url"
                                  >
                                    URL
                                    <span
                                      class="text-danger"
                                    >
                                      *
                                    </span>
                                  </label>
                                  <input
                                    class="form-control d-inline-block"
                                    id="url"
                                    placeholder="https://samples.clarifai.com/face-det.jpg"
                                    type="url"
                                    value=""
                                  />
                                  <button
                                    class="btn btn-primary"
                                    type="submit"
                                  >
                                    Detect
                                  </button>
                                </div>
                              </div>
                            </form>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "finishedExpirationTime": 0,
                        "finishedWork": null,
                        "firstPendingTime": 0,
                        "firstSuspendedTime": 0,
                        "hydrate": false,
                        "interactionThreadID": 17,
                        "lastExpiredTime": 0,
                        "lastPingedTime": 0,
                        "lastSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextKnownPendingLevel": 0,
                        "pendingChildren": null,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "tag": 0,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseQueue": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": [Circular],
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "buttonDisabled": false,
                                  "buttonText": "Detect",
                                  "onChange": [MockFunction] {
                                    "calls": [Circular],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                    ],
                                  },
                                  "onSubmit": [MockFunction],
                                }
                              }
                              refProp={null}
                              wrappingComponentProps={null}
                            />,
                          },
                          "priority": 97,
                          "suspenseConfig": null,
                          "tag": 0,
                        },
                        "baseState": null,
                        "effects": null,
                        "shared": Object {
                          "pending": null,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          }
                        }
                        refProp={null}
                        wrappingComponentProps={null}
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": FiberRootNode {
                      "callbackExpirationTime": 0,
                      "callbackNode": null,
                      "callbackPriority": 90,
                      "containerInfo": <div>
                        <div
                          class="border border-dark rounded url-form-container form-container mt-3"
                        >
                          <form>
                            <div
                              class="form-group"
                            >
                              <div
                                class="form-input"
                              >
                                <label
                                  class="mr-2"
                                  for="url"
                                >
                                  URL
                                  <span
                                    class="text-danger"
                                  >
                                    *
                                  </span>
                                </label>
                                <input
                                  class="form-control d-inline-block"
                                  id="url"
                                  placeholder="https://samples.clarifai.com/face-det.jpg"
                                  type="url"
                                  value=""
                                />
                                <button
                                  class="btn btn-primary"
                                  type="submit"
                                >
                                  Detect
                                </button>
                              </div>
                            </div>
                          </form>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "finishedExpirationTime": 0,
                      "finishedWork": null,
                      "firstPendingTime": 0,
                      "firstSuspendedTime": 0,
                      "hydrate": false,
                      "interactionThreadID": 17,
                      "lastExpiredTime": 0,
                      "lastPingedTime": 0,
                      "lastSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextKnownPendingLevel": 0,
                      "pendingChildren": null,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "tag": 0,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseQueue": null,
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            }
                          }
                          refProp={null}
                          wrappingComponentProps={null}
                        />,
                      },
                      "effects": null,
                      "shared": Object {
                        "pending": null,
                      },
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "refProp": null,
                      "wrappingComponentProps": null,
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "wrappingComponentProps": null,
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 1,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": Object {
                    "baseQueue": null,
                    "baseState": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "wrappingComponentProps": null,
                    },
                    "effects": null,
                    "shared": Object {
                      "pending": null,
                    },
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": null,
                "tag": 0,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "_debugSource": Object {
                "columnNumber": 13,
                "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                "lineNumber": 18,
              },
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 144,
                "_debugIsCurrentlyTiming": false,
                "_debugNeedsRemount": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": null,
                "childExpirationTime": 0,
                "dependencies": null,
                "effectTag": 0,
                "elementType": null,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": "URL",
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": "URL",
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 145,
                  "_debugIsCurrentlyTiming": false,
                  "_debugNeedsRemount": false,
                  "_debugOwner": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 130,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 128,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "refProp": null,
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "refProp": null,
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 125,
                        "_debugIsCurrentlyTiming": false,
                        "_debugNeedsRemount": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 125,
                          "_debugIsCurrentlyTiming": false,
                          "_debugNeedsRemount": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "dependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": FiberRootNode {
                            "callbackExpirationTime": 0,
                            "callbackNode": null,
                            "callbackPriority": 90,
                            "containerInfo": <div>
                              <div
                                class="border border-dark rounded url-form-container form-container mt-3"
                              >
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <div
                                      class="form-input"
                                    >
                                      <label
                                        class="mr-2"
                                        for="url"
                                      >
                                        URL
                                        <span
                                          class="text-danger"
                                        >
                                          *
                                        </span>
                                      </label>
                                      <input
                                        class="form-control d-inline-block"
                                        id="url"
                                        placeholder="https://samples.clarifai.com/face-det.jpg"
                                        type="url"
                                        value=""
                                      />
                                      <button
                                        class="btn btn-primary"
                                        type="submit"
                                      >
                                        Detect
                                      </button>
                                    </div>
                                  </div>
                                </form>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "finishedExpirationTime": 0,
                            "finishedWork": null,
                            "firstPendingTime": 0,
                            "firstSuspendedTime": 0,
                            "hydrate": false,
                            "interactionThreadID": 17,
                            "lastExpiredTime": 0,
                            "lastPingedTime": 0,
                            "lastSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextKnownPendingLevel": 0,
                            "pendingChildren": null,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "tag": 0,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseQueue": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": [Circular],
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "buttonDisabled": false,
                                      "buttonText": "Detect",
                                      "onChange": [MockFunction] {
                                        "calls": [Circular],
                                        "results": Array [
                                          Object {
                                            "type": "return",
                                            "value": undefined,
                                          },
                                        ],
                                      },
                                      "onSubmit": [MockFunction],
                                    }
                                  }
                                  refProp={null}
                                  wrappingComponentProps={null}
                                />,
                              },
                              "priority": 97,
                              "suspenseConfig": null,
                              "tag": 0,
                            },
                            "baseState": null,
                            "effects": null,
                            "shared": Object {
                              "pending": null,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "dependencies": null,
                        "effectTag": 0,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "buttonDisabled": false,
                                "buttonText": "Detect",
                                "onChange": [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                },
                                "onSubmit": [MockFunction],
                              }
                            }
                            refProp={null}
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": FiberRootNode {
                          "callbackExpirationTime": 0,
                          "callbackNode": null,
                          "callbackPriority": 90,
                          "containerInfo": <div>
                            <div
                              class="border border-dark rounded url-form-container form-container mt-3"
                            >
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <div
                                    class="form-input"
                                  >
                                    <label
                                      class="mr-2"
                                      for="url"
                                    >
                                      URL
                                      <span
                                        class="text-danger"
                                      >
                                        *
                                      </span>
                                    </label>
                                    <input
                                      class="form-control d-inline-block"
                                      id="url"
                                      placeholder="https://samples.clarifai.com/face-det.jpg"
                                      type="url"
                                      value=""
                                    />
                                    <button
                                      class="btn btn-primary"
                                      type="submit"
                                    >
                                      Detect
                                    </button>
                                  </div>
                                </div>
                              </form>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "finishedExpirationTime": 0,
                          "finishedWork": null,
                          "firstPendingTime": 0,
                          "firstSuspendedTime": 0,
                          "hydrate": false,
                          "interactionThreadID": 17,
                          "lastExpiredTime": 0,
                          "lastPingedTime": 0,
                          "lastSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextKnownPendingLevel": 0,
                          "pendingChildren": null,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "tag": 0,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseQueue": null,
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "buttonDisabled": false,
                                  "buttonText": "Detect",
                                  "onChange": [MockFunction] {
                                    "calls": [Circular],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                    ],
                                  },
                                  "onSubmit": [MockFunction],
                                }
                              }
                              refProp={null}
                              wrappingComponentProps={null}
                            />,
                          },
                          "effects": null,
                          "shared": Object {
                            "pending": null,
                          },
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "refProp": null,
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": Object {
                        "baseQueue": null,
                        "baseState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "wrappingComponentProps": null,
                        },
                        "effects": null,
                        "shared": Object {
                          "pending": null,
                        },
                      },
                    },
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 132,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "columnNumber": 5,
                        "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                        "lineNumber": 14,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 134,
                        "_debugIsCurrentlyTiming": false,
                        "_debugNeedsRemount": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "columnNumber": 7,
                          "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                          "lineNumber": 15,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 136,
                          "_debugIsCurrentlyTiming": false,
                          "_debugNeedsRemount": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "columnNumber": 9,
                            "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                            "lineNumber": 16,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "dependencies": null,
                          "effectTag": 0,
                          "elementType": "div",
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": Array [
                              <div
                                className="form-input"
                              >
                                <label
                                  className="mr-2"
                                  htmlFor="url"
                                >
                                  URL
                                  <span
                                    className="text-danger"
                                  >
                                    *
                                  </span>
                                </label>
                                <input
                                  className="form-control d-inline-block"
                                  id="url"
                                  onChange={
                                    [MockFunction] {
                                      "calls": [Circular],
                                      "results": Array [
                                        Object {
                                          "type": "return",
                                          "value": undefined,
                                        },
                                      ],
                                    }
                                  }
                                  placeholder="https://samples.clarifai.com/face-det.jpg"
                                  type="url"
                                />
                                <button
                                  className="btn btn-primary"
                                  disabled={false}
                                  onClick={[MockFunction]}
                                  type="submit"
                                >
                                  Detect
                                </button>
                              </div>,
                              undefined,
                            ],
                            "className": "form-group",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": Array [
                              <div
                                className="form-input"
                              >
                                <label
                                  className="mr-2"
                                  htmlFor="url"
                                >
                                  URL
                                  <span
                                    className="text-danger"
                                  >
                                    *
                                  </span>
                                </label>
                                <input
                                  className="form-control d-inline-block"
                                  id="url"
                                  onChange={
                                    [MockFunction] {
                                      "calls": [Circular],
                                      "results": Array [
                                        Object {
                                          "type": "return",
                                          "value": undefined,
                                        },
                                      ],
                                    }
                                  }
                                  placeholder="https://samples.clarifai.com/face-det.jpg"
                                  type="url"
                                />
                                <button
                                  className="btn btn-primary"
                                  disabled={false}
                                  onClick={[MockFunction]}
                                  type="submit"
                                >
                                  Detect
                                </button>
                              </div>,
                              undefined,
                            ],
                            "className": "form-group",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": <div
                            class="form-group"
                          >
                            <div
                              class="form-input"
                            >
                              <label
                                class="mr-2"
                                for="url"
                              >
                                URL
                                <span
                                  class="text-danger"
                                >
                                  *
                                </span>
                              </label>
                              <input
                                class="form-control d-inline-block"
                                id="url"
                                placeholder="https://samples.clarifai.com/face-det.jpg"
                                type="url"
                                value=""
                              />
                              <button
                                class="btn btn-primary"
                                type="submit"
                              >
                                Detect
                              </button>
                            </div>
                          </div>,
                          "tag": 5,
                          "treeBaseDuration": 0,
                          "type": "div",
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "dependencies": null,
                        "effectTag": 0,
                        "elementType": "form",
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": <div
                            className="form-group"
                          >
                            <div
                              className="form-input"
                            >
                              <label
                                className="mr-2"
                                htmlFor="url"
                              >
                                URL
                                <span
                                  className="text-danger"
                                >
                                  *
                                </span>
                              </label>
                              <input
                                className="form-control d-inline-block"
                                id="url"
                                onChange={
                                  [MockFunction] {
                                    "calls": [Circular],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                    ],
                                  }
                                }
                                placeholder="https://samples.clarifai.com/face-det.jpg"
                                type="url"
                              />
                              <button
                                className="btn btn-primary"
                                disabled={false}
                                onClick={[MockFunction]}
                                type="submit"
                              >
                                Detect
                              </button>
                            </div>
                          </div>,
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": <div
                            className="form-group"
                          >
                            <div
                              className="form-input"
                            >
                              <label
                                className="mr-2"
                                htmlFor="url"
                              >
                                URL
                                <span
                                  className="text-danger"
                                >
                                  *
                                </span>
                              </label>
                              <input
                                className="form-control d-inline-block"
                                id="url"
                                onChange={
                                  [MockFunction] {
                                    "calls": [Circular],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                    ],
                                  }
                                }
                                placeholder="https://samples.clarifai.com/face-det.jpg"
                                type="url"
                              />
                              <button
                                className="btn btn-primary"
                                disabled={false}
                                onClick={[MockFunction]}
                                type="submit"
                              >
                                Detect
                              </button>
                            </div>
                          </div>,
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": <form>
                          <div
                            class="form-group"
                          >
                            <div
                              class="form-input"
                            >
                              <label
                                class="mr-2"
                                for="url"
                              >
                                URL
                                <span
                                  class="text-danger"
                                >
                                  *
                                </span>
                              </label>
                              <input
                                class="form-control d-inline-block"
                                id="url"
                                placeholder="https://samples.clarifai.com/face-det.jpg"
                                type="url"
                                value=""
                              />
                              <button
                                class="btn btn-primary"
                                type="submit"
                              >
                                Detect
                              </button>
                            </div>
                          </div>
                        </form>,
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": "form",
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 0,
                      "elementType": "div",
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <form>
                          <div
                            className="form-group"
                          >
                            <div
                              className="form-input"
                            >
                              <label
                                className="mr-2"
                                htmlFor="url"
                              >
                                URL
                                <span
                                  className="text-danger"
                                >
                                  *
                                </span>
                              </label>
                              <input
                                className="form-control d-inline-block"
                                id="url"
                                onChange={
                                  [MockFunction] {
                                    "calls": [Circular],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                    ],
                                  }
                                }
                                placeholder="https://samples.clarifai.com/face-det.jpg"
                                type="url"
                              />
                              <button
                                className="btn btn-primary"
                                disabled={false}
                                onClick={[MockFunction]}
                                type="submit"
                              >
                                Detect
                              </button>
                            </div>
                          </div>
                        </form>,
                        "className": "border border-dark rounded url-form-container form-container mt-3",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": <form>
                          <div
                            className="form-group"
                          >
                            <div
                              className="form-input"
                            >
                              <label
                                className="mr-2"
                                htmlFor="url"
                              >
                                URL
                                <span
                                  className="text-danger"
                                >
                                  *
                                </span>
                              </label>
                              <input
                                className="form-control d-inline-block"
                                id="url"
                                onChange={
                                  [MockFunction] {
                                    "calls": [Circular],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                    ],
                                  }
                                }
                                placeholder="https://samples.clarifai.com/face-det.jpg"
                                type="url"
                              />
                              <button
                                className="btn btn-primary"
                                disabled={false}
                                onClick={[MockFunction]}
                                type="submit"
                              >
                                Detect
                              </button>
                            </div>
                          </div>
                        </form>,
                        "className": "border border-dark rounded url-form-container form-container mt-3",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <div
                        class="border border-dark rounded url-form-container form-container mt-3"
                      >
                        <form>
                          <div
                            class="form-group"
                          >
                            <div
                              class="form-input"
                            >
                              <label
                                class="mr-2"
                                for="url"
                              >
                                URL
                                <span
                                  class="text-danger"
                                >
                                  *
                                </span>
                              </label>
                              <input
                                class="form-control d-inline-block"
                                id="url"
                                placeholder="https://samples.clarifai.com/face-det.jpg"
                                type="url"
                                value=""
                              />
                              <button
                                class="btn btn-primary"
                                type="submit"
                              >
                                Detect
                              </button>
                            </div>
                          </div>
                        </form>
                      </div>,
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 1,
                    "elementType": [Function],
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 128,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "refProp": null,
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "refProp": null,
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 125,
                        "_debugIsCurrentlyTiming": false,
                        "_debugNeedsRemount": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 125,
                          "_debugIsCurrentlyTiming": false,
                          "_debugNeedsRemount": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "dependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": FiberRootNode {
                            "callbackExpirationTime": 0,
                            "callbackNode": null,
                            "callbackPriority": 90,
                            "containerInfo": <div>
                              <div
                                class="border border-dark rounded url-form-container form-container mt-3"
                              >
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <div
                                      class="form-input"
                                    >
                                      <label
                                        class="mr-2"
                                        for="url"
                                      >
                                        URL
                                        <span
                                          class="text-danger"
                                        >
                                          *
                                        </span>
                                      </label>
                                      <input
                                        class="form-control d-inline-block"
                                        id="url"
                                        placeholder="https://samples.clarifai.com/face-det.jpg"
                                        type="url"
                                        value=""
                                      />
                                      <button
                                        class="btn btn-primary"
                                        type="submit"
                                      >
                                        Detect
                                      </button>
                                    </div>
                                  </div>
                                </form>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "finishedExpirationTime": 0,
                            "finishedWork": null,
                            "firstPendingTime": 0,
                            "firstSuspendedTime": 0,
                            "hydrate": false,
                            "interactionThreadID": 17,
                            "lastExpiredTime": 0,
                            "lastPingedTime": 0,
                            "lastSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextKnownPendingLevel": 0,
                            "pendingChildren": null,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "tag": 0,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseQueue": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": [Circular],
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "buttonDisabled": false,
                                      "buttonText": "Detect",
                                      "onChange": [MockFunction] {
                                        "calls": [Circular],
                                        "results": Array [
                                          Object {
                                            "type": "return",
                                            "value": undefined,
                                          },
                                        ],
                                      },
                                      "onSubmit": [MockFunction],
                                    }
                                  }
                                  refProp={null}
                                  wrappingComponentProps={null}
                                />,
                              },
                              "priority": 97,
                              "suspenseConfig": null,
                              "tag": 0,
                            },
                            "baseState": null,
                            "effects": null,
                            "shared": Object {
                              "pending": null,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "dependencies": null,
                        "effectTag": 0,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "buttonDisabled": false,
                                "buttonText": "Detect",
                                "onChange": [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                },
                                "onSubmit": [MockFunction],
                              }
                            }
                            refProp={null}
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": FiberRootNode {
                          "callbackExpirationTime": 0,
                          "callbackNode": null,
                          "callbackPriority": 90,
                          "containerInfo": <div>
                            <div
                              class="border border-dark rounded url-form-container form-container mt-3"
                            >
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <div
                                    class="form-input"
                                  >
                                    <label
                                      class="mr-2"
                                      for="url"
                                    >
                                      URL
                                      <span
                                        class="text-danger"
                                      >
                                        *
                                      </span>
                                    </label>
                                    <input
                                      class="form-control d-inline-block"
                                      id="url"
                                      placeholder="https://samples.clarifai.com/face-det.jpg"
                                      type="url"
                                      value=""
                                    />
                                    <button
                                      class="btn btn-primary"
                                      type="submit"
                                    >
                                      Detect
                                    </button>
                                  </div>
                                </div>
                              </form>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "finishedExpirationTime": 0,
                          "finishedWork": null,
                          "firstPendingTime": 0,
                          "firstSuspendedTime": 0,
                          "hydrate": false,
                          "interactionThreadID": 17,
                          "lastExpiredTime": 0,
                          "lastPingedTime": 0,
                          "lastSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextKnownPendingLevel": 0,
                          "pendingChildren": null,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "tag": 0,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseQueue": null,
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "buttonDisabled": false,
                                  "buttonText": "Detect",
                                  "onChange": [MockFunction] {
                                    "calls": [Circular],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                    ],
                                  },
                                  "onSubmit": [MockFunction],
                                }
                              }
                              refProp={null}
                              wrappingComponentProps={null}
                            />,
                          },
                          "effects": null,
                          "shared": Object {
                            "pending": null,
                          },
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "refProp": null,
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": Object {
                        "baseQueue": null,
                        "baseState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "wrappingComponentProps": null,
                        },
                        "effects": null,
                        "shared": Object {
                          "pending": null,
                        },
                      },
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": null,
                    "tag": 0,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "_debugSource": Object {
                    "columnNumber": 18,
                    "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                    "lineNumber": 19,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": null,
                  "childExpirationTime": 0,
                  "dependencies": null,
                  "effectTag": 0,
                  "elementType": "span",
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 1,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": "*",
                    "className": "text-danger",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": "*",
                    "className": "text-danger",
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": <span
                    class="text-danger"
                  >
                    *
                  </span>,
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": "span",
                  "updateQueue": null,
                },
                "stateNode": URL,
                "tag": 6,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "dependencies": null,
              "effectTag": 0,
              "elementType": "label",
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  "URL",
                  <span
                    className="text-danger"
                  >
                    *
                  </span>,
                ],
                "className": "mr-2",
                "htmlFor": "url",
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": Array [
                  "URL",
                  <span
                    className="text-danger"
                  >
                    *
                  </span>,
                ],
                "className": "mr-2",
                "htmlFor": "url",
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": [Circular],
              "stateNode": <label
                class="mr-2"
                for="url"
              >
                URL
                <span
                  class="text-danger"
                >
                  *
                </span>
              </label>,
              "tag": 5,
              "treeBaseDuration": 0,
              "type": "label",
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "dependencies": null,
            "effectTag": 0,
            "elementType": "div",
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": Array [
                <label
                  className="mr-2"
                  htmlFor="url"
                >
                  URL
                  <span
                    className="text-danger"
                  >
                    *
                  </span>
                </label>,
                <input
                  className="form-control d-inline-block"
                  id="url"
                  onChange={
                    [MockFunction] {
                      "calls": [Circular],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    }
                  }
                  placeholder="https://samples.clarifai.com/face-det.jpg"
                  type="url"
                />,
                <button
                  className="btn btn-primary"
                  disabled={false}
                  onClick={[MockFunction]}
                  type="submit"
                >
                  Detect
                </button>,
              ],
              "className": "form-input",
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": Array [
                <label
                  className="mr-2"
                  htmlFor="url"
                >
                  URL
                  <span
                    className="text-danger"
                  >
                    *
                  </span>
                </label>,
                <input
                  className="form-control d-inline-block"
                  id="url"
                  onChange={
                    [MockFunction] {
                      "calls": [Circular],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    }
                  }
                  placeholder="https://samples.clarifai.com/face-det.jpg"
                  type="url"
                />,
                <button
                  className="btn btn-primary"
                  disabled={false}
                  onClick={[MockFunction]}
                  type="submit"
                >
                  Detect
                </button>,
              ],
              "className": "form-input",
            },
            "ref": null,
            "return": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 136,
              "_debugIsCurrentlyTiming": false,
              "_debugNeedsRemount": false,
              "_debugOwner": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 130,
                "_debugIsCurrentlyTiming": false,
                "_debugNeedsRemount": false,
                "_debugOwner": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 128,
                  "_debugIsCurrentlyTiming": false,
                  "_debugNeedsRemount": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "dependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "refProp": null,
                    "wrappingComponentProps": null,
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "wrappingComponentProps": null,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "refProp": null,
                    "wrappingComponentProps": null,
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 125,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 125,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 1073741823,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": FiberRootNode {
                        "callbackExpirationTime": 0,
                        "callbackNode": null,
                        "callbackPriority": 90,
                        "containerInfo": <div>
                          <div
                            class="border border-dark rounded url-form-container form-container mt-3"
                          >
                            <form>
                              <div
                                class="form-group"
                              >
                                <div
                                  class="form-input"
                                >
                                  <label
                                    class="mr-2"
                                    for="url"
                                  >
                                    URL
                                    <span
                                      class="text-danger"
                                    >
                                      *
                                    </span>
                                  </label>
                                  <input
                                    class="form-control d-inline-block"
                                    id="url"
                                    placeholder="https://samples.clarifai.com/face-det.jpg"
                                    type="url"
                                    value=""
                                  />
                                  <button
                                    class="btn btn-primary"
                                    type="submit"
                                  >
                                    Detect
                                  </button>
                                </div>
                              </div>
                            </form>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "finishedExpirationTime": 0,
                        "finishedWork": null,
                        "firstPendingTime": 0,
                        "firstSuspendedTime": 0,
                        "hydrate": false,
                        "interactionThreadID": 17,
                        "lastExpiredTime": 0,
                        "lastPingedTime": 0,
                        "lastSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextKnownPendingLevel": 0,
                        "pendingChildren": null,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "tag": 0,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseQueue": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": [Circular],
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "buttonDisabled": false,
                                  "buttonText": "Detect",
                                  "onChange": [MockFunction] {
                                    "calls": [Circular],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                    ],
                                  },
                                  "onSubmit": [MockFunction],
                                }
                              }
                              refProp={null}
                              wrappingComponentProps={null}
                            />,
                          },
                          "priority": 97,
                          "suspenseConfig": null,
                          "tag": 0,
                        },
                        "baseState": null,
                        "effects": null,
                        "shared": Object {
                          "pending": null,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          }
                        }
                        refProp={null}
                        wrappingComponentProps={null}
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": FiberRootNode {
                      "callbackExpirationTime": 0,
                      "callbackNode": null,
                      "callbackPriority": 90,
                      "containerInfo": <div>
                        <div
                          class="border border-dark rounded url-form-container form-container mt-3"
                        >
                          <form>
                            <div
                              class="form-group"
                            >
                              <div
                                class="form-input"
                              >
                                <label
                                  class="mr-2"
                                  for="url"
                                >
                                  URL
                                  <span
                                    class="text-danger"
                                  >
                                    *
                                  </span>
                                </label>
                                <input
                                  class="form-control d-inline-block"
                                  id="url"
                                  placeholder="https://samples.clarifai.com/face-det.jpg"
                                  type="url"
                                  value=""
                                />
                                <button
                                  class="btn btn-primary"
                                  type="submit"
                                >
                                  Detect
                                </button>
                              </div>
                            </div>
                          </form>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "finishedExpirationTime": 0,
                      "finishedWork": null,
                      "firstPendingTime": 0,
                      "firstSuspendedTime": 0,
                      "hydrate": false,
                      "interactionThreadID": 17,
                      "lastExpiredTime": 0,
                      "lastPingedTime": 0,
                      "lastSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextKnownPendingLevel": 0,
                      "pendingChildren": null,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "tag": 0,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseQueue": null,
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            }
                          }
                          refProp={null}
                          wrappingComponentProps={null}
                        />,
                      },
                      "effects": null,
                      "shared": Object {
                        "pending": null,
                      },
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "refProp": null,
                      "wrappingComponentProps": null,
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "wrappingComponentProps": null,
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 1,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": Object {
                    "baseQueue": null,
                    "baseState": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "wrappingComponentProps": null,
                    },
                    "effects": null,
                    "shared": Object {
                      "pending": null,
                    },
                  },
                },
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 132,
                  "_debugIsCurrentlyTiming": false,
                  "_debugNeedsRemount": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "columnNumber": 5,
                    "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                    "lineNumber": 14,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 134,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "columnNumber": 7,
                      "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                      "lineNumber": 15,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 0,
                    "elementType": "form",
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <div
                        className="form-group"
                      >
                        <div
                          className="form-input"
                        >
                          <label
                            className="mr-2"
                            htmlFor="url"
                          >
                            URL
                            <span
                              className="text-danger"
                            >
                              *
                            </span>
                          </label>
                          <input
                            className="form-control d-inline-block"
                            id="url"
                            onChange={
                              [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              }
                            }
                            placeholder="https://samples.clarifai.com/face-det.jpg"
                            type="url"
                          />
                          <button
                            className="btn btn-primary"
                            disabled={false}
                            onClick={[MockFunction]}
                            type="submit"
                          >
                            Detect
                          </button>
                        </div>
                      </div>,
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <div
                        className="form-group"
                      >
                        <div
                          className="form-input"
                        >
                          <label
                            className="mr-2"
                            htmlFor="url"
                          >
                            URL
                            <span
                              className="text-danger"
                            >
                              *
                            </span>
                          </label>
                          <input
                            className="form-control d-inline-block"
                            id="url"
                            onChange={
                              [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              }
                            }
                            placeholder="https://samples.clarifai.com/face-det.jpg"
                            type="url"
                          />
                          <button
                            className="btn btn-primary"
                            disabled={false}
                            onClick={[MockFunction]}
                            type="submit"
                          >
                            Detect
                          </button>
                        </div>
                      </div>,
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <form>
                      <div
                        class="form-group"
                      >
                        <div
                          class="form-input"
                        >
                          <label
                            class="mr-2"
                            for="url"
                          >
                            URL
                            <span
                              class="text-danger"
                            >
                              *
                            </span>
                          </label>
                          <input
                            class="form-control d-inline-block"
                            id="url"
                            placeholder="https://samples.clarifai.com/face-det.jpg"
                            type="url"
                            value=""
                          />
                          <button
                            class="btn btn-primary"
                            type="submit"
                          >
                            Detect
                          </button>
                        </div>
                      </div>
                    </form>,
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": "form",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "dependencies": null,
                  "effectTag": 0,
                  "elementType": "div",
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <form>
                      <div
                        className="form-group"
                      >
                        <div
                          className="form-input"
                        >
                          <label
                            className="mr-2"
                            htmlFor="url"
                          >
                            URL
                            <span
                              className="text-danger"
                            >
                              *
                            </span>
                          </label>
                          <input
                            className="form-control d-inline-block"
                            id="url"
                            onChange={
                              [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              }
                            }
                            placeholder="https://samples.clarifai.com/face-det.jpg"
                            type="url"
                          />
                          <button
                            className="btn btn-primary"
                            disabled={false}
                            onClick={[MockFunction]}
                            type="submit"
                          >
                            Detect
                          </button>
                        </div>
                      </div>
                    </form>,
                    "className": "border border-dark rounded url-form-container form-container mt-3",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <form>
                      <div
                        className="form-group"
                      >
                        <div
                          className="form-input"
                        >
                          <label
                            className="mr-2"
                            htmlFor="url"
                          >
                            URL
                            <span
                              className="text-danger"
                            >
                              *
                            </span>
                          </label>
                          <input
                            className="form-control d-inline-block"
                            id="url"
                            onChange={
                              [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              }
                            }
                            placeholder="https://samples.clarifai.com/face-det.jpg"
                            type="url"
                          />
                          <button
                            className="btn btn-primary"
                            disabled={false}
                            onClick={[MockFunction]}
                            type="submit"
                          >
                            Detect
                          </button>
                        </div>
                      </div>
                    </form>,
                    "className": "border border-dark rounded url-form-container form-container mt-3",
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": <div
                    class="border border-dark rounded url-form-container form-container mt-3"
                  >
                    <form>
                      <div
                        class="form-group"
                      >
                        <div
                          class="form-input"
                        >
                          <label
                            class="mr-2"
                            for="url"
                          >
                            URL
                            <span
                              class="text-danger"
                            >
                              *
                            </span>
                          </label>
                          <input
                            class="form-control d-inline-block"
                            id="url"
                            placeholder="https://samples.clarifai.com/face-det.jpg"
                            type="url"
                            value=""
                          />
                          <button
                            class="btn btn-primary"
                            type="submit"
                          >
                            Detect
                          </button>
                        </div>
                      </div>
                    </form>
                  </div>,
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "dependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "buttonDisabled": false,
                  "buttonText": "Detect",
                  "onChange": [MockFunction] {
                    "calls": [Circular],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "onSubmit": [MockFunction],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "buttonDisabled": false,
                  "buttonText": "Detect",
                  "onChange": [MockFunction] {
                    "calls": [Circular],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "onSubmit": [MockFunction],
                },
                "ref": null,
                "return": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 128,
                  "_debugIsCurrentlyTiming": false,
                  "_debugNeedsRemount": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "dependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "refProp": null,
                    "wrappingComponentProps": null,
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "wrappingComponentProps": null,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "refProp": null,
                    "wrappingComponentProps": null,
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 125,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 125,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 1073741823,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": FiberRootNode {
                        "callbackExpirationTime": 0,
                        "callbackNode": null,
                        "callbackPriority": 90,
                        "containerInfo": <div>
                          <div
                            class="border border-dark rounded url-form-container form-container mt-3"
                          >
                            <form>
                              <div
                                class="form-group"
                              >
                                <div
                                  class="form-input"
                                >
                                  <label
                                    class="mr-2"
                                    for="url"
                                  >
                                    URL
                                    <span
                                      class="text-danger"
                                    >
                                      *
                                    </span>
                                  </label>
                                  <input
                                    class="form-control d-inline-block"
                                    id="url"
                                    placeholder="https://samples.clarifai.com/face-det.jpg"
                                    type="url"
                                    value=""
                                  />
                                  <button
                                    class="btn btn-primary"
                                    type="submit"
                                  >
                                    Detect
                                  </button>
                                </div>
                              </div>
                            </form>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "finishedExpirationTime": 0,
                        "finishedWork": null,
                        "firstPendingTime": 0,
                        "firstSuspendedTime": 0,
                        "hydrate": false,
                        "interactionThreadID": 17,
                        "lastExpiredTime": 0,
                        "lastPingedTime": 0,
                        "lastSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextKnownPendingLevel": 0,
                        "pendingChildren": null,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "tag": 0,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseQueue": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": [Circular],
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "buttonDisabled": false,
                                  "buttonText": "Detect",
                                  "onChange": [MockFunction] {
                                    "calls": [Circular],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                    ],
                                  },
                                  "onSubmit": [MockFunction],
                                }
                              }
                              refProp={null}
                              wrappingComponentProps={null}
                            />,
                          },
                          "priority": 97,
                          "suspenseConfig": null,
                          "tag": 0,
                        },
                        "baseState": null,
                        "effects": null,
                        "shared": Object {
                          "pending": null,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          }
                        }
                        refProp={null}
                        wrappingComponentProps={null}
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": FiberRootNode {
                      "callbackExpirationTime": 0,
                      "callbackNode": null,
                      "callbackPriority": 90,
                      "containerInfo": <div>
                        <div
                          class="border border-dark rounded url-form-container form-container mt-3"
                        >
                          <form>
                            <div
                              class="form-group"
                            >
                              <div
                                class="form-input"
                              >
                                <label
                                  class="mr-2"
                                  for="url"
                                >
                                  URL
                                  <span
                                    class="text-danger"
                                  >
                                    *
                                  </span>
                                </label>
                                <input
                                  class="form-control d-inline-block"
                                  id="url"
                                  placeholder="https://samples.clarifai.com/face-det.jpg"
                                  type="url"
                                  value=""
                                />
                                <button
                                  class="btn btn-primary"
                                  type="submit"
                                >
                                  Detect
                                </button>
                              </div>
                            </div>
                          </form>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "finishedExpirationTime": 0,
                      "finishedWork": null,
                      "firstPendingTime": 0,
                      "firstSuspendedTime": 0,
                      "hydrate": false,
                      "interactionThreadID": 17,
                      "lastExpiredTime": 0,
                      "lastPingedTime": 0,
                      "lastSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextKnownPendingLevel": 0,
                      "pendingChildren": null,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "tag": 0,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseQueue": null,
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            }
                          }
                          refProp={null}
                          wrappingComponentProps={null}
                        />,
                      },
                      "effects": null,
                      "shared": Object {
                        "pending": null,
                      },
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "refProp": null,
                      "wrappingComponentProps": null,
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "wrappingComponentProps": null,
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 1,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": Object {
                    "baseQueue": null,
                    "baseState": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "wrappingComponentProps": null,
                    },
                    "effects": null,
                    "shared": Object {
                      "pending": null,
                    },
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": null,
                "tag": 0,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "_debugSource": Object {
                "columnNumber": 9,
                "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                "lineNumber": 16,
              },
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "dependencies": null,
              "effectTag": 0,
              "elementType": "div",
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  <div
                    className="form-input"
                  >
                    <label
                      className="mr-2"
                      htmlFor="url"
                    >
                      URL
                      <span
                        className="text-danger"
                      >
                        *
                      </span>
                    </label>
                    <input
                      className="form-control d-inline-block"
                      id="url"
                      onChange={
                        [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        }
                      }
                      placeholder="https://samples.clarifai.com/face-det.jpg"
                      type="url"
                    />
                    <button
                      className="btn btn-primary"
                      disabled={false}
                      onClick={[MockFunction]}
                      type="submit"
                    >
                      Detect
                    </button>
                  </div>,
                  undefined,
                ],
                "className": "form-group",
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": Array [
                  <div
                    className="form-input"
                  >
                    <label
                      className="mr-2"
                      htmlFor="url"
                    >
                      URL
                      <span
                        className="text-danger"
                      >
                        *
                      </span>
                    </label>
                    <input
                      className="form-control d-inline-block"
                      id="url"
                      onChange={
                        [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        }
                      }
                      placeholder="https://samples.clarifai.com/face-det.jpg"
                      type="url"
                    />
                    <button
                      className="btn btn-primary"
                      disabled={false}
                      onClick={[MockFunction]}
                      type="submit"
                    >
                      Detect
                    </button>
                  </div>,
                  undefined,
                ],
                "className": "form-group",
              },
              "ref": null,
              "return": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 134,
                "_debugIsCurrentlyTiming": false,
                "_debugNeedsRemount": false,
                "_debugOwner": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 130,
                  "_debugIsCurrentlyTiming": false,
                  "_debugNeedsRemount": false,
                  "_debugOwner": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 128,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 1,
                    "elementType": [Function],
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "refProp": null,
                      "wrappingComponentProps": null,
                    },
                    "memoizedState": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "wrappingComponentProps": null,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "refProp": null,
                      "wrappingComponentProps": null,
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 125,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 125,
                        "_debugIsCurrentlyTiming": false,
                        "_debugNeedsRemount": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": [Circular],
                        "child": null,
                        "childExpirationTime": 0,
                        "dependencies": null,
                        "effectTag": 0,
                        "elementType": null,
                        "expirationTime": 1073741823,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": null,
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": FiberRootNode {
                          "callbackExpirationTime": 0,
                          "callbackNode": null,
                          "callbackPriority": 90,
                          "containerInfo": <div>
                            <div
                              class="border border-dark rounded url-form-container form-container mt-3"
                            >
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <div
                                    class="form-input"
                                  >
                                    <label
                                      class="mr-2"
                                      for="url"
                                    >
                                      URL
                                      <span
                                        class="text-danger"
                                      >
                                        *
                                      </span>
                                    </label>
                                    <input
                                      class="form-control d-inline-block"
                                      id="url"
                                      placeholder="https://samples.clarifai.com/face-det.jpg"
                                      type="url"
                                      value=""
                                    />
                                    <button
                                      class="btn btn-primary"
                                      type="submit"
                                    >
                                      Detect
                                    </button>
                                  </div>
                                </div>
                              </form>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "finishedExpirationTime": 0,
                          "finishedWork": null,
                          "firstPendingTime": 0,
                          "firstSuspendedTime": 0,
                          "hydrate": false,
                          "interactionThreadID": 17,
                          "lastExpiredTime": 0,
                          "lastPingedTime": 0,
                          "lastSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextKnownPendingLevel": 0,
                          "pendingChildren": null,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "tag": 0,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseQueue": Object {
                            "callback": null,
                            "expirationTime": 1073741823,
                            "next": [Circular],
                            "payload": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "buttonDisabled": false,
                                    "buttonText": "Detect",
                                    "onChange": [MockFunction] {
                                      "calls": [Circular],
                                      "results": Array [
                                        Object {
                                          "type": "return",
                                          "value": undefined,
                                        },
                                      ],
                                    },
                                    "onSubmit": [MockFunction],
                                  }
                                }
                                refProp={null}
                                wrappingComponentProps={null}
                              />,
                            },
                            "priority": 97,
                            "suspenseConfig": null,
                            "tag": 0,
                          },
                          "baseState": null,
                          "effects": null,
                          "shared": Object {
                            "pending": null,
                          },
                        },
                      },
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": null,
                      "memoizedState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            }
                          }
                          refProp={null}
                          wrappingComponentProps={null}
                        />,
                      },
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": FiberRootNode {
                        "callbackExpirationTime": 0,
                        "callbackNode": null,
                        "callbackPriority": 90,
                        "containerInfo": <div>
                          <div
                            class="border border-dark rounded url-form-container form-container mt-3"
                          >
                            <form>
                              <div
                                class="form-group"
                              >
                                <div
                                  class="form-input"
                                >
                                  <label
                                    class="mr-2"
                                    for="url"
                                  >
                                    URL
                                    <span
                                      class="text-danger"
                                    >
                                      *
                                    </span>
                                  </label>
                                  <input
                                    class="form-control d-inline-block"
                                    id="url"
                                    placeholder="https://samples.clarifai.com/face-det.jpg"
                                    type="url"
                                    value=""
                                  />
                                  <button
                                    class="btn btn-primary"
                                    type="submit"
                                  >
                                    Detect
                                  </button>
                                </div>
                              </div>
                            </form>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "finishedExpirationTime": 0,
                        "finishedWork": null,
                        "firstPendingTime": 0,
                        "firstSuspendedTime": 0,
                        "hydrate": false,
                        "interactionThreadID": 17,
                        "lastExpiredTime": 0,
                        "lastPingedTime": 0,
                        "lastSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextKnownPendingLevel": 0,
                        "pendingChildren": null,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "tag": 0,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseQueue": null,
                        "baseState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "buttonDisabled": false,
                                "buttonText": "Detect",
                                "onChange": [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                },
                                "onSubmit": [MockFunction],
                              }
                            }
                            refProp={null}
                            wrappingComponentProps={null}
                          />,
                        },
                        "effects": null,
                        "shared": Object {
                          "pending": null,
                        },
                      },
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": WrapperComponent {
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "refProp": null,
                        "wrappingComponentProps": null,
                      },
                      "refs": Object {},
                      "state": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "wrappingComponentProps": null,
                      },
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 1,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": Object {
                      "baseQueue": null,
                      "baseState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "wrappingComponentProps": null,
                      },
                      "effects": null,
                      "shared": Object {
                        "pending": null,
                      },
                    },
                  },
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 132,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "columnNumber": 5,
                      "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                      "lineNumber": 14,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 0,
                    "elementType": "div",
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <form>
                        <div
                          className="form-group"
                        >
                          <div
                            className="form-input"
                          >
                            <label
                              className="mr-2"
                              htmlFor="url"
                            >
                              URL
                              <span
                                className="text-danger"
                              >
                                *
                              </span>
                            </label>
                            <input
                              className="form-control d-inline-block"
                              id="url"
                              onChange={
                                [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                }
                              }
                              placeholder="https://samples.clarifai.com/face-det.jpg"
                              type="url"
                            />
                            <button
                              className="btn btn-primary"
                              disabled={false}
                              onClick={[MockFunction]}
                              type="submit"
                            >
                              Detect
                            </button>
                          </div>
                        </div>
                      </form>,
                      "className": "border border-dark rounded url-form-container form-container mt-3",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <form>
                        <div
                          className="form-group"
                        >
                          <div
                            className="form-input"
                          >
                            <label
                              className="mr-2"
                              htmlFor="url"
                            >
                              URL
                              <span
                                className="text-danger"
                              >
                                *
                              </span>
                            </label>
                            <input
                              className="form-control d-inline-block"
                              id="url"
                              onChange={
                                [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                }
                              }
                              placeholder="https://samples.clarifai.com/face-det.jpg"
                              type="url"
                            />
                            <button
                              className="btn btn-primary"
                              disabled={false}
                              onClick={[MockFunction]}
                              type="submit"
                            >
                              Detect
                            </button>
                          </div>
                        </div>
                      </form>,
                      "className": "border border-dark rounded url-form-container form-container mt-3",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <div
                      class="border border-dark rounded url-form-container form-container mt-3"
                    >
                      <form>
                        <div
                          class="form-group"
                        >
                          <div
                            class="form-input"
                          >
                            <label
                              class="mr-2"
                              for="url"
                            >
                              URL
                              <span
                                class="text-danger"
                              >
                                *
                              </span>
                            </label>
                            <input
                              class="form-control d-inline-block"
                              id="url"
                              placeholder="https://samples.clarifai.com/face-det.jpg"
                              type="url"
                              value=""
                            />
                            <button
                              class="btn btn-primary"
                              type="submit"
                            >
                              Detect
                            </button>
                          </div>
                        </div>
                      </form>
                    </div>,
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "dependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "buttonDisabled": false,
                    "buttonText": "Detect",
                    "onChange": [MockFunction] {
                      "calls": [Circular],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "onSubmit": [MockFunction],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "buttonDisabled": false,
                    "buttonText": "Detect",
                    "onChange": [MockFunction] {
                      "calls": [Circular],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "onSubmit": [MockFunction],
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 128,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 1,
                    "elementType": [Function],
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "refProp": null,
                      "wrappingComponentProps": null,
                    },
                    "memoizedState": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "wrappingComponentProps": null,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "refProp": null,
                      "wrappingComponentProps": null,
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 125,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 125,
                        "_debugIsCurrentlyTiming": false,
                        "_debugNeedsRemount": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": [Circular],
                        "child": null,
                        "childExpirationTime": 0,
                        "dependencies": null,
                        "effectTag": 0,
                        "elementType": null,
                        "expirationTime": 1073741823,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": null,
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": FiberRootNode {
                          "callbackExpirationTime": 0,
                          "callbackNode": null,
                          "callbackPriority": 90,
                          "containerInfo": <div>
                            <div
                              class="border border-dark rounded url-form-container form-container mt-3"
                            >
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <div
                                    class="form-input"
                                  >
                                    <label
                                      class="mr-2"
                                      for="url"
                                    >
                                      URL
                                      <span
                                        class="text-danger"
                                      >
                                        *
                                      </span>
                                    </label>
                                    <input
                                      class="form-control d-inline-block"
                                      id="url"
                                      placeholder="https://samples.clarifai.com/face-det.jpg"
                                      type="url"
                                      value=""
                                    />
                                    <button
                                      class="btn btn-primary"
                                      type="submit"
                                    >
                                      Detect
                                    </button>
                                  </div>
                                </div>
                              </form>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "finishedExpirationTime": 0,
                          "finishedWork": null,
                          "firstPendingTime": 0,
                          "firstSuspendedTime": 0,
                          "hydrate": false,
                          "interactionThreadID": 17,
                          "lastExpiredTime": 0,
                          "lastPingedTime": 0,
                          "lastSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextKnownPendingLevel": 0,
                          "pendingChildren": null,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "tag": 0,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseQueue": Object {
                            "callback": null,
                            "expirationTime": 1073741823,
                            "next": [Circular],
                            "payload": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "buttonDisabled": false,
                                    "buttonText": "Detect",
                                    "onChange": [MockFunction] {
                                      "calls": [Circular],
                                      "results": Array [
                                        Object {
                                          "type": "return",
                                          "value": undefined,
                                        },
                                      ],
                                    },
                                    "onSubmit": [MockFunction],
                                  }
                                }
                                refProp={null}
                                wrappingComponentProps={null}
                              />,
                            },
                            "priority": 97,
                            "suspenseConfig": null,
                            "tag": 0,
                          },
                          "baseState": null,
                          "effects": null,
                          "shared": Object {
                            "pending": null,
                          },
                        },
                      },
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": null,
                      "memoizedState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            }
                          }
                          refProp={null}
                          wrappingComponentProps={null}
                        />,
                      },
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": FiberRootNode {
                        "callbackExpirationTime": 0,
                        "callbackNode": null,
                        "callbackPriority": 90,
                        "containerInfo": <div>
                          <div
                            class="border border-dark rounded url-form-container form-container mt-3"
                          >
                            <form>
                              <div
                                class="form-group"
                              >
                                <div
                                  class="form-input"
                                >
                                  <label
                                    class="mr-2"
                                    for="url"
                                  >
                                    URL
                                    <span
                                      class="text-danger"
                                    >
                                      *
                                    </span>
                                  </label>
                                  <input
                                    class="form-control d-inline-block"
                                    id="url"
                                    placeholder="https://samples.clarifai.com/face-det.jpg"
                                    type="url"
                                    value=""
                                  />
                                  <button
                                    class="btn btn-primary"
                                    type="submit"
                                  >
                                    Detect
                                  </button>
                                </div>
                              </div>
                            </form>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "finishedExpirationTime": 0,
                        "finishedWork": null,
                        "firstPendingTime": 0,
                        "firstSuspendedTime": 0,
                        "hydrate": false,
                        "interactionThreadID": 17,
                        "lastExpiredTime": 0,
                        "lastPingedTime": 0,
                        "lastSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextKnownPendingLevel": 0,
                        "pendingChildren": null,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "tag": 0,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseQueue": null,
                        "baseState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "buttonDisabled": false,
                                "buttonText": "Detect",
                                "onChange": [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                },
                                "onSubmit": [MockFunction],
                              }
                            }
                            refProp={null}
                            wrappingComponentProps={null}
                          />,
                        },
                        "effects": null,
                        "shared": Object {
                          "pending": null,
                        },
                      },
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": WrapperComponent {
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "refProp": null,
                        "wrappingComponentProps": null,
                      },
                      "refs": Object {},
                      "state": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "wrappingComponentProps": null,
                      },
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 1,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": Object {
                      "baseQueue": null,
                      "baseState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "wrappingComponentProps": null,
                      },
                      "effects": null,
                      "shared": Object {
                        "pending": null,
                      },
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": null,
                  "tag": 0,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "_debugSource": Object {
                  "columnNumber": 7,
                  "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                  "lineNumber": 15,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "dependencies": null,
                "effectTag": 0,
                "elementType": "form",
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": <div
                    className="form-group"
                  >
                    <div
                      className="form-input"
                    >
                      <label
                        className="mr-2"
                        htmlFor="url"
                      >
                        URL
                        <span
                          className="text-danger"
                        >
                          *
                        </span>
                      </label>
                      <input
                        className="form-control d-inline-block"
                        id="url"
                        onChange={
                          [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          }
                        }
                        placeholder="https://samples.clarifai.com/face-det.jpg"
                        type="url"
                      />
                      <button
                        className="btn btn-primary"
                        disabled={false}
                        onClick={[MockFunction]}
                        type="submit"
                      >
                        Detect
                      </button>
                    </div>
                  </div>,
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": <div
                    className="form-group"
                  >
                    <div
                      className="form-input"
                    >
                      <label
                        className="mr-2"
                        htmlFor="url"
                      >
                        URL
                        <span
                          className="text-danger"
                        >
                          *
                        </span>
                      </label>
                      <input
                        className="form-control d-inline-block"
                        id="url"
                        onChange={
                          [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          }
                        }
                        placeholder="https://samples.clarifai.com/face-det.jpg"
                        type="url"
                      />
                      <button
                        className="btn btn-primary"
                        disabled={false}
                        onClick={[MockFunction]}
                        type="submit"
                      >
                        Detect
                      </button>
                    </div>
                  </div>,
                },
                "ref": null,
                "return": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 132,
                  "_debugIsCurrentlyTiming": false,
                  "_debugNeedsRemount": false,
                  "_debugOwner": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 130,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 128,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "refProp": null,
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "refProp": null,
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 125,
                        "_debugIsCurrentlyTiming": false,
                        "_debugNeedsRemount": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 125,
                          "_debugIsCurrentlyTiming": false,
                          "_debugNeedsRemount": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "dependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": FiberRootNode {
                            "callbackExpirationTime": 0,
                            "callbackNode": null,
                            "callbackPriority": 90,
                            "containerInfo": <div>
                              <div
                                class="border border-dark rounded url-form-container form-container mt-3"
                              >
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <div
                                      class="form-input"
                                    >
                                      <label
                                        class="mr-2"
                                        for="url"
                                      >
                                        URL
                                        <span
                                          class="text-danger"
                                        >
                                          *
                                        </span>
                                      </label>
                                      <input
                                        class="form-control d-inline-block"
                                        id="url"
                                        placeholder="https://samples.clarifai.com/face-det.jpg"
                                        type="url"
                                        value=""
                                      />
                                      <button
                                        class="btn btn-primary"
                                        type="submit"
                                      >
                                        Detect
                                      </button>
                                    </div>
                                  </div>
                                </form>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "finishedExpirationTime": 0,
                            "finishedWork": null,
                            "firstPendingTime": 0,
                            "firstSuspendedTime": 0,
                            "hydrate": false,
                            "interactionThreadID": 17,
                            "lastExpiredTime": 0,
                            "lastPingedTime": 0,
                            "lastSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextKnownPendingLevel": 0,
                            "pendingChildren": null,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "tag": 0,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseQueue": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": [Circular],
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "buttonDisabled": false,
                                      "buttonText": "Detect",
                                      "onChange": [MockFunction] {
                                        "calls": [Circular],
                                        "results": Array [
                                          Object {
                                            "type": "return",
                                            "value": undefined,
                                          },
                                        ],
                                      },
                                      "onSubmit": [MockFunction],
                                    }
                                  }
                                  refProp={null}
                                  wrappingComponentProps={null}
                                />,
                              },
                              "priority": 97,
                              "suspenseConfig": null,
                              "tag": 0,
                            },
                            "baseState": null,
                            "effects": null,
                            "shared": Object {
                              "pending": null,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "dependencies": null,
                        "effectTag": 0,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "buttonDisabled": false,
                                "buttonText": "Detect",
                                "onChange": [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                },
                                "onSubmit": [MockFunction],
                              }
                            }
                            refProp={null}
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": FiberRootNode {
                          "callbackExpirationTime": 0,
                          "callbackNode": null,
                          "callbackPriority": 90,
                          "containerInfo": <div>
                            <div
                              class="border border-dark rounded url-form-container form-container mt-3"
                            >
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <div
                                    class="form-input"
                                  >
                                    <label
                                      class="mr-2"
                                      for="url"
                                    >
                                      URL
                                      <span
                                        class="text-danger"
                                      >
                                        *
                                      </span>
                                    </label>
                                    <input
                                      class="form-control d-inline-block"
                                      id="url"
                                      placeholder="https://samples.clarifai.com/face-det.jpg"
                                      type="url"
                                      value=""
                                    />
                                    <button
                                      class="btn btn-primary"
                                      type="submit"
                                    >
                                      Detect
                                    </button>
                                  </div>
                                </div>
                              </form>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "finishedExpirationTime": 0,
                          "finishedWork": null,
                          "firstPendingTime": 0,
                          "firstSuspendedTime": 0,
                          "hydrate": false,
                          "interactionThreadID": 17,
                          "lastExpiredTime": 0,
                          "lastPingedTime": 0,
                          "lastSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextKnownPendingLevel": 0,
                          "pendingChildren": null,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "tag": 0,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseQueue": null,
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "buttonDisabled": false,
                                  "buttonText": "Detect",
                                  "onChange": [MockFunction] {
                                    "calls": [Circular],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                    ],
                                  },
                                  "onSubmit": [MockFunction],
                                }
                              }
                              refProp={null}
                              wrappingComponentProps={null}
                            />,
                          },
                          "effects": null,
                          "shared": Object {
                            "pending": null,
                          },
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "refProp": null,
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": Object {
                        "baseQueue": null,
                        "baseState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "wrappingComponentProps": null,
                        },
                        "effects": null,
                        "shared": Object {
                          "pending": null,
                        },
                      },
                    },
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 1,
                    "elementType": [Function],
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 128,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "refProp": null,
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "refProp": null,
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 125,
                        "_debugIsCurrentlyTiming": false,
                        "_debugNeedsRemount": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 125,
                          "_debugIsCurrentlyTiming": false,
                          "_debugNeedsRemount": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "dependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": FiberRootNode {
                            "callbackExpirationTime": 0,
                            "callbackNode": null,
                            "callbackPriority": 90,
                            "containerInfo": <div>
                              <div
                                class="border border-dark rounded url-form-container form-container mt-3"
                              >
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <div
                                      class="form-input"
                                    >
                                      <label
                                        class="mr-2"
                                        for="url"
                                      >
                                        URL
                                        <span
                                          class="text-danger"
                                        >
                                          *
                                        </span>
                                      </label>
                                      <input
                                        class="form-control d-inline-block"
                                        id="url"
                                        placeholder="https://samples.clarifai.com/face-det.jpg"
                                        type="url"
                                        value=""
                                      />
                                      <button
                                        class="btn btn-primary"
                                        type="submit"
                                      >
                                        Detect
                                      </button>
                                    </div>
                                  </div>
                                </form>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "finishedExpirationTime": 0,
                            "finishedWork": null,
                            "firstPendingTime": 0,
                            "firstSuspendedTime": 0,
                            "hydrate": false,
                            "interactionThreadID": 17,
                            "lastExpiredTime": 0,
                            "lastPingedTime": 0,
                            "lastSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextKnownPendingLevel": 0,
                            "pendingChildren": null,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "tag": 0,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseQueue": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": [Circular],
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "buttonDisabled": false,
                                      "buttonText": "Detect",
                                      "onChange": [MockFunction] {
                                        "calls": [Circular],
                                        "results": Array [
                                          Object {
                                            "type": "return",
                                            "value": undefined,
                                          },
                                        ],
                                      },
                                      "onSubmit": [MockFunction],
                                    }
                                  }
                                  refProp={null}
                                  wrappingComponentProps={null}
                                />,
                              },
                              "priority": 97,
                              "suspenseConfig": null,
                              "tag": 0,
                            },
                            "baseState": null,
                            "effects": null,
                            "shared": Object {
                              "pending": null,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "dependencies": null,
                        "effectTag": 0,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "buttonDisabled": false,
                                "buttonText": "Detect",
                                "onChange": [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                },
                                "onSubmit": [MockFunction],
                              }
                            }
                            refProp={null}
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": FiberRootNode {
                          "callbackExpirationTime": 0,
                          "callbackNode": null,
                          "callbackPriority": 90,
                          "containerInfo": <div>
                            <div
                              class="border border-dark rounded url-form-container form-container mt-3"
                            >
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <div
                                    class="form-input"
                                  >
                                    <label
                                      class="mr-2"
                                      for="url"
                                    >
                                      URL
                                      <span
                                        class="text-danger"
                                      >
                                        *
                                      </span>
                                    </label>
                                    <input
                                      class="form-control d-inline-block"
                                      id="url"
                                      placeholder="https://samples.clarifai.com/face-det.jpg"
                                      type="url"
                                      value=""
                                    />
                                    <button
                                      class="btn btn-primary"
                                      type="submit"
                                    >
                                      Detect
                                    </button>
                                  </div>
                                </div>
                              </form>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "finishedExpirationTime": 0,
                          "finishedWork": null,
                          "firstPendingTime": 0,
                          "firstSuspendedTime": 0,
                          "hydrate": false,
                          "interactionThreadID": 17,
                          "lastExpiredTime": 0,
                          "lastPingedTime": 0,
                          "lastSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextKnownPendingLevel": 0,
                          "pendingChildren": null,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "tag": 0,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseQueue": null,
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "buttonDisabled": false,
                                  "buttonText": "Detect",
                                  "onChange": [MockFunction] {
                                    "calls": [Circular],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                    ],
                                  },
                                  "onSubmit": [MockFunction],
                                }
                              }
                              refProp={null}
                              wrappingComponentProps={null}
                            />,
                          },
                          "effects": null,
                          "shared": Object {
                            "pending": null,
                          },
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "refProp": null,
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": Object {
                        "baseQueue": null,
                        "baseState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "wrappingComponentProps": null,
                        },
                        "effects": null,
                        "shared": Object {
                          "pending": null,
                        },
                      },
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": null,
                    "tag": 0,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "_debugSource": Object {
                    "columnNumber": 5,
                    "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                    "lineNumber": 14,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "dependencies": null,
                  "effectTag": 0,
                  "elementType": "div",
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <form>
                      <div
                        className="form-group"
                      >
                        <div
                          className="form-input"
                        >
                          <label
                            className="mr-2"
                            htmlFor="url"
                          >
                            URL
                            <span
                              className="text-danger"
                            >
                              *
                            </span>
                          </label>
                          <input
                            className="form-control d-inline-block"
                            id="url"
                            onChange={
                              [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              }
                            }
                            placeholder="https://samples.clarifai.com/face-det.jpg"
                            type="url"
                          />
                          <button
                            className="btn btn-primary"
                            disabled={false}
                            onClick={[MockFunction]}
                            type="submit"
                          >
                            Detect
                          </button>
                        </div>
                      </div>
                    </form>,
                    "className": "border border-dark rounded url-form-container form-container mt-3",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <form>
                      <div
                        className="form-group"
                      >
                        <div
                          className="form-input"
                        >
                          <label
                            className="mr-2"
                            htmlFor="url"
                          >
                            URL
                            <span
                              className="text-danger"
                            >
                              *
                            </span>
                          </label>
                          <input
                            className="form-control d-inline-block"
                            id="url"
                            onChange={
                              [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              }
                            }
                            placeholder="https://samples.clarifai.com/face-det.jpg"
                            type="url"
                          />
                          <button
                            className="btn btn-primary"
                            disabled={false}
                            onClick={[MockFunction]}
                            type="submit"
                          >
                            Detect
                          </button>
                        </div>
                      </div>
                    </form>,
                    "className": "border border-dark rounded url-form-container form-container mt-3",
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 130,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 128,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "refProp": null,
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "refProp": null,
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 125,
                        "_debugIsCurrentlyTiming": false,
                        "_debugNeedsRemount": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 125,
                          "_debugIsCurrentlyTiming": false,
                          "_debugNeedsRemount": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "dependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": FiberRootNode {
                            "callbackExpirationTime": 0,
                            "callbackNode": null,
                            "callbackPriority": 90,
                            "containerInfo": <div>
                              <div
                                class="border border-dark rounded url-form-container form-container mt-3"
                              >
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <div
                                      class="form-input"
                                    >
                                      <label
                                        class="mr-2"
                                        for="url"
                                      >
                                        URL
                                        <span
                                          class="text-danger"
                                        >
                                          *
                                        </span>
                                      </label>
                                      <input
                                        class="form-control d-inline-block"
                                        id="url"
                                        placeholder="https://samples.clarifai.com/face-det.jpg"
                                        type="url"
                                        value=""
                                      />
                                      <button
                                        class="btn btn-primary"
                                        type="submit"
                                      >
                                        Detect
                                      </button>
                                    </div>
                                  </div>
                                </form>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "finishedExpirationTime": 0,
                            "finishedWork": null,
                            "firstPendingTime": 0,
                            "firstSuspendedTime": 0,
                            "hydrate": false,
                            "interactionThreadID": 17,
                            "lastExpiredTime": 0,
                            "lastPingedTime": 0,
                            "lastSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextKnownPendingLevel": 0,
                            "pendingChildren": null,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "tag": 0,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseQueue": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": [Circular],
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "buttonDisabled": false,
                                      "buttonText": "Detect",
                                      "onChange": [MockFunction] {
                                        "calls": [Circular],
                                        "results": Array [
                                          Object {
                                            "type": "return",
                                            "value": undefined,
                                          },
                                        ],
                                      },
                                      "onSubmit": [MockFunction],
                                    }
                                  }
                                  refProp={null}
                                  wrappingComponentProps={null}
                                />,
                              },
                              "priority": 97,
                              "suspenseConfig": null,
                              "tag": 0,
                            },
                            "baseState": null,
                            "effects": null,
                            "shared": Object {
                              "pending": null,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "dependencies": null,
                        "effectTag": 0,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "buttonDisabled": false,
                                "buttonText": "Detect",
                                "onChange": [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                },
                                "onSubmit": [MockFunction],
                              }
                            }
                            refProp={null}
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": FiberRootNode {
                          "callbackExpirationTime": 0,
                          "callbackNode": null,
                          "callbackPriority": 90,
                          "containerInfo": <div>
                            <div
                              class="border border-dark rounded url-form-container form-container mt-3"
                            >
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <div
                                    class="form-input"
                                  >
                                    <label
                                      class="mr-2"
                                      for="url"
                                    >
                                      URL
                                      <span
                                        class="text-danger"
                                      >
                                        *
                                      </span>
                                    </label>
                                    <input
                                      class="form-control d-inline-block"
                                      id="url"
                                      placeholder="https://samples.clarifai.com/face-det.jpg"
                                      type="url"
                                      value=""
                                    />
                                    <button
                                      class="btn btn-primary"
                                      type="submit"
                                    >
                                      Detect
                                    </button>
                                  </div>
                                </div>
                              </form>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "finishedExpirationTime": 0,
                          "finishedWork": null,
                          "firstPendingTime": 0,
                          "firstSuspendedTime": 0,
                          "hydrate": false,
                          "interactionThreadID": 17,
                          "lastExpiredTime": 0,
                          "lastPingedTime": 0,
                          "lastSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextKnownPendingLevel": 0,
                          "pendingChildren": null,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "tag": 0,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseQueue": null,
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "buttonDisabled": false,
                                  "buttonText": "Detect",
                                  "onChange": [MockFunction] {
                                    "calls": [Circular],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                    ],
                                  },
                                  "onSubmit": [MockFunction],
                                }
                              }
                              refProp={null}
                              wrappingComponentProps={null}
                            />,
                          },
                          "effects": null,
                          "shared": Object {
                            "pending": null,
                          },
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "refProp": null,
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": Object {
                        "baseQueue": null,
                        "baseState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "wrappingComponentProps": null,
                        },
                        "effects": null,
                        "shared": Object {
                          "pending": null,
                        },
                      },
                    },
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 1,
                    "elementType": [Function],
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 128,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "refProp": null,
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "refProp": null,
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 125,
                        "_debugIsCurrentlyTiming": false,
                        "_debugNeedsRemount": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 125,
                          "_debugIsCurrentlyTiming": false,
                          "_debugNeedsRemount": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "dependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": FiberRootNode {
                            "callbackExpirationTime": 0,
                            "callbackNode": null,
                            "callbackPriority": 90,
                            "containerInfo": <div>
                              <div
                                class="border border-dark rounded url-form-container form-container mt-3"
                              >
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <div
                                      class="form-input"
                                    >
                                      <label
                                        class="mr-2"
                                        for="url"
                                      >
                                        URL
                                        <span
                                          class="text-danger"
                                        >
                                          *
                                        </span>
                                      </label>
                                      <input
                                        class="form-control d-inline-block"
                                        id="url"
                                        placeholder="https://samples.clarifai.com/face-det.jpg"
                                        type="url"
                                        value=""
                                      />
                                      <button
                                        class="btn btn-primary"
                                        type="submit"
                                      >
                                        Detect
                                      </button>
                                    </div>
                                  </div>
                                </form>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "finishedExpirationTime": 0,
                            "finishedWork": null,
                            "firstPendingTime": 0,
                            "firstSuspendedTime": 0,
                            "hydrate": false,
                            "interactionThreadID": 17,
                            "lastExpiredTime": 0,
                            "lastPingedTime": 0,
                            "lastSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextKnownPendingLevel": 0,
                            "pendingChildren": null,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "tag": 0,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseQueue": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": [Circular],
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "buttonDisabled": false,
                                      "buttonText": "Detect",
                                      "onChange": [MockFunction] {
                                        "calls": [Circular],
                                        "results": Array [
                                          Object {
                                            "type": "return",
                                            "value": undefined,
                                          },
                                        ],
                                      },
                                      "onSubmit": [MockFunction],
                                    }
                                  }
                                  refProp={null}
                                  wrappingComponentProps={null}
                                />,
                              },
                              "priority": 97,
                              "suspenseConfig": null,
                              "tag": 0,
                            },
                            "baseState": null,
                            "effects": null,
                            "shared": Object {
                              "pending": null,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "dependencies": null,
                        "effectTag": 0,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "buttonDisabled": false,
                                "buttonText": "Detect",
                                "onChange": [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                },
                                "onSubmit": [MockFunction],
                              }
                            }
                            refProp={null}
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": FiberRootNode {
                          "callbackExpirationTime": 0,
                          "callbackNode": null,
                          "callbackPriority": 90,
                          "containerInfo": <div>
                            <div
                              class="border border-dark rounded url-form-container form-container mt-3"
                            >
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <div
                                    class="form-input"
                                  >
                                    <label
                                      class="mr-2"
                                      for="url"
                                    >
                                      URL
                                      <span
                                        class="text-danger"
                                      >
                                        *
                                      </span>
                                    </label>
                                    <input
                                      class="form-control d-inline-block"
                                      id="url"
                                      placeholder="https://samples.clarifai.com/face-det.jpg"
                                      type="url"
                                      value=""
                                    />
                                    <button
                                      class="btn btn-primary"
                                      type="submit"
                                    >
                                      Detect
                                    </button>
                                  </div>
                                </div>
                              </form>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "finishedExpirationTime": 0,
                          "finishedWork": null,
                          "firstPendingTime": 0,
                          "firstSuspendedTime": 0,
                          "hydrate": false,
                          "interactionThreadID": 17,
                          "lastExpiredTime": 0,
                          "lastPingedTime": 0,
                          "lastSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextKnownPendingLevel": 0,
                          "pendingChildren": null,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "tag": 0,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseQueue": null,
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "buttonDisabled": false,
                                  "buttonText": "Detect",
                                  "onChange": [MockFunction] {
                                    "calls": [Circular],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                    ],
                                  },
                                  "onSubmit": [MockFunction],
                                }
                              }
                              refProp={null}
                              wrappingComponentProps={null}
                            />,
                          },
                          "effects": null,
                          "shared": Object {
                            "pending": null,
                          },
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "refProp": null,
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": Object {
                        "baseQueue": null,
                        "baseState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "wrappingComponentProps": null,
                        },
                        "effects": null,
                        "shared": Object {
                          "pending": null,
                        },
                      },
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": null,
                    "tag": 0,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": <div
                    class="border border-dark rounded url-form-container form-container mt-3"
                  >
                    <form>
                      <div
                        class="form-group"
                      >
                        <div
                          class="form-input"
                        >
                          <label
                            class="mr-2"
                            for="url"
                          >
                            URL
                            <span
                              class="text-danger"
                            >
                              *
                            </span>
                          </label>
                          <input
                            class="form-control d-inline-block"
                            id="url"
                            placeholder="https://samples.clarifai.com/face-det.jpg"
                            type="url"
                            value=""
                          />
                          <button
                            class="btn btn-primary"
                            type="submit"
                          >
                            Detect
                          </button>
                        </div>
                      </div>
                    </form>
                  </div>,
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": <form>
                  <div
                    class="form-group"
                  >
                    <div
                      class="form-input"
                    >
                      <label
                        class="mr-2"
                        for="url"
                      >
                        URL
                        <span
                          class="text-danger"
                        >
                          *
                        </span>
                      </label>
                      <input
                        class="form-control d-inline-block"
                        id="url"
                        placeholder="https://samples.clarifai.com/face-det.jpg"
                        type="url"
                        value=""
                      />
                      <button
                        class="btn btn-primary"
                        type="submit"
                      >
                        Detect
                      </button>
                    </div>
                  </div>
                </form>,
                "tag": 5,
                "treeBaseDuration": 0,
                "type": "form",
                "updateQueue": null,
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": <div
                class="form-group"
              >
                <div
                  class="form-input"
                >
                  <label
                    class="mr-2"
                    for="url"
                  >
                    URL
                    <span
                      class="text-danger"
                    >
                      *
                    </span>
                  </label>
                  <input
                    class="form-control d-inline-block"
                    id="url"
                    placeholder="https://samples.clarifai.com/face-det.jpg"
                    type="url"
                    value=""
                  />
                  <button
                    class="btn btn-primary"
                    type="submit"
                  >
                    Detect
                  </button>
                </div>
              </div>,
              "tag": 5,
              "treeBaseDuration": 0,
              "type": "div",
              "updateQueue": null,
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": <div
              class="form-input"
            >
              <label
                class="mr-2"
                for="url"
              >
                URL
                <span
                  class="text-danger"
                >
                  *
                </span>
              </label>
              <input
                class="form-control d-inline-block"
                id="url"
                placeholder="https://samples.clarifai.com/face-det.jpg"
                type="url"
                value=""
              />
              <button
                class="btn btn-primary"
                type="submit"
              >
                Detect
              </button>
            </div>,
            "tag": 5,
            "treeBaseDuration": 0,
            "type": "div",
            "updateQueue": null,
          },
          "selfBaseDuration": 0,
          "sibling": FiberNode {
            "_debugHookTypes": null,
            "_debugID": 142,
            "_debugIsCurrentlyTiming": false,
            "_debugNeedsRemount": false,
            "_debugOwner": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 130,
              "_debugIsCurrentlyTiming": false,
              "_debugNeedsRemount": false,
              "_debugOwner": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 128,
                "_debugIsCurrentlyTiming": false,
                "_debugNeedsRemount": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "dependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "buttonDisabled": false,
                    "buttonText": "Detect",
                    "onChange": [MockFunction] {
                      "calls": [Circular],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "onSubmit": [MockFunction],
                  },
                  "refProp": null,
                  "wrappingComponentProps": null,
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "buttonDisabled": false,
                    "buttonText": "Detect",
                    "onChange": [MockFunction] {
                      "calls": [Circular],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "onSubmit": [MockFunction],
                  },
                  "wrappingComponentProps": null,
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "buttonDisabled": false,
                    "buttonText": "Detect",
                    "onChange": [MockFunction] {
                      "calls": [Circular],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "onSubmit": [MockFunction],
                  },
                  "refProp": null,
                  "wrappingComponentProps": null,
                },
                "ref": null,
                "return": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 125,
                  "_debugIsCurrentlyTiming": false,
                  "_debugNeedsRemount": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 125,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 1073741823,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": FiberRootNode {
                      "callbackExpirationTime": 0,
                      "callbackNode": null,
                      "callbackPriority": 90,
                      "containerInfo": <div>
                        <div
                          class="border border-dark rounded url-form-container form-container mt-3"
                        >
                          <form>
                            <div
                              class="form-group"
                            >
                              <div
                                class="form-input"
                              >
                                <label
                                  class="mr-2"
                                  for="url"
                                >
                                  URL
                                  <span
                                    class="text-danger"
                                  >
                                    *
                                  </span>
                                </label>
                                <input
                                  class="form-control d-inline-block"
                                  id="url"
                                  placeholder="https://samples.clarifai.com/face-det.jpg"
                                  type="url"
                                  value=""
                                />
                                <button
                                  class="btn btn-primary"
                                  type="submit"
                                >
                                  Detect
                                </button>
                              </div>
                            </div>
                          </form>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "finishedExpirationTime": 0,
                      "finishedWork": null,
                      "firstPendingTime": 0,
                      "firstSuspendedTime": 0,
                      "hydrate": false,
                      "interactionThreadID": 17,
                      "lastExpiredTime": 0,
                      "lastPingedTime": 0,
                      "lastSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextKnownPendingLevel": 0,
                      "pendingChildren": null,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "tag": 0,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseQueue": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": [Circular],
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "buttonDisabled": false,
                                "buttonText": "Detect",
                                "onChange": [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                },
                                "onSubmit": [MockFunction],
                              }
                            }
                            refProp={null}
                            wrappingComponentProps={null}
                          />,
                        },
                        "priority": 97,
                        "suspenseConfig": null,
                        "tag": 0,
                      },
                      "baseState": null,
                      "effects": null,
                      "shared": Object {
                        "pending": null,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "dependencies": null,
                  "effectTag": 0,
                  "elementType": null,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        }
                      }
                      refProp={null}
                      wrappingComponentProps={null}
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": FiberRootNode {
                    "callbackExpirationTime": 0,
                    "callbackNode": null,
                    "callbackPriority": 90,
                    "containerInfo": <div>
                      <div
                        class="border border-dark rounded url-form-container form-container mt-3"
                      >
                        <form>
                          <div
                            class="form-group"
                          >
                            <div
                              class="form-input"
                            >
                              <label
                                class="mr-2"
                                for="url"
                              >
                                URL
                                <span
                                  class="text-danger"
                                >
                                  *
                                </span>
                              </label>
                              <input
                                class="form-control d-inline-block"
                                id="url"
                                placeholder="https://samples.clarifai.com/face-det.jpg"
                                type="url"
                                value=""
                              />
                              <button
                                class="btn btn-primary"
                                type="submit"
                              >
                                Detect
                              </button>
                            </div>
                          </div>
                        </form>
                      </div>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "finishedExpirationTime": 0,
                    "finishedWork": null,
                    "firstPendingTime": 0,
                    "firstSuspendedTime": 0,
                    "hydrate": false,
                    "interactionThreadID": 17,
                    "lastExpiredTime": 0,
                    "lastPingedTime": 0,
                    "lastSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextKnownPendingLevel": 0,
                    "pendingChildren": null,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "pingCache": null,
                    "tag": 0,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseQueue": null,
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          }
                        }
                        refProp={null}
                        wrappingComponentProps={null}
                      />,
                    },
                    "effects": null,
                    "shared": Object {
                      "pending": null,
                    },
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "refProp": null,
                    "wrappingComponentProps": null,
                  },
                  "refs": Object {},
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "wrappingComponentProps": null,
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": Object {
                  "baseQueue": null,
                  "baseState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "wrappingComponentProps": null,
                  },
                  "effects": null,
                  "shared": Object {
                    "pending": null,
                  },
                },
              },
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 132,
                "_debugIsCurrentlyTiming": false,
                "_debugNeedsRemount": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "columnNumber": 5,
                  "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                  "lineNumber": 14,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 134,
                  "_debugIsCurrentlyTiming": false,
                  "_debugNeedsRemount": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "columnNumber": 7,
                    "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                    "lineNumber": 15,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 136,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "columnNumber": 9,
                      "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                      "lineNumber": 16,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 138,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "columnNumber": 11,
                        "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                        "lineNumber": 17,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 140,
                        "_debugIsCurrentlyTiming": false,
                        "_debugNeedsRemount": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "columnNumber": 13,
                          "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                          "lineNumber": 18,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 144,
                          "_debugIsCurrentlyTiming": false,
                          "_debugNeedsRemount": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "dependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": "URL",
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": "URL",
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 145,
                            "_debugIsCurrentlyTiming": false,
                            "_debugNeedsRemount": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "columnNumber": 18,
                              "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                              "lineNumber": 19,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "dependencies": null,
                            "effectTag": 0,
                            "elementType": "span",
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": "*",
                              "className": "text-danger",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": "*",
                              "className": "text-danger",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": <span
                              class="text-danger"
                            >
                              *
                            </span>,
                            "tag": 5,
                            "treeBaseDuration": 0,
                            "type": "span",
                            "updateQueue": null,
                          },
                          "stateNode": URL,
                          "tag": 6,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "dependencies": null,
                        "effectTag": 0,
                        "elementType": "label",
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            "URL",
                            <span
                              className="text-danger"
                            >
                              *
                            </span>,
                          ],
                          "className": "mr-2",
                          "htmlFor": "url",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            "URL",
                            <span
                              className="text-danger"
                            >
                              *
                            </span>,
                          ],
                          "className": "mr-2",
                          "htmlFor": "url",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": [Circular],
                        "stateNode": <label
                          class="mr-2"
                          for="url"
                        >
                          URL
                          <span
                            class="text-danger"
                          >
                            *
                          </span>
                        </label>,
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": "label",
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 0,
                      "elementType": "div",
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          <label
                            className="mr-2"
                            htmlFor="url"
                          >
                            URL
                            <span
                              className="text-danger"
                            >
                              *
                            </span>
                          </label>,
                          <input
                            className="form-control d-inline-block"
                            id="url"
                            onChange={
                              [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              }
                            }
                            placeholder="https://samples.clarifai.com/face-det.jpg"
                            type="url"
                          />,
                          <button
                            className="btn btn-primary"
                            disabled={false}
                            onClick={[MockFunction]}
                            type="submit"
                          >
                            Detect
                          </button>,
                        ],
                        "className": "form-input",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          <label
                            className="mr-2"
                            htmlFor="url"
                          >
                            URL
                            <span
                              className="text-danger"
                            >
                              *
                            </span>
                          </label>,
                          <input
                            className="form-control d-inline-block"
                            id="url"
                            onChange={
                              [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              }
                            }
                            placeholder="https://samples.clarifai.com/face-det.jpg"
                            type="url"
                          />,
                          <button
                            className="btn btn-primary"
                            disabled={false}
                            onClick={[MockFunction]}
                            type="submit"
                          >
                            Detect
                          </button>,
                        ],
                        "className": "form-input",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <div
                        class="form-input"
                      >
                        <label
                          class="mr-2"
                          for="url"
                        >
                          URL
                          <span
                            class="text-danger"
                          >
                            *
                          </span>
                        </label>
                        <input
                          class="form-control d-inline-block"
                          id="url"
                          placeholder="https://samples.clarifai.com/face-det.jpg"
                          type="url"
                          value=""
                        />
                        <button
                          class="btn btn-primary"
                          type="submit"
                        >
                          Detect
                        </button>
                      </div>,
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 0,
                    "elementType": "div",
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        <div
                          className="form-input"
                        >
                          <label
                            className="mr-2"
                            htmlFor="url"
                          >
                            URL
                            <span
                              className="text-danger"
                            >
                              *
                            </span>
                          </label>
                          <input
                            className="form-control d-inline-block"
                            id="url"
                            onChange={
                              [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              }
                            }
                            placeholder="https://samples.clarifai.com/face-det.jpg"
                            type="url"
                          />
                          <button
                            className="btn btn-primary"
                            disabled={false}
                            onClick={[MockFunction]}
                            type="submit"
                          >
                            Detect
                          </button>
                        </div>,
                        undefined,
                      ],
                      "className": "form-group",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        <div
                          className="form-input"
                        >
                          <label
                            className="mr-2"
                            htmlFor="url"
                          >
                            URL
                            <span
                              className="text-danger"
                            >
                              *
                            </span>
                          </label>
                          <input
                            className="form-control d-inline-block"
                            id="url"
                            onChange={
                              [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              }
                            }
                            placeholder="https://samples.clarifai.com/face-det.jpg"
                            type="url"
                          />
                          <button
                            className="btn btn-primary"
                            disabled={false}
                            onClick={[MockFunction]}
                            type="submit"
                          >
                            Detect
                          </button>
                        </div>,
                        undefined,
                      ],
                      "className": "form-group",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <div
                      class="form-group"
                    >
                      <div
                        class="form-input"
                      >
                        <label
                          class="mr-2"
                          for="url"
                        >
                          URL
                          <span
                            class="text-danger"
                          >
                            *
                          </span>
                        </label>
                        <input
                          class="form-control d-inline-block"
                          id="url"
                          placeholder="https://samples.clarifai.com/face-det.jpg"
                          type="url"
                          value=""
                        />
                        <button
                          class="btn btn-primary"
                          type="submit"
                        >
                          Detect
                        </button>
                      </div>
                    </div>,
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "dependencies": null,
                  "effectTag": 0,
                  "elementType": "form",
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <div
                      className="form-group"
                    >
                      <div
                        className="form-input"
                      >
                        <label
                          className="mr-2"
                          htmlFor="url"
                        >
                          URL
                          <span
                            className="text-danger"
                          >
                            *
                          </span>
                        </label>
                        <input
                          className="form-control d-inline-block"
                          id="url"
                          onChange={
                            [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            }
                          }
                          placeholder="https://samples.clarifai.com/face-det.jpg"
                          type="url"
                        />
                        <button
                          className="btn btn-primary"
                          disabled={false}
                          onClick={[MockFunction]}
                          type="submit"
                        >
                          Detect
                        </button>
                      </div>
                    </div>,
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <div
                      className="form-group"
                    >
                      <div
                        className="form-input"
                      >
                        <label
                          className="mr-2"
                          htmlFor="url"
                        >
                          URL
                          <span
                            className="text-danger"
                          >
                            *
                          </span>
                        </label>
                        <input
                          className="form-control d-inline-block"
                          id="url"
                          onChange={
                            [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            }
                          }
                          placeholder="https://samples.clarifai.com/face-det.jpg"
                          type="url"
                        />
                        <button
                          className="btn btn-primary"
                          disabled={false}
                          onClick={[MockFunction]}
                          type="submit"
                        >
                          Detect
                        </button>
                      </div>
                    </div>,
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": <form>
                    <div
                      class="form-group"
                    >
                      <div
                        class="form-input"
                      >
                        <label
                          class="mr-2"
                          for="url"
                        >
                          URL
                          <span
                            class="text-danger"
                          >
                            *
                          </span>
                        </label>
                        <input
                          class="form-control d-inline-block"
                          id="url"
                          placeholder="https://samples.clarifai.com/face-det.jpg"
                          type="url"
                          value=""
                        />
                        <button
                          class="btn btn-primary"
                          type="submit"
                        >
                          Detect
                        </button>
                      </div>
                    </div>
                  </form>,
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": "form",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "dependencies": null,
                "effectTag": 0,
                "elementType": "div",
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": <form>
                    <div
                      className="form-group"
                    >
                      <div
                        className="form-input"
                      >
                        <label
                          className="mr-2"
                          htmlFor="url"
                        >
                          URL
                          <span
                            className="text-danger"
                          >
                            *
                          </span>
                        </label>
                        <input
                          className="form-control d-inline-block"
                          id="url"
                          onChange={
                            [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            }
                          }
                          placeholder="https://samples.clarifai.com/face-det.jpg"
                          type="url"
                        />
                        <button
                          className="btn btn-primary"
                          disabled={false}
                          onClick={[MockFunction]}
                          type="submit"
                        >
                          Detect
                        </button>
                      </div>
                    </div>
                  </form>,
                  "className": "border border-dark rounded url-form-container form-container mt-3",
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": <form>
                    <div
                      className="form-group"
                    >
                      <div
                        className="form-input"
                      >
                        <label
                          className="mr-2"
                          htmlFor="url"
                        >
                          URL
                          <span
                            className="text-danger"
                          >
                            *
                          </span>
                        </label>
                        <input
                          className="form-control d-inline-block"
                          id="url"
                          onChange={
                            [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            }
                          }
                          placeholder="https://samples.clarifai.com/face-det.jpg"
                          type="url"
                        />
                        <button
                          className="btn btn-primary"
                          disabled={false}
                          onClick={[MockFunction]}
                          type="submit"
                        >
                          Detect
                        </button>
                      </div>
                    </div>
                  </form>,
                  "className": "border border-dark rounded url-form-container form-container mt-3",
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": <div
                  class="border border-dark rounded url-form-container form-container mt-3"
                >
                  <form>
                    <div
                      class="form-group"
                    >
                      <div
                        class="form-input"
                      >
                        <label
                          class="mr-2"
                          for="url"
                        >
                          URL
                          <span
                            class="text-danger"
                          >
                            *
                          </span>
                        </label>
                        <input
                          class="form-control d-inline-block"
                          id="url"
                          placeholder="https://samples.clarifai.com/face-det.jpg"
                          type="url"
                          value=""
                        />
                        <button
                          class="btn btn-primary"
                          type="submit"
                        >
                          Detect
                        </button>
                      </div>
                    </div>
                  </form>
                </div>,
                "tag": 5,
                "treeBaseDuration": 0,
                "type": "div",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "dependencies": null,
              "effectTag": 1,
              "elementType": [Function],
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "buttonDisabled": false,
                "buttonText": "Detect",
                "onChange": [MockFunction] {
                  "calls": [Circular],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": undefined,
                    },
                  ],
                },
                "onSubmit": [MockFunction],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "buttonDisabled": false,
                "buttonText": "Detect",
                "onChange": [MockFunction] {
                  "calls": [Circular],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": undefined,
                    },
                  ],
                },
                "onSubmit": [MockFunction],
              },
              "ref": null,
              "return": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 128,
                "_debugIsCurrentlyTiming": false,
                "_debugNeedsRemount": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "dependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "buttonDisabled": false,
                    "buttonText": "Detect",
                    "onChange": [MockFunction] {
                      "calls": [Circular],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "onSubmit": [MockFunction],
                  },
                  "refProp": null,
                  "wrappingComponentProps": null,
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "buttonDisabled": false,
                    "buttonText": "Detect",
                    "onChange": [MockFunction] {
                      "calls": [Circular],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "onSubmit": [MockFunction],
                  },
                  "wrappingComponentProps": null,
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "buttonDisabled": false,
                    "buttonText": "Detect",
                    "onChange": [MockFunction] {
                      "calls": [Circular],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "onSubmit": [MockFunction],
                  },
                  "refProp": null,
                  "wrappingComponentProps": null,
                },
                "ref": null,
                "return": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 125,
                  "_debugIsCurrentlyTiming": false,
                  "_debugNeedsRemount": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 125,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 1073741823,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": FiberRootNode {
                      "callbackExpirationTime": 0,
                      "callbackNode": null,
                      "callbackPriority": 90,
                      "containerInfo": <div>
                        <div
                          class="border border-dark rounded url-form-container form-container mt-3"
                        >
                          <form>
                            <div
                              class="form-group"
                            >
                              <div
                                class="form-input"
                              >
                                <label
                                  class="mr-2"
                                  for="url"
                                >
                                  URL
                                  <span
                                    class="text-danger"
                                  >
                                    *
                                  </span>
                                </label>
                                <input
                                  class="form-control d-inline-block"
                                  id="url"
                                  placeholder="https://samples.clarifai.com/face-det.jpg"
                                  type="url"
                                  value=""
                                />
                                <button
                                  class="btn btn-primary"
                                  type="submit"
                                >
                                  Detect
                                </button>
                              </div>
                            </div>
                          </form>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "finishedExpirationTime": 0,
                      "finishedWork": null,
                      "firstPendingTime": 0,
                      "firstSuspendedTime": 0,
                      "hydrate": false,
                      "interactionThreadID": 17,
                      "lastExpiredTime": 0,
                      "lastPingedTime": 0,
                      "lastSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextKnownPendingLevel": 0,
                      "pendingChildren": null,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "tag": 0,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseQueue": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": [Circular],
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "buttonDisabled": false,
                                "buttonText": "Detect",
                                "onChange": [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                },
                                "onSubmit": [MockFunction],
                              }
                            }
                            refProp={null}
                            wrappingComponentProps={null}
                          />,
                        },
                        "priority": 97,
                        "suspenseConfig": null,
                        "tag": 0,
                      },
                      "baseState": null,
                      "effects": null,
                      "shared": Object {
                        "pending": null,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "dependencies": null,
                  "effectTag": 0,
                  "elementType": null,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        }
                      }
                      refProp={null}
                      wrappingComponentProps={null}
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": FiberRootNode {
                    "callbackExpirationTime": 0,
                    "callbackNode": null,
                    "callbackPriority": 90,
                    "containerInfo": <div>
                      <div
                        class="border border-dark rounded url-form-container form-container mt-3"
                      >
                        <form>
                          <div
                            class="form-group"
                          >
                            <div
                              class="form-input"
                            >
                              <label
                                class="mr-2"
                                for="url"
                              >
                                URL
                                <span
                                  class="text-danger"
                                >
                                  *
                                </span>
                              </label>
                              <input
                                class="form-control d-inline-block"
                                id="url"
                                placeholder="https://samples.clarifai.com/face-det.jpg"
                                type="url"
                                value=""
                              />
                              <button
                                class="btn btn-primary"
                                type="submit"
                              >
                                Detect
                              </button>
                            </div>
                          </div>
                        </form>
                      </div>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "finishedExpirationTime": 0,
                    "finishedWork": null,
                    "firstPendingTime": 0,
                    "firstSuspendedTime": 0,
                    "hydrate": false,
                    "interactionThreadID": 17,
                    "lastExpiredTime": 0,
                    "lastPingedTime": 0,
                    "lastSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextKnownPendingLevel": 0,
                    "pendingChildren": null,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "pingCache": null,
                    "tag": 0,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseQueue": null,
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          }
                        }
                        refProp={null}
                        wrappingComponentProps={null}
                      />,
                    },
                    "effects": null,
                    "shared": Object {
                      "pending": null,
                    },
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "refProp": null,
                    "wrappingComponentProps": null,
                  },
                  "refs": Object {},
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "wrappingComponentProps": null,
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": Object {
                  "baseQueue": null,
                  "baseState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "wrappingComponentProps": null,
                  },
                  "effects": null,
                  "shared": Object {
                    "pending": null,
                  },
                },
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": null,
              "tag": 0,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "_debugSource": Object {
              "columnNumber": 13,
              "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
              "lineNumber": 29,
            },
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": null,
            "childExpirationTime": 0,
            "dependencies": null,
            "effectTag": 0,
            "elementType": "button",
            "expirationTime": 0,
            "firstEffect": null,
            "index": 2,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": "Detect",
              "className": "btn btn-primary",
              "disabled": false,
              "onClick": [MockFunction],
              "type": "submit",
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": "Detect",
              "className": "btn btn-primary",
              "disabled": false,
              "onClick": [MockFunction],
              "type": "submit",
            },
            "ref": null,
            "return": FiberNode {
              "_debugHookTypes": null,
              "_debugID": 138,
              "_debugIsCurrentlyTiming": false,
              "_debugNeedsRemount": false,
              "_debugOwner": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 130,
                "_debugIsCurrentlyTiming": false,
                "_debugNeedsRemount": false,
                "_debugOwner": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 128,
                  "_debugIsCurrentlyTiming": false,
                  "_debugNeedsRemount": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "dependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "refProp": null,
                    "wrappingComponentProps": null,
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "wrappingComponentProps": null,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "refProp": null,
                    "wrappingComponentProps": null,
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 125,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 125,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 1073741823,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": FiberRootNode {
                        "callbackExpirationTime": 0,
                        "callbackNode": null,
                        "callbackPriority": 90,
                        "containerInfo": <div>
                          <div
                            class="border border-dark rounded url-form-container form-container mt-3"
                          >
                            <form>
                              <div
                                class="form-group"
                              >
                                <div
                                  class="form-input"
                                >
                                  <label
                                    class="mr-2"
                                    for="url"
                                  >
                                    URL
                                    <span
                                      class="text-danger"
                                    >
                                      *
                                    </span>
                                  </label>
                                  <input
                                    class="form-control d-inline-block"
                                    id="url"
                                    placeholder="https://samples.clarifai.com/face-det.jpg"
                                    type="url"
                                    value=""
                                  />
                                  <button
                                    class="btn btn-primary"
                                    type="submit"
                                  >
                                    Detect
                                  </button>
                                </div>
                              </div>
                            </form>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "finishedExpirationTime": 0,
                        "finishedWork": null,
                        "firstPendingTime": 0,
                        "firstSuspendedTime": 0,
                        "hydrate": false,
                        "interactionThreadID": 17,
                        "lastExpiredTime": 0,
                        "lastPingedTime": 0,
                        "lastSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextKnownPendingLevel": 0,
                        "pendingChildren": null,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "tag": 0,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseQueue": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": [Circular],
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "buttonDisabled": false,
                                  "buttonText": "Detect",
                                  "onChange": [MockFunction] {
                                    "calls": [Circular],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                    ],
                                  },
                                  "onSubmit": [MockFunction],
                                }
                              }
                              refProp={null}
                              wrappingComponentProps={null}
                            />,
                          },
                          "priority": 97,
                          "suspenseConfig": null,
                          "tag": 0,
                        },
                        "baseState": null,
                        "effects": null,
                        "shared": Object {
                          "pending": null,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          }
                        }
                        refProp={null}
                        wrappingComponentProps={null}
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": FiberRootNode {
                      "callbackExpirationTime": 0,
                      "callbackNode": null,
                      "callbackPriority": 90,
                      "containerInfo": <div>
                        <div
                          class="border border-dark rounded url-form-container form-container mt-3"
                        >
                          <form>
                            <div
                              class="form-group"
                            >
                              <div
                                class="form-input"
                              >
                                <label
                                  class="mr-2"
                                  for="url"
                                >
                                  URL
                                  <span
                                    class="text-danger"
                                  >
                                    *
                                  </span>
                                </label>
                                <input
                                  class="form-control d-inline-block"
                                  id="url"
                                  placeholder="https://samples.clarifai.com/face-det.jpg"
                                  type="url"
                                  value=""
                                />
                                <button
                                  class="btn btn-primary"
                                  type="submit"
                                >
                                  Detect
                                </button>
                              </div>
                            </div>
                          </form>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "finishedExpirationTime": 0,
                      "finishedWork": null,
                      "firstPendingTime": 0,
                      "firstSuspendedTime": 0,
                      "hydrate": false,
                      "interactionThreadID": 17,
                      "lastExpiredTime": 0,
                      "lastPingedTime": 0,
                      "lastSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextKnownPendingLevel": 0,
                      "pendingChildren": null,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "tag": 0,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseQueue": null,
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            }
                          }
                          refProp={null}
                          wrappingComponentProps={null}
                        />,
                      },
                      "effects": null,
                      "shared": Object {
                        "pending": null,
                      },
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "refProp": null,
                      "wrappingComponentProps": null,
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "wrappingComponentProps": null,
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 1,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": Object {
                    "baseQueue": null,
                    "baseState": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "wrappingComponentProps": null,
                    },
                    "effects": null,
                    "shared": Object {
                      "pending": null,
                    },
                  },
                },
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 132,
                  "_debugIsCurrentlyTiming": false,
                  "_debugNeedsRemount": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "columnNumber": 5,
                    "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                    "lineNumber": 14,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 134,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "columnNumber": 7,
                      "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                      "lineNumber": 15,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 136,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "columnNumber": 9,
                        "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                        "lineNumber": 16,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 0,
                      "elementType": "div",
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          <div
                            className="form-input"
                          >
                            <label
                              className="mr-2"
                              htmlFor="url"
                            >
                              URL
                              <span
                                className="text-danger"
                              >
                                *
                              </span>
                            </label>
                            <input
                              className="form-control d-inline-block"
                              id="url"
                              onChange={
                                [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                }
                              }
                              placeholder="https://samples.clarifai.com/face-det.jpg"
                              type="url"
                            />
                            <button
                              className="btn btn-primary"
                              disabled={false}
                              onClick={[MockFunction]}
                              type="submit"
                            >
                              Detect
                            </button>
                          </div>,
                          undefined,
                        ],
                        "className": "form-group",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          <div
                            className="form-input"
                          >
                            <label
                              className="mr-2"
                              htmlFor="url"
                            >
                              URL
                              <span
                                className="text-danger"
                              >
                                *
                              </span>
                            </label>
                            <input
                              className="form-control d-inline-block"
                              id="url"
                              onChange={
                                [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                }
                              }
                              placeholder="https://samples.clarifai.com/face-det.jpg"
                              type="url"
                            />
                            <button
                              className="btn btn-primary"
                              disabled={false}
                              onClick={[MockFunction]}
                              type="submit"
                            >
                              Detect
                            </button>
                          </div>,
                          undefined,
                        ],
                        "className": "form-group",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <div
                        class="form-group"
                      >
                        <div
                          class="form-input"
                        >
                          <label
                            class="mr-2"
                            for="url"
                          >
                            URL
                            <span
                              class="text-danger"
                            >
                              *
                            </span>
                          </label>
                          <input
                            class="form-control d-inline-block"
                            id="url"
                            placeholder="https://samples.clarifai.com/face-det.jpg"
                            type="url"
                            value=""
                          />
                          <button
                            class="btn btn-primary"
                            type="submit"
                          >
                            Detect
                          </button>
                        </div>
                      </div>,
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 0,
                    "elementType": "form",
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <div
                        className="form-group"
                      >
                        <div
                          className="form-input"
                        >
                          <label
                            className="mr-2"
                            htmlFor="url"
                          >
                            URL
                            <span
                              className="text-danger"
                            >
                              *
                            </span>
                          </label>
                          <input
                            className="form-control d-inline-block"
                            id="url"
                            onChange={
                              [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              }
                            }
                            placeholder="https://samples.clarifai.com/face-det.jpg"
                            type="url"
                          />
                          <button
                            className="btn btn-primary"
                            disabled={false}
                            onClick={[MockFunction]}
                            type="submit"
                          >
                            Detect
                          </button>
                        </div>
                      </div>,
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <div
                        className="form-group"
                      >
                        <div
                          className="form-input"
                        >
                          <label
                            className="mr-2"
                            htmlFor="url"
                          >
                            URL
                            <span
                              className="text-danger"
                            >
                              *
                            </span>
                          </label>
                          <input
                            className="form-control d-inline-block"
                            id="url"
                            onChange={
                              [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              }
                            }
                            placeholder="https://samples.clarifai.com/face-det.jpg"
                            type="url"
                          />
                          <button
                            className="btn btn-primary"
                            disabled={false}
                            onClick={[MockFunction]}
                            type="submit"
                          >
                            Detect
                          </button>
                        </div>
                      </div>,
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <form>
                      <div
                        class="form-group"
                      >
                        <div
                          class="form-input"
                        >
                          <label
                            class="mr-2"
                            for="url"
                          >
                            URL
                            <span
                              class="text-danger"
                            >
                              *
                            </span>
                          </label>
                          <input
                            class="form-control d-inline-block"
                            id="url"
                            placeholder="https://samples.clarifai.com/face-det.jpg"
                            type="url"
                            value=""
                          />
                          <button
                            class="btn btn-primary"
                            type="submit"
                          >
                            Detect
                          </button>
                        </div>
                      </div>
                    </form>,
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": "form",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "dependencies": null,
                  "effectTag": 0,
                  "elementType": "div",
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <form>
                      <div
                        className="form-group"
                      >
                        <div
                          className="form-input"
                        >
                          <label
                            className="mr-2"
                            htmlFor="url"
                          >
                            URL
                            <span
                              className="text-danger"
                            >
                              *
                            </span>
                          </label>
                          <input
                            className="form-control d-inline-block"
                            id="url"
                            onChange={
                              [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              }
                            }
                            placeholder="https://samples.clarifai.com/face-det.jpg"
                            type="url"
                          />
                          <button
                            className="btn btn-primary"
                            disabled={false}
                            onClick={[MockFunction]}
                            type="submit"
                          >
                            Detect
                          </button>
                        </div>
                      </div>
                    </form>,
                    "className": "border border-dark rounded url-form-container form-container mt-3",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <form>
                      <div
                        className="form-group"
                      >
                        <div
                          className="form-input"
                        >
                          <label
                            className="mr-2"
                            htmlFor="url"
                          >
                            URL
                            <span
                              className="text-danger"
                            >
                              *
                            </span>
                          </label>
                          <input
                            className="form-control d-inline-block"
                            id="url"
                            onChange={
                              [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              }
                            }
                            placeholder="https://samples.clarifai.com/face-det.jpg"
                            type="url"
                          />
                          <button
                            className="btn btn-primary"
                            disabled={false}
                            onClick={[MockFunction]}
                            type="submit"
                          >
                            Detect
                          </button>
                        </div>
                      </div>
                    </form>,
                    "className": "border border-dark rounded url-form-container form-container mt-3",
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": <div
                    class="border border-dark rounded url-form-container form-container mt-3"
                  >
                    <form>
                      <div
                        class="form-group"
                      >
                        <div
                          class="form-input"
                        >
                          <label
                            class="mr-2"
                            for="url"
                          >
                            URL
                            <span
                              class="text-danger"
                            >
                              *
                            </span>
                          </label>
                          <input
                            class="form-control d-inline-block"
                            id="url"
                            placeholder="https://samples.clarifai.com/face-det.jpg"
                            type="url"
                            value=""
                          />
                          <button
                            class="btn btn-primary"
                            type="submit"
                          >
                            Detect
                          </button>
                        </div>
                      </div>
                    </form>
                  </div>,
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "dependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "buttonDisabled": false,
                  "buttonText": "Detect",
                  "onChange": [MockFunction] {
                    "calls": [Circular],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "onSubmit": [MockFunction],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "buttonDisabled": false,
                  "buttonText": "Detect",
                  "onChange": [MockFunction] {
                    "calls": [Circular],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "onSubmit": [MockFunction],
                },
                "ref": null,
                "return": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 128,
                  "_debugIsCurrentlyTiming": false,
                  "_debugNeedsRemount": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "dependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "refProp": null,
                    "wrappingComponentProps": null,
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "wrappingComponentProps": null,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "refProp": null,
                    "wrappingComponentProps": null,
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 125,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 125,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 1073741823,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": FiberRootNode {
                        "callbackExpirationTime": 0,
                        "callbackNode": null,
                        "callbackPriority": 90,
                        "containerInfo": <div>
                          <div
                            class="border border-dark rounded url-form-container form-container mt-3"
                          >
                            <form>
                              <div
                                class="form-group"
                              >
                                <div
                                  class="form-input"
                                >
                                  <label
                                    class="mr-2"
                                    for="url"
                                  >
                                    URL
                                    <span
                                      class="text-danger"
                                    >
                                      *
                                    </span>
                                  </label>
                                  <input
                                    class="form-control d-inline-block"
                                    id="url"
                                    placeholder="https://samples.clarifai.com/face-det.jpg"
                                    type="url"
                                    value=""
                                  />
                                  <button
                                    class="btn btn-primary"
                                    type="submit"
                                  >
                                    Detect
                                  </button>
                                </div>
                              </div>
                            </form>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "finishedExpirationTime": 0,
                        "finishedWork": null,
                        "firstPendingTime": 0,
                        "firstSuspendedTime": 0,
                        "hydrate": false,
                        "interactionThreadID": 17,
                        "lastExpiredTime": 0,
                        "lastPingedTime": 0,
                        "lastSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextKnownPendingLevel": 0,
                        "pendingChildren": null,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "tag": 0,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseQueue": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": [Circular],
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "buttonDisabled": false,
                                  "buttonText": "Detect",
                                  "onChange": [MockFunction] {
                                    "calls": [Circular],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                    ],
                                  },
                                  "onSubmit": [MockFunction],
                                }
                              }
                              refProp={null}
                              wrappingComponentProps={null}
                            />,
                          },
                          "priority": 97,
                          "suspenseConfig": null,
                          "tag": 0,
                        },
                        "baseState": null,
                        "effects": null,
                        "shared": Object {
                          "pending": null,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          }
                        }
                        refProp={null}
                        wrappingComponentProps={null}
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": FiberRootNode {
                      "callbackExpirationTime": 0,
                      "callbackNode": null,
                      "callbackPriority": 90,
                      "containerInfo": <div>
                        <div
                          class="border border-dark rounded url-form-container form-container mt-3"
                        >
                          <form>
                            <div
                              class="form-group"
                            >
                              <div
                                class="form-input"
                              >
                                <label
                                  class="mr-2"
                                  for="url"
                                >
                                  URL
                                  <span
                                    class="text-danger"
                                  >
                                    *
                                  </span>
                                </label>
                                <input
                                  class="form-control d-inline-block"
                                  id="url"
                                  placeholder="https://samples.clarifai.com/face-det.jpg"
                                  type="url"
                                  value=""
                                />
                                <button
                                  class="btn btn-primary"
                                  type="submit"
                                >
                                  Detect
                                </button>
                              </div>
                            </div>
                          </form>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "finishedExpirationTime": 0,
                      "finishedWork": null,
                      "firstPendingTime": 0,
                      "firstSuspendedTime": 0,
                      "hydrate": false,
                      "interactionThreadID": 17,
                      "lastExpiredTime": 0,
                      "lastPingedTime": 0,
                      "lastSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextKnownPendingLevel": 0,
                      "pendingChildren": null,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "tag": 0,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseQueue": null,
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            }
                          }
                          refProp={null}
                          wrappingComponentProps={null}
                        />,
                      },
                      "effects": null,
                      "shared": Object {
                        "pending": null,
                      },
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "refProp": null,
                      "wrappingComponentProps": null,
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "wrappingComponentProps": null,
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 1,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": Object {
                    "baseQueue": null,
                    "baseState": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "wrappingComponentProps": null,
                    },
                    "effects": null,
                    "shared": Object {
                      "pending": null,
                    },
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": null,
                "tag": 0,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "_debugSource": Object {
                "columnNumber": 11,
                "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                "lineNumber": 17,
              },
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 140,
                "_debugIsCurrentlyTiming": false,
                "_debugNeedsRemount": false,
                "_debugOwner": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 130,
                  "_debugIsCurrentlyTiming": false,
                  "_debugNeedsRemount": false,
                  "_debugOwner": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 128,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 1,
                    "elementType": [Function],
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "refProp": null,
                      "wrappingComponentProps": null,
                    },
                    "memoizedState": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "wrappingComponentProps": null,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "refProp": null,
                      "wrappingComponentProps": null,
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 125,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 125,
                        "_debugIsCurrentlyTiming": false,
                        "_debugNeedsRemount": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": [Circular],
                        "child": null,
                        "childExpirationTime": 0,
                        "dependencies": null,
                        "effectTag": 0,
                        "elementType": null,
                        "expirationTime": 1073741823,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": null,
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": FiberRootNode {
                          "callbackExpirationTime": 0,
                          "callbackNode": null,
                          "callbackPriority": 90,
                          "containerInfo": <div>
                            <div
                              class="border border-dark rounded url-form-container form-container mt-3"
                            >
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <div
                                    class="form-input"
                                  >
                                    <label
                                      class="mr-2"
                                      for="url"
                                    >
                                      URL
                                      <span
                                        class="text-danger"
                                      >
                                        *
                                      </span>
                                    </label>
                                    <input
                                      class="form-control d-inline-block"
                                      id="url"
                                      placeholder="https://samples.clarifai.com/face-det.jpg"
                                      type="url"
                                      value=""
                                    />
                                    <button
                                      class="btn btn-primary"
                                      type="submit"
                                    >
                                      Detect
                                    </button>
                                  </div>
                                </div>
                              </form>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "finishedExpirationTime": 0,
                          "finishedWork": null,
                          "firstPendingTime": 0,
                          "firstSuspendedTime": 0,
                          "hydrate": false,
                          "interactionThreadID": 17,
                          "lastExpiredTime": 0,
                          "lastPingedTime": 0,
                          "lastSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextKnownPendingLevel": 0,
                          "pendingChildren": null,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "tag": 0,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseQueue": Object {
                            "callback": null,
                            "expirationTime": 1073741823,
                            "next": [Circular],
                            "payload": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "buttonDisabled": false,
                                    "buttonText": "Detect",
                                    "onChange": [MockFunction] {
                                      "calls": [Circular],
                                      "results": Array [
                                        Object {
                                          "type": "return",
                                          "value": undefined,
                                        },
                                      ],
                                    },
                                    "onSubmit": [MockFunction],
                                  }
                                }
                                refProp={null}
                                wrappingComponentProps={null}
                              />,
                            },
                            "priority": 97,
                            "suspenseConfig": null,
                            "tag": 0,
                          },
                          "baseState": null,
                          "effects": null,
                          "shared": Object {
                            "pending": null,
                          },
                        },
                      },
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": null,
                      "memoizedState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            }
                          }
                          refProp={null}
                          wrappingComponentProps={null}
                        />,
                      },
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": FiberRootNode {
                        "callbackExpirationTime": 0,
                        "callbackNode": null,
                        "callbackPriority": 90,
                        "containerInfo": <div>
                          <div
                            class="border border-dark rounded url-form-container form-container mt-3"
                          >
                            <form>
                              <div
                                class="form-group"
                              >
                                <div
                                  class="form-input"
                                >
                                  <label
                                    class="mr-2"
                                    for="url"
                                  >
                                    URL
                                    <span
                                      class="text-danger"
                                    >
                                      *
                                    </span>
                                  </label>
                                  <input
                                    class="form-control d-inline-block"
                                    id="url"
                                    placeholder="https://samples.clarifai.com/face-det.jpg"
                                    type="url"
                                    value=""
                                  />
                                  <button
                                    class="btn btn-primary"
                                    type="submit"
                                  >
                                    Detect
                                  </button>
                                </div>
                              </div>
                            </form>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "finishedExpirationTime": 0,
                        "finishedWork": null,
                        "firstPendingTime": 0,
                        "firstSuspendedTime": 0,
                        "hydrate": false,
                        "interactionThreadID": 17,
                        "lastExpiredTime": 0,
                        "lastPingedTime": 0,
                        "lastSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextKnownPendingLevel": 0,
                        "pendingChildren": null,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "tag": 0,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseQueue": null,
                        "baseState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "buttonDisabled": false,
                                "buttonText": "Detect",
                                "onChange": [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                },
                                "onSubmit": [MockFunction],
                              }
                            }
                            refProp={null}
                            wrappingComponentProps={null}
                          />,
                        },
                        "effects": null,
                        "shared": Object {
                          "pending": null,
                        },
                      },
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": WrapperComponent {
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "refProp": null,
                        "wrappingComponentProps": null,
                      },
                      "refs": Object {},
                      "state": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "wrappingComponentProps": null,
                      },
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 1,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": Object {
                      "baseQueue": null,
                      "baseState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "wrappingComponentProps": null,
                      },
                      "effects": null,
                      "shared": Object {
                        "pending": null,
                      },
                    },
                  },
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 132,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "columnNumber": 5,
                      "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                      "lineNumber": 14,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 134,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "columnNumber": 7,
                        "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                        "lineNumber": 15,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 136,
                        "_debugIsCurrentlyTiming": false,
                        "_debugNeedsRemount": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "columnNumber": 9,
                          "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                          "lineNumber": 16,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "dependencies": null,
                        "effectTag": 0,
                        "elementType": "div",
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            <div
                              className="form-input"
                            >
                              <label
                                className="mr-2"
                                htmlFor="url"
                              >
                                URL
                                <span
                                  className="text-danger"
                                >
                                  *
                                </span>
                              </label>
                              <input
                                className="form-control d-inline-block"
                                id="url"
                                onChange={
                                  [MockFunction] {
                                    "calls": [Circular],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                    ],
                                  }
                                }
                                placeholder="https://samples.clarifai.com/face-det.jpg"
                                type="url"
                              />
                              <button
                                className="btn btn-primary"
                                disabled={false}
                                onClick={[MockFunction]}
                                type="submit"
                              >
                                Detect
                              </button>
                            </div>,
                            undefined,
                          ],
                          "className": "form-group",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            <div
                              className="form-input"
                            >
                              <label
                                className="mr-2"
                                htmlFor="url"
                              >
                                URL
                                <span
                                  className="text-danger"
                                >
                                  *
                                </span>
                              </label>
                              <input
                                className="form-control d-inline-block"
                                id="url"
                                onChange={
                                  [MockFunction] {
                                    "calls": [Circular],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                    ],
                                  }
                                }
                                placeholder="https://samples.clarifai.com/face-det.jpg"
                                type="url"
                              />
                              <button
                                className="btn btn-primary"
                                disabled={false}
                                onClick={[MockFunction]}
                                type="submit"
                              >
                                Detect
                              </button>
                            </div>,
                            undefined,
                          ],
                          "className": "form-group",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": <div
                          class="form-group"
                        >
                          <div
                            class="form-input"
                          >
                            <label
                              class="mr-2"
                              for="url"
                            >
                              URL
                              <span
                                class="text-danger"
                              >
                                *
                              </span>
                            </label>
                            <input
                              class="form-control d-inline-block"
                              id="url"
                              placeholder="https://samples.clarifai.com/face-det.jpg"
                              type="url"
                              value=""
                            />
                            <button
                              class="btn btn-primary"
                              type="submit"
                            >
                              Detect
                            </button>
                          </div>
                        </div>,
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": "div",
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 0,
                      "elementType": "form",
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <div
                          className="form-group"
                        >
                          <div
                            className="form-input"
                          >
                            <label
                              className="mr-2"
                              htmlFor="url"
                            >
                              URL
                              <span
                                className="text-danger"
                              >
                                *
                              </span>
                            </label>
                            <input
                              className="form-control d-inline-block"
                              id="url"
                              onChange={
                                [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                }
                              }
                              placeholder="https://samples.clarifai.com/face-det.jpg"
                              type="url"
                            />
                            <button
                              className="btn btn-primary"
                              disabled={false}
                              onClick={[MockFunction]}
                              type="submit"
                            >
                              Detect
                            </button>
                          </div>
                        </div>,
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": <div
                          className="form-group"
                        >
                          <div
                            className="form-input"
                          >
                            <label
                              className="mr-2"
                              htmlFor="url"
                            >
                              URL
                              <span
                                className="text-danger"
                              >
                                *
                              </span>
                            </label>
                            <input
                              className="form-control d-inline-block"
                              id="url"
                              onChange={
                                [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                }
                              }
                              placeholder="https://samples.clarifai.com/face-det.jpg"
                              type="url"
                            />
                            <button
                              className="btn btn-primary"
                              disabled={false}
                              onClick={[MockFunction]}
                              type="submit"
                            >
                              Detect
                            </button>
                          </div>
                        </div>,
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <form>
                        <div
                          class="form-group"
                        >
                          <div
                            class="form-input"
                          >
                            <label
                              class="mr-2"
                              for="url"
                            >
                              URL
                              <span
                                class="text-danger"
                              >
                                *
                              </span>
                            </label>
                            <input
                              class="form-control d-inline-block"
                              id="url"
                              placeholder="https://samples.clarifai.com/face-det.jpg"
                              type="url"
                              value=""
                            />
                            <button
                              class="btn btn-primary"
                              type="submit"
                            >
                              Detect
                            </button>
                          </div>
                        </div>
                      </form>,
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": "form",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 0,
                    "elementType": "div",
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <form>
                        <div
                          className="form-group"
                        >
                          <div
                            className="form-input"
                          >
                            <label
                              className="mr-2"
                              htmlFor="url"
                            >
                              URL
                              <span
                                className="text-danger"
                              >
                                *
                              </span>
                            </label>
                            <input
                              className="form-control d-inline-block"
                              id="url"
                              onChange={
                                [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                }
                              }
                              placeholder="https://samples.clarifai.com/face-det.jpg"
                              type="url"
                            />
                            <button
                              className="btn btn-primary"
                              disabled={false}
                              onClick={[MockFunction]}
                              type="submit"
                            >
                              Detect
                            </button>
                          </div>
                        </div>
                      </form>,
                      "className": "border border-dark rounded url-form-container form-container mt-3",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <form>
                        <div
                          className="form-group"
                        >
                          <div
                            className="form-input"
                          >
                            <label
                              className="mr-2"
                              htmlFor="url"
                            >
                              URL
                              <span
                                className="text-danger"
                              >
                                *
                              </span>
                            </label>
                            <input
                              className="form-control d-inline-block"
                              id="url"
                              onChange={
                                [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                }
                              }
                              placeholder="https://samples.clarifai.com/face-det.jpg"
                              type="url"
                            />
                            <button
                              className="btn btn-primary"
                              disabled={false}
                              onClick={[MockFunction]}
                              type="submit"
                            >
                              Detect
                            </button>
                          </div>
                        </div>
                      </form>,
                      "className": "border border-dark rounded url-form-container form-container mt-3",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <div
                      class="border border-dark rounded url-form-container form-container mt-3"
                    >
                      <form>
                        <div
                          class="form-group"
                        >
                          <div
                            class="form-input"
                          >
                            <label
                              class="mr-2"
                              for="url"
                            >
                              URL
                              <span
                                class="text-danger"
                              >
                                *
                              </span>
                            </label>
                            <input
                              class="form-control d-inline-block"
                              id="url"
                              placeholder="https://samples.clarifai.com/face-det.jpg"
                              type="url"
                              value=""
                            />
                            <button
                              class="btn btn-primary"
                              type="submit"
                            >
                              Detect
                            </button>
                          </div>
                        </div>
                      </form>
                    </div>,
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "dependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "buttonDisabled": false,
                    "buttonText": "Detect",
                    "onChange": [MockFunction] {
                      "calls": [Circular],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "onSubmit": [MockFunction],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "buttonDisabled": false,
                    "buttonText": "Detect",
                    "onChange": [MockFunction] {
                      "calls": [Circular],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "onSubmit": [MockFunction],
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 128,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 1,
                    "elementType": [Function],
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "refProp": null,
                      "wrappingComponentProps": null,
                    },
                    "memoizedState": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "wrappingComponentProps": null,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "refProp": null,
                      "wrappingComponentProps": null,
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 125,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 125,
                        "_debugIsCurrentlyTiming": false,
                        "_debugNeedsRemount": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": [Circular],
                        "child": null,
                        "childExpirationTime": 0,
                        "dependencies": null,
                        "effectTag": 0,
                        "elementType": null,
                        "expirationTime": 1073741823,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": null,
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": FiberRootNode {
                          "callbackExpirationTime": 0,
                          "callbackNode": null,
                          "callbackPriority": 90,
                          "containerInfo": <div>
                            <div
                              class="border border-dark rounded url-form-container form-container mt-3"
                            >
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <div
                                    class="form-input"
                                  >
                                    <label
                                      class="mr-2"
                                      for="url"
                                    >
                                      URL
                                      <span
                                        class="text-danger"
                                      >
                                        *
                                      </span>
                                    </label>
                                    <input
                                      class="form-control d-inline-block"
                                      id="url"
                                      placeholder="https://samples.clarifai.com/face-det.jpg"
                                      type="url"
                                      value=""
                                    />
                                    <button
                                      class="btn btn-primary"
                                      type="submit"
                                    >
                                      Detect
                                    </button>
                                  </div>
                                </div>
                              </form>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "finishedExpirationTime": 0,
                          "finishedWork": null,
                          "firstPendingTime": 0,
                          "firstSuspendedTime": 0,
                          "hydrate": false,
                          "interactionThreadID": 17,
                          "lastExpiredTime": 0,
                          "lastPingedTime": 0,
                          "lastSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextKnownPendingLevel": 0,
                          "pendingChildren": null,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "tag": 0,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseQueue": Object {
                            "callback": null,
                            "expirationTime": 1073741823,
                            "next": [Circular],
                            "payload": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "buttonDisabled": false,
                                    "buttonText": "Detect",
                                    "onChange": [MockFunction] {
                                      "calls": [Circular],
                                      "results": Array [
                                        Object {
                                          "type": "return",
                                          "value": undefined,
                                        },
                                      ],
                                    },
                                    "onSubmit": [MockFunction],
                                  }
                                }
                                refProp={null}
                                wrappingComponentProps={null}
                              />,
                            },
                            "priority": 97,
                            "suspenseConfig": null,
                            "tag": 0,
                          },
                          "baseState": null,
                          "effects": null,
                          "shared": Object {
                            "pending": null,
                          },
                        },
                      },
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": null,
                      "memoizedState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            }
                          }
                          refProp={null}
                          wrappingComponentProps={null}
                        />,
                      },
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": FiberRootNode {
                        "callbackExpirationTime": 0,
                        "callbackNode": null,
                        "callbackPriority": 90,
                        "containerInfo": <div>
                          <div
                            class="border border-dark rounded url-form-container form-container mt-3"
                          >
                            <form>
                              <div
                                class="form-group"
                              >
                                <div
                                  class="form-input"
                                >
                                  <label
                                    class="mr-2"
                                    for="url"
                                  >
                                    URL
                                    <span
                                      class="text-danger"
                                    >
                                      *
                                    </span>
                                  </label>
                                  <input
                                    class="form-control d-inline-block"
                                    id="url"
                                    placeholder="https://samples.clarifai.com/face-det.jpg"
                                    type="url"
                                    value=""
                                  />
                                  <button
                                    class="btn btn-primary"
                                    type="submit"
                                  >
                                    Detect
                                  </button>
                                </div>
                              </div>
                            </form>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "finishedExpirationTime": 0,
                        "finishedWork": null,
                        "firstPendingTime": 0,
                        "firstSuspendedTime": 0,
                        "hydrate": false,
                        "interactionThreadID": 17,
                        "lastExpiredTime": 0,
                        "lastPingedTime": 0,
                        "lastSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextKnownPendingLevel": 0,
                        "pendingChildren": null,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "tag": 0,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseQueue": null,
                        "baseState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "buttonDisabled": false,
                                "buttonText": "Detect",
                                "onChange": [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                },
                                "onSubmit": [MockFunction],
                              }
                            }
                            refProp={null}
                            wrappingComponentProps={null}
                          />,
                        },
                        "effects": null,
                        "shared": Object {
                          "pending": null,
                        },
                      },
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": WrapperComponent {
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "refProp": null,
                        "wrappingComponentProps": null,
                      },
                      "refs": Object {},
                      "state": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "wrappingComponentProps": null,
                      },
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 1,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": Object {
                      "baseQueue": null,
                      "baseState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "wrappingComponentProps": null,
                      },
                      "effects": null,
                      "shared": Object {
                        "pending": null,
                      },
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": null,
                  "tag": 0,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "_debugSource": Object {
                  "columnNumber": 13,
                  "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                  "lineNumber": 18,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 144,
                  "_debugIsCurrentlyTiming": false,
                  "_debugNeedsRemount": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": null,
                  "childExpirationTime": 0,
                  "dependencies": null,
                  "effectTag": 0,
                  "elementType": null,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": "URL",
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": "URL",
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 145,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 130,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 128,
                        "_debugIsCurrentlyTiming": false,
                        "_debugNeedsRemount": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "dependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "refProp": null,
                          "wrappingComponentProps": null,
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "wrappingComponentProps": null,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "refProp": null,
                          "wrappingComponentProps": null,
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 125,
                          "_debugIsCurrentlyTiming": false,
                          "_debugNeedsRemount": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 125,
                            "_debugIsCurrentlyTiming": false,
                            "_debugNeedsRemount": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "dependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": FiberRootNode {
                              "callbackExpirationTime": 0,
                              "callbackNode": null,
                              "callbackPriority": 90,
                              "containerInfo": <div>
                                <div
                                  class="border border-dark rounded url-form-container form-container mt-3"
                                >
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <div
                                        class="form-input"
                                      >
                                        <label
                                          class="mr-2"
                                          for="url"
                                        >
                                          URL
                                          <span
                                            class="text-danger"
                                          >
                                            *
                                          </span>
                                        </label>
                                        <input
                                          class="form-control d-inline-block"
                                          id="url"
                                          placeholder="https://samples.clarifai.com/face-det.jpg"
                                          type="url"
                                          value=""
                                        />
                                        <button
                                          class="btn btn-primary"
                                          type="submit"
                                        >
                                          Detect
                                        </button>
                                      </div>
                                    </div>
                                  </form>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "finishedExpirationTime": 0,
                              "finishedWork": null,
                              "firstPendingTime": 0,
                              "firstSuspendedTime": 0,
                              "hydrate": false,
                              "interactionThreadID": 17,
                              "lastExpiredTime": 0,
                              "lastPingedTime": 0,
                              "lastSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextKnownPendingLevel": 0,
                              "pendingChildren": null,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "tag": 0,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseQueue": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": [Circular],
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "buttonDisabled": false,
                                        "buttonText": "Detect",
                                        "onChange": [MockFunction] {
                                          "calls": [Circular],
                                          "results": Array [
                                            Object {
                                              "type": "return",
                                              "value": undefined,
                                            },
                                          ],
                                        },
                                        "onSubmit": [MockFunction],
                                      }
                                    }
                                    refProp={null}
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "priority": 97,
                                "suspenseConfig": null,
                                "tag": 0,
                              },
                              "baseState": null,
                              "effects": null,
                              "shared": Object {
                                "pending": null,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "dependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "buttonDisabled": false,
                                  "buttonText": "Detect",
                                  "onChange": [MockFunction] {
                                    "calls": [Circular],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                    ],
                                  },
                                  "onSubmit": [MockFunction],
                                }
                              }
                              refProp={null}
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": FiberRootNode {
                            "callbackExpirationTime": 0,
                            "callbackNode": null,
                            "callbackPriority": 90,
                            "containerInfo": <div>
                              <div
                                class="border border-dark rounded url-form-container form-container mt-3"
                              >
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <div
                                      class="form-input"
                                    >
                                      <label
                                        class="mr-2"
                                        for="url"
                                      >
                                        URL
                                        <span
                                          class="text-danger"
                                        >
                                          *
                                        </span>
                                      </label>
                                      <input
                                        class="form-control d-inline-block"
                                        id="url"
                                        placeholder="https://samples.clarifai.com/face-det.jpg"
                                        type="url"
                                        value=""
                                      />
                                      <button
                                        class="btn btn-primary"
                                        type="submit"
                                      >
                                        Detect
                                      </button>
                                    </div>
                                  </div>
                                </form>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "finishedExpirationTime": 0,
                            "finishedWork": null,
                            "firstPendingTime": 0,
                            "firstSuspendedTime": 0,
                            "hydrate": false,
                            "interactionThreadID": 17,
                            "lastExpiredTime": 0,
                            "lastPingedTime": 0,
                            "lastSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextKnownPendingLevel": 0,
                            "pendingChildren": null,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "tag": 0,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseQueue": null,
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "buttonDisabled": false,
                                    "buttonText": "Detect",
                                    "onChange": [MockFunction] {
                                      "calls": [Circular],
                                      "results": Array [
                                        Object {
                                          "type": "return",
                                          "value": undefined,
                                        },
                                      ],
                                    },
                                    "onSubmit": [MockFunction],
                                  }
                                }
                                refProp={null}
                                wrappingComponentProps={null}
                              />,
                            },
                            "effects": null,
                            "shared": Object {
                              "pending": null,
                            },
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            },
                            "refProp": null,
                            "wrappingComponentProps": null,
                          },
                          "refs": Object {},
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            },
                            "wrappingComponentProps": null,
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": Object {
                          "baseQueue": null,
                          "baseState": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            },
                            "wrappingComponentProps": null,
                          },
                          "effects": null,
                          "shared": Object {
                            "pending": null,
                          },
                        },
                      },
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 132,
                        "_debugIsCurrentlyTiming": false,
                        "_debugNeedsRemount": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "columnNumber": 5,
                          "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                          "lineNumber": 14,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 134,
                          "_debugIsCurrentlyTiming": false,
                          "_debugNeedsRemount": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "columnNumber": 7,
                            "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                            "lineNumber": 15,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 136,
                            "_debugIsCurrentlyTiming": false,
                            "_debugNeedsRemount": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "columnNumber": 9,
                              "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                              "lineNumber": 16,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": [Circular],
                            "childExpirationTime": 0,
                            "dependencies": null,
                            "effectTag": 0,
                            "elementType": "div",
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": Array [
                                <div
                                  className="form-input"
                                >
                                  <label
                                    className="mr-2"
                                    htmlFor="url"
                                  >
                                    URL
                                    <span
                                      className="text-danger"
                                    >
                                      *
                                    </span>
                                  </label>
                                  <input
                                    className="form-control d-inline-block"
                                    id="url"
                                    onChange={
                                      [MockFunction] {
                                        "calls": [Circular],
                                        "results": Array [
                                          Object {
                                            "type": "return",
                                            "value": undefined,
                                          },
                                        ],
                                      }
                                    }
                                    placeholder="https://samples.clarifai.com/face-det.jpg"
                                    type="url"
                                  />
                                  <button
                                    className="btn btn-primary"
                                    disabled={false}
                                    onClick={[MockFunction]}
                                    type="submit"
                                  >
                                    Detect
                                  </button>
                                </div>,
                                undefined,
                              ],
                              "className": "form-group",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": Array [
                                <div
                                  className="form-input"
                                >
                                  <label
                                    className="mr-2"
                                    htmlFor="url"
                                  >
                                    URL
                                    <span
                                      className="text-danger"
                                    >
                                      *
                                    </span>
                                  </label>
                                  <input
                                    className="form-control d-inline-block"
                                    id="url"
                                    onChange={
                                      [MockFunction] {
                                        "calls": [Circular],
                                        "results": Array [
                                          Object {
                                            "type": "return",
                                            "value": undefined,
                                          },
                                        ],
                                      }
                                    }
                                    placeholder="https://samples.clarifai.com/face-det.jpg"
                                    type="url"
                                  />
                                  <button
                                    className="btn btn-primary"
                                    disabled={false}
                                    onClick={[MockFunction]}
                                    type="submit"
                                  >
                                    Detect
                                  </button>
                                </div>,
                                undefined,
                              ],
                              "className": "form-group",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": <div
                              class="form-group"
                            >
                              <div
                                class="form-input"
                              >
                                <label
                                  class="mr-2"
                                  for="url"
                                >
                                  URL
                                  <span
                                    class="text-danger"
                                  >
                                    *
                                  </span>
                                </label>
                                <input
                                  class="form-control d-inline-block"
                                  id="url"
                                  placeholder="https://samples.clarifai.com/face-det.jpg"
                                  type="url"
                                  value=""
                                />
                                <button
                                  class="btn btn-primary"
                                  type="submit"
                                >
                                  Detect
                                </button>
                              </div>
                            </div>,
                            "tag": 5,
                            "treeBaseDuration": 0,
                            "type": "div",
                            "updateQueue": null,
                          },
                          "childExpirationTime": 0,
                          "dependencies": null,
                          "effectTag": 0,
                          "elementType": "form",
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": <div
                              className="form-group"
                            >
                              <div
                                className="form-input"
                              >
                                <label
                                  className="mr-2"
                                  htmlFor="url"
                                >
                                  URL
                                  <span
                                    className="text-danger"
                                  >
                                    *
                                  </span>
                                </label>
                                <input
                                  className="form-control d-inline-block"
                                  id="url"
                                  onChange={
                                    [MockFunction] {
                                      "calls": [Circular],
                                      "results": Array [
                                        Object {
                                          "type": "return",
                                          "value": undefined,
                                        },
                                      ],
                                    }
                                  }
                                  placeholder="https://samples.clarifai.com/face-det.jpg"
                                  type="url"
                                />
                                <button
                                  className="btn btn-primary"
                                  disabled={false}
                                  onClick={[MockFunction]}
                                  type="submit"
                                >
                                  Detect
                                </button>
                              </div>
                            </div>,
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": <div
                              className="form-group"
                            >
                              <div
                                className="form-input"
                              >
                                <label
                                  className="mr-2"
                                  htmlFor="url"
                                >
                                  URL
                                  <span
                                    className="text-danger"
                                  >
                                    *
                                  </span>
                                </label>
                                <input
                                  className="form-control d-inline-block"
                                  id="url"
                                  onChange={
                                    [MockFunction] {
                                      "calls": [Circular],
                                      "results": Array [
                                        Object {
                                          "type": "return",
                                          "value": undefined,
                                        },
                                      ],
                                    }
                                  }
                                  placeholder="https://samples.clarifai.com/face-det.jpg"
                                  type="url"
                                />
                                <button
                                  className="btn btn-primary"
                                  disabled={false}
                                  onClick={[MockFunction]}
                                  type="submit"
                                >
                                  Detect
                                </button>
                              </div>
                            </div>,
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": <form>
                            <div
                              class="form-group"
                            >
                              <div
                                class="form-input"
                              >
                                <label
                                  class="mr-2"
                                  for="url"
                                >
                                  URL
                                  <span
                                    class="text-danger"
                                  >
                                    *
                                  </span>
                                </label>
                                <input
                                  class="form-control d-inline-block"
                                  id="url"
                                  placeholder="https://samples.clarifai.com/face-det.jpg"
                                  type="url"
                                  value=""
                                />
                                <button
                                  class="btn btn-primary"
                                  type="submit"
                                >
                                  Detect
                                </button>
                              </div>
                            </div>
                          </form>,
                          "tag": 5,
                          "treeBaseDuration": 0,
                          "type": "form",
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "dependencies": null,
                        "effectTag": 0,
                        "elementType": "div",
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": <form>
                            <div
                              className="form-group"
                            >
                              <div
                                className="form-input"
                              >
                                <label
                                  className="mr-2"
                                  htmlFor="url"
                                >
                                  URL
                                  <span
                                    className="text-danger"
                                  >
                                    *
                                  </span>
                                </label>
                                <input
                                  className="form-control d-inline-block"
                                  id="url"
                                  onChange={
                                    [MockFunction] {
                                      "calls": [Circular],
                                      "results": Array [
                                        Object {
                                          "type": "return",
                                          "value": undefined,
                                        },
                                      ],
                                    }
                                  }
                                  placeholder="https://samples.clarifai.com/face-det.jpg"
                                  type="url"
                                />
                                <button
                                  className="btn btn-primary"
                                  disabled={false}
                                  onClick={[MockFunction]}
                                  type="submit"
                                >
                                  Detect
                                </button>
                              </div>
                            </div>
                          </form>,
                          "className": "border border-dark rounded url-form-container form-container mt-3",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": <form>
                            <div
                              className="form-group"
                            >
                              <div
                                className="form-input"
                              >
                                <label
                                  className="mr-2"
                                  htmlFor="url"
                                >
                                  URL
                                  <span
                                    className="text-danger"
                                  >
                                    *
                                  </span>
                                </label>
                                <input
                                  className="form-control d-inline-block"
                                  id="url"
                                  onChange={
                                    [MockFunction] {
                                      "calls": [Circular],
                                      "results": Array [
                                        Object {
                                          "type": "return",
                                          "value": undefined,
                                        },
                                      ],
                                    }
                                  }
                                  placeholder="https://samples.clarifai.com/face-det.jpg"
                                  type="url"
                                />
                                <button
                                  className="btn btn-primary"
                                  disabled={false}
                                  onClick={[MockFunction]}
                                  type="submit"
                                >
                                  Detect
                                </button>
                              </div>
                            </div>
                          </form>,
                          "className": "border border-dark rounded url-form-container form-container mt-3",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": <div
                          class="border border-dark rounded url-form-container form-container mt-3"
                        >
                          <form>
                            <div
                              class="form-group"
                            >
                              <div
                                class="form-input"
                              >
                                <label
                                  class="mr-2"
                                  for="url"
                                >
                                  URL
                                  <span
                                    class="text-danger"
                                  >
                                    *
                                  </span>
                                </label>
                                <input
                                  class="form-control d-inline-block"
                                  id="url"
                                  placeholder="https://samples.clarifai.com/face-det.jpg"
                                  type="url"
                                  value=""
                                />
                                <button
                                  class="btn btn-primary"
                                  type="submit"
                                >
                                  Detect
                                </button>
                              </div>
                            </div>
                          </form>
                        </div>,
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": "div",
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 128,
                        "_debugIsCurrentlyTiming": false,
                        "_debugNeedsRemount": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "dependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "refProp": null,
                          "wrappingComponentProps": null,
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "wrappingComponentProps": null,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "refProp": null,
                          "wrappingComponentProps": null,
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 125,
                          "_debugIsCurrentlyTiming": false,
                          "_debugNeedsRemount": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 125,
                            "_debugIsCurrentlyTiming": false,
                            "_debugNeedsRemount": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "dependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": FiberRootNode {
                              "callbackExpirationTime": 0,
                              "callbackNode": null,
                              "callbackPriority": 90,
                              "containerInfo": <div>
                                <div
                                  class="border border-dark rounded url-form-container form-container mt-3"
                                >
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <div
                                        class="form-input"
                                      >
                                        <label
                                          class="mr-2"
                                          for="url"
                                        >
                                          URL
                                          <span
                                            class="text-danger"
                                          >
                                            *
                                          </span>
                                        </label>
                                        <input
                                          class="form-control d-inline-block"
                                          id="url"
                                          placeholder="https://samples.clarifai.com/face-det.jpg"
                                          type="url"
                                          value=""
                                        />
                                        <button
                                          class="btn btn-primary"
                                          type="submit"
                                        >
                                          Detect
                                        </button>
                                      </div>
                                    </div>
                                  </form>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "finishedExpirationTime": 0,
                              "finishedWork": null,
                              "firstPendingTime": 0,
                              "firstSuspendedTime": 0,
                              "hydrate": false,
                              "interactionThreadID": 17,
                              "lastExpiredTime": 0,
                              "lastPingedTime": 0,
                              "lastSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextKnownPendingLevel": 0,
                              "pendingChildren": null,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "tag": 0,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseQueue": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": [Circular],
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "buttonDisabled": false,
                                        "buttonText": "Detect",
                                        "onChange": [MockFunction] {
                                          "calls": [Circular],
                                          "results": Array [
                                            Object {
                                              "type": "return",
                                              "value": undefined,
                                            },
                                          ],
                                        },
                                        "onSubmit": [MockFunction],
                                      }
                                    }
                                    refProp={null}
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "priority": 97,
                                "suspenseConfig": null,
                                "tag": 0,
                              },
                              "baseState": null,
                              "effects": null,
                              "shared": Object {
                                "pending": null,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "dependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "buttonDisabled": false,
                                  "buttonText": "Detect",
                                  "onChange": [MockFunction] {
                                    "calls": [Circular],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                    ],
                                  },
                                  "onSubmit": [MockFunction],
                                }
                              }
                              refProp={null}
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": FiberRootNode {
                            "callbackExpirationTime": 0,
                            "callbackNode": null,
                            "callbackPriority": 90,
                            "containerInfo": <div>
                              <div
                                class="border border-dark rounded url-form-container form-container mt-3"
                              >
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <div
                                      class="form-input"
                                    >
                                      <label
                                        class="mr-2"
                                        for="url"
                                      >
                                        URL
                                        <span
                                          class="text-danger"
                                        >
                                          *
                                        </span>
                                      </label>
                                      <input
                                        class="form-control d-inline-block"
                                        id="url"
                                        placeholder="https://samples.clarifai.com/face-det.jpg"
                                        type="url"
                                        value=""
                                      />
                                      <button
                                        class="btn btn-primary"
                                        type="submit"
                                      >
                                        Detect
                                      </button>
                                    </div>
                                  </div>
                                </form>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "finishedExpirationTime": 0,
                            "finishedWork": null,
                            "firstPendingTime": 0,
                            "firstSuspendedTime": 0,
                            "hydrate": false,
                            "interactionThreadID": 17,
                            "lastExpiredTime": 0,
                            "lastPingedTime": 0,
                            "lastSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextKnownPendingLevel": 0,
                            "pendingChildren": null,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "tag": 0,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseQueue": null,
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "buttonDisabled": false,
                                    "buttonText": "Detect",
                                    "onChange": [MockFunction] {
                                      "calls": [Circular],
                                      "results": Array [
                                        Object {
                                          "type": "return",
                                          "value": undefined,
                                        },
                                      ],
                                    },
                                    "onSubmit": [MockFunction],
                                  }
                                }
                                refProp={null}
                                wrappingComponentProps={null}
                              />,
                            },
                            "effects": null,
                            "shared": Object {
                              "pending": null,
                            },
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            },
                            "refProp": null,
                            "wrappingComponentProps": null,
                          },
                          "refs": Object {},
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            },
                            "wrappingComponentProps": null,
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": Object {
                          "baseQueue": null,
                          "baseState": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            },
                            "wrappingComponentProps": null,
                          },
                          "effects": null,
                          "shared": Object {
                            "pending": null,
                          },
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": null,
                      "tag": 0,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "_debugSource": Object {
                      "columnNumber": 18,
                      "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                      "lineNumber": 19,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 0,
                    "elementType": "span",
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": "*",
                      "className": "text-danger",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": "*",
                      "className": "text-danger",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <span
                      class="text-danger"
                    >
                      *
                    </span>,
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": "span",
                    "updateQueue": null,
                  },
                  "stateNode": URL,
                  "tag": 6,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "dependencies": null,
                "effectTag": 0,
                "elementType": "label",
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    "URL",
                    <span
                      className="text-danger"
                    >
                      *
                    </span>,
                  ],
                  "className": "mr-2",
                  "htmlFor": "url",
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    "URL",
                    <span
                      className="text-danger"
                    >
                      *
                    </span>,
                  ],
                  "className": "mr-2",
                  "htmlFor": "url",
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": [Circular],
                "stateNode": <label
                  class="mr-2"
                  for="url"
                >
                  URL
                  <span
                    class="text-danger"
                  >
                    *
                  </span>
                </label>,
                "tag": 5,
                "treeBaseDuration": 0,
                "type": "label",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "dependencies": null,
              "effectTag": 0,
              "elementType": "div",
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  <label
                    className="mr-2"
                    htmlFor="url"
                  >
                    URL
                    <span
                      className="text-danger"
                    >
                      *
                    </span>
                  </label>,
                  <input
                    className="form-control d-inline-block"
                    id="url"
                    onChange={
                      [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      }
                    }
                    placeholder="https://samples.clarifai.com/face-det.jpg"
                    type="url"
                  />,
                  <button
                    className="btn btn-primary"
                    disabled={false}
                    onClick={[MockFunction]}
                    type="submit"
                  >
                    Detect
                  </button>,
                ],
                "className": "form-input",
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": Array [
                  <label
                    className="mr-2"
                    htmlFor="url"
                  >
                    URL
                    <span
                      className="text-danger"
                    >
                      *
                    </span>
                  </label>,
                  <input
                    className="form-control d-inline-block"
                    id="url"
                    onChange={
                      [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      }
                    }
                    placeholder="https://samples.clarifai.com/face-det.jpg"
                    type="url"
                  />,
                  <button
                    className="btn btn-primary"
                    disabled={false}
                    onClick={[MockFunction]}
                    type="submit"
                  >
                    Detect
                  </button>,
                ],
                "className": "form-input",
              },
              "ref": null,
              "return": FiberNode {
                "_debugHookTypes": null,
                "_debugID": 136,
                "_debugIsCurrentlyTiming": false,
                "_debugNeedsRemount": false,
                "_debugOwner": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 130,
                  "_debugIsCurrentlyTiming": false,
                  "_debugNeedsRemount": false,
                  "_debugOwner": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 128,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 1,
                    "elementType": [Function],
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "refProp": null,
                      "wrappingComponentProps": null,
                    },
                    "memoizedState": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "wrappingComponentProps": null,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "refProp": null,
                      "wrappingComponentProps": null,
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 125,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 125,
                        "_debugIsCurrentlyTiming": false,
                        "_debugNeedsRemount": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": [Circular],
                        "child": null,
                        "childExpirationTime": 0,
                        "dependencies": null,
                        "effectTag": 0,
                        "elementType": null,
                        "expirationTime": 1073741823,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": null,
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": FiberRootNode {
                          "callbackExpirationTime": 0,
                          "callbackNode": null,
                          "callbackPriority": 90,
                          "containerInfo": <div>
                            <div
                              class="border border-dark rounded url-form-container form-container mt-3"
                            >
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <div
                                    class="form-input"
                                  >
                                    <label
                                      class="mr-2"
                                      for="url"
                                    >
                                      URL
                                      <span
                                        class="text-danger"
                                      >
                                        *
                                      </span>
                                    </label>
                                    <input
                                      class="form-control d-inline-block"
                                      id="url"
                                      placeholder="https://samples.clarifai.com/face-det.jpg"
                                      type="url"
                                      value=""
                                    />
                                    <button
                                      class="btn btn-primary"
                                      type="submit"
                                    >
                                      Detect
                                    </button>
                                  </div>
                                </div>
                              </form>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "finishedExpirationTime": 0,
                          "finishedWork": null,
                          "firstPendingTime": 0,
                          "firstSuspendedTime": 0,
                          "hydrate": false,
                          "interactionThreadID": 17,
                          "lastExpiredTime": 0,
                          "lastPingedTime": 0,
                          "lastSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextKnownPendingLevel": 0,
                          "pendingChildren": null,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "tag": 0,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseQueue": Object {
                            "callback": null,
                            "expirationTime": 1073741823,
                            "next": [Circular],
                            "payload": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "buttonDisabled": false,
                                    "buttonText": "Detect",
                                    "onChange": [MockFunction] {
                                      "calls": [Circular],
                                      "results": Array [
                                        Object {
                                          "type": "return",
                                          "value": undefined,
                                        },
                                      ],
                                    },
                                    "onSubmit": [MockFunction],
                                  }
                                }
                                refProp={null}
                                wrappingComponentProps={null}
                              />,
                            },
                            "priority": 97,
                            "suspenseConfig": null,
                            "tag": 0,
                          },
                          "baseState": null,
                          "effects": null,
                          "shared": Object {
                            "pending": null,
                          },
                        },
                      },
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": null,
                      "memoizedState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            }
                          }
                          refProp={null}
                          wrappingComponentProps={null}
                        />,
                      },
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": FiberRootNode {
                        "callbackExpirationTime": 0,
                        "callbackNode": null,
                        "callbackPriority": 90,
                        "containerInfo": <div>
                          <div
                            class="border border-dark rounded url-form-container form-container mt-3"
                          >
                            <form>
                              <div
                                class="form-group"
                              >
                                <div
                                  class="form-input"
                                >
                                  <label
                                    class="mr-2"
                                    for="url"
                                  >
                                    URL
                                    <span
                                      class="text-danger"
                                    >
                                      *
                                    </span>
                                  </label>
                                  <input
                                    class="form-control d-inline-block"
                                    id="url"
                                    placeholder="https://samples.clarifai.com/face-det.jpg"
                                    type="url"
                                    value=""
                                  />
                                  <button
                                    class="btn btn-primary"
                                    type="submit"
                                  >
                                    Detect
                                  </button>
                                </div>
                              </div>
                            </form>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "finishedExpirationTime": 0,
                        "finishedWork": null,
                        "firstPendingTime": 0,
                        "firstSuspendedTime": 0,
                        "hydrate": false,
                        "interactionThreadID": 17,
                        "lastExpiredTime": 0,
                        "lastPingedTime": 0,
                        "lastSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextKnownPendingLevel": 0,
                        "pendingChildren": null,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "tag": 0,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseQueue": null,
                        "baseState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "buttonDisabled": false,
                                "buttonText": "Detect",
                                "onChange": [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                },
                                "onSubmit": [MockFunction],
                              }
                            }
                            refProp={null}
                            wrappingComponentProps={null}
                          />,
                        },
                        "effects": null,
                        "shared": Object {
                          "pending": null,
                        },
                      },
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": WrapperComponent {
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "refProp": null,
                        "wrappingComponentProps": null,
                      },
                      "refs": Object {},
                      "state": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "wrappingComponentProps": null,
                      },
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 1,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": Object {
                      "baseQueue": null,
                      "baseState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "wrappingComponentProps": null,
                      },
                      "effects": null,
                      "shared": Object {
                        "pending": null,
                      },
                    },
                  },
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 132,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "columnNumber": 5,
                      "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                      "lineNumber": 14,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 134,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "columnNumber": 7,
                        "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                        "lineNumber": 15,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 0,
                      "elementType": "form",
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <div
                          className="form-group"
                        >
                          <div
                            className="form-input"
                          >
                            <label
                              className="mr-2"
                              htmlFor="url"
                            >
                              URL
                              <span
                                className="text-danger"
                              >
                                *
                              </span>
                            </label>
                            <input
                              className="form-control d-inline-block"
                              id="url"
                              onChange={
                                [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                }
                              }
                              placeholder="https://samples.clarifai.com/face-det.jpg"
                              type="url"
                            />
                            <button
                              className="btn btn-primary"
                              disabled={false}
                              onClick={[MockFunction]}
                              type="submit"
                            >
                              Detect
                            </button>
                          </div>
                        </div>,
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": <div
                          className="form-group"
                        >
                          <div
                            className="form-input"
                          >
                            <label
                              className="mr-2"
                              htmlFor="url"
                            >
                              URL
                              <span
                                className="text-danger"
                              >
                                *
                              </span>
                            </label>
                            <input
                              className="form-control d-inline-block"
                              id="url"
                              onChange={
                                [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                }
                              }
                              placeholder="https://samples.clarifai.com/face-det.jpg"
                              type="url"
                            />
                            <button
                              className="btn btn-primary"
                              disabled={false}
                              onClick={[MockFunction]}
                              type="submit"
                            >
                              Detect
                            </button>
                          </div>
                        </div>,
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <form>
                        <div
                          class="form-group"
                        >
                          <div
                            class="form-input"
                          >
                            <label
                              class="mr-2"
                              for="url"
                            >
                              URL
                              <span
                                class="text-danger"
                              >
                                *
                              </span>
                            </label>
                            <input
                              class="form-control d-inline-block"
                              id="url"
                              placeholder="https://samples.clarifai.com/face-det.jpg"
                              type="url"
                              value=""
                            />
                            <button
                              class="btn btn-primary"
                              type="submit"
                            >
                              Detect
                            </button>
                          </div>
                        </div>
                      </form>,
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": "form",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 0,
                    "elementType": "div",
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <form>
                        <div
                          className="form-group"
                        >
                          <div
                            className="form-input"
                          >
                            <label
                              className="mr-2"
                              htmlFor="url"
                            >
                              URL
                              <span
                                className="text-danger"
                              >
                                *
                              </span>
                            </label>
                            <input
                              className="form-control d-inline-block"
                              id="url"
                              onChange={
                                [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                }
                              }
                              placeholder="https://samples.clarifai.com/face-det.jpg"
                              type="url"
                            />
                            <button
                              className="btn btn-primary"
                              disabled={false}
                              onClick={[MockFunction]}
                              type="submit"
                            >
                              Detect
                            </button>
                          </div>
                        </div>
                      </form>,
                      "className": "border border-dark rounded url-form-container form-container mt-3",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <form>
                        <div
                          className="form-group"
                        >
                          <div
                            className="form-input"
                          >
                            <label
                              className="mr-2"
                              htmlFor="url"
                            >
                              URL
                              <span
                                className="text-danger"
                              >
                                *
                              </span>
                            </label>
                            <input
                              className="form-control d-inline-block"
                              id="url"
                              onChange={
                                [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                }
                              }
                              placeholder="https://samples.clarifai.com/face-det.jpg"
                              type="url"
                            />
                            <button
                              className="btn btn-primary"
                              disabled={false}
                              onClick={[MockFunction]}
                              type="submit"
                            >
                              Detect
                            </button>
                          </div>
                        </div>
                      </form>,
                      "className": "border border-dark rounded url-form-container form-container mt-3",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <div
                      class="border border-dark rounded url-form-container form-container mt-3"
                    >
                      <form>
                        <div
                          class="form-group"
                        >
                          <div
                            class="form-input"
                          >
                            <label
                              class="mr-2"
                              for="url"
                            >
                              URL
                              <span
                                class="text-danger"
                              >
                                *
                              </span>
                            </label>
                            <input
                              class="form-control d-inline-block"
                              id="url"
                              placeholder="https://samples.clarifai.com/face-det.jpg"
                              type="url"
                              value=""
                            />
                            <button
                              class="btn btn-primary"
                              type="submit"
                            >
                              Detect
                            </button>
                          </div>
                        </div>
                      </form>
                    </div>,
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "dependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "buttonDisabled": false,
                    "buttonText": "Detect",
                    "onChange": [MockFunction] {
                      "calls": [Circular],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "onSubmit": [MockFunction],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "buttonDisabled": false,
                    "buttonText": "Detect",
                    "onChange": [MockFunction] {
                      "calls": [Circular],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "onSubmit": [MockFunction],
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 128,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 1,
                    "elementType": [Function],
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "refProp": null,
                      "wrappingComponentProps": null,
                    },
                    "memoizedState": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "wrappingComponentProps": null,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "refProp": null,
                      "wrappingComponentProps": null,
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 125,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 125,
                        "_debugIsCurrentlyTiming": false,
                        "_debugNeedsRemount": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": [Circular],
                        "child": null,
                        "childExpirationTime": 0,
                        "dependencies": null,
                        "effectTag": 0,
                        "elementType": null,
                        "expirationTime": 1073741823,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": null,
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": FiberRootNode {
                          "callbackExpirationTime": 0,
                          "callbackNode": null,
                          "callbackPriority": 90,
                          "containerInfo": <div>
                            <div
                              class="border border-dark rounded url-form-container form-container mt-3"
                            >
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <div
                                    class="form-input"
                                  >
                                    <label
                                      class="mr-2"
                                      for="url"
                                    >
                                      URL
                                      <span
                                        class="text-danger"
                                      >
                                        *
                                      </span>
                                    </label>
                                    <input
                                      class="form-control d-inline-block"
                                      id="url"
                                      placeholder="https://samples.clarifai.com/face-det.jpg"
                                      type="url"
                                      value=""
                                    />
                                    <button
                                      class="btn btn-primary"
                                      type="submit"
                                    >
                                      Detect
                                    </button>
                                  </div>
                                </div>
                              </form>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "finishedExpirationTime": 0,
                          "finishedWork": null,
                          "firstPendingTime": 0,
                          "firstSuspendedTime": 0,
                          "hydrate": false,
                          "interactionThreadID": 17,
                          "lastExpiredTime": 0,
                          "lastPingedTime": 0,
                          "lastSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextKnownPendingLevel": 0,
                          "pendingChildren": null,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "tag": 0,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseQueue": Object {
                            "callback": null,
                            "expirationTime": 1073741823,
                            "next": [Circular],
                            "payload": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "buttonDisabled": false,
                                    "buttonText": "Detect",
                                    "onChange": [MockFunction] {
                                      "calls": [Circular],
                                      "results": Array [
                                        Object {
                                          "type": "return",
                                          "value": undefined,
                                        },
                                      ],
                                    },
                                    "onSubmit": [MockFunction],
                                  }
                                }
                                refProp={null}
                                wrappingComponentProps={null}
                              />,
                            },
                            "priority": 97,
                            "suspenseConfig": null,
                            "tag": 0,
                          },
                          "baseState": null,
                          "effects": null,
                          "shared": Object {
                            "pending": null,
                          },
                        },
                      },
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": null,
                      "memoizedState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            }
                          }
                          refProp={null}
                          wrappingComponentProps={null}
                        />,
                      },
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": FiberRootNode {
                        "callbackExpirationTime": 0,
                        "callbackNode": null,
                        "callbackPriority": 90,
                        "containerInfo": <div>
                          <div
                            class="border border-dark rounded url-form-container form-container mt-3"
                          >
                            <form>
                              <div
                                class="form-group"
                              >
                                <div
                                  class="form-input"
                                >
                                  <label
                                    class="mr-2"
                                    for="url"
                                  >
                                    URL
                                    <span
                                      class="text-danger"
                                    >
                                      *
                                    </span>
                                  </label>
                                  <input
                                    class="form-control d-inline-block"
                                    id="url"
                                    placeholder="https://samples.clarifai.com/face-det.jpg"
                                    type="url"
                                    value=""
                                  />
                                  <button
                                    class="btn btn-primary"
                                    type="submit"
                                  >
                                    Detect
                                  </button>
                                </div>
                              </div>
                            </form>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "finishedExpirationTime": 0,
                        "finishedWork": null,
                        "firstPendingTime": 0,
                        "firstSuspendedTime": 0,
                        "hydrate": false,
                        "interactionThreadID": 17,
                        "lastExpiredTime": 0,
                        "lastPingedTime": 0,
                        "lastSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextKnownPendingLevel": 0,
                        "pendingChildren": null,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "tag": 0,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseQueue": null,
                        "baseState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "buttonDisabled": false,
                                "buttonText": "Detect",
                                "onChange": [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                },
                                "onSubmit": [MockFunction],
                              }
                            }
                            refProp={null}
                            wrappingComponentProps={null}
                          />,
                        },
                        "effects": null,
                        "shared": Object {
                          "pending": null,
                        },
                      },
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": WrapperComponent {
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "refProp": null,
                        "wrappingComponentProps": null,
                      },
                      "refs": Object {},
                      "state": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "wrappingComponentProps": null,
                      },
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 1,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": Object {
                      "baseQueue": null,
                      "baseState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "wrappingComponentProps": null,
                      },
                      "effects": null,
                      "shared": Object {
                        "pending": null,
                      },
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": null,
                  "tag": 0,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "_debugSource": Object {
                  "columnNumber": 9,
                  "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                  "lineNumber": 16,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "dependencies": null,
                "effectTag": 0,
                "elementType": "div",
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    <div
                      className="form-input"
                    >
                      <label
                        className="mr-2"
                        htmlFor="url"
                      >
                        URL
                        <span
                          className="text-danger"
                        >
                          *
                        </span>
                      </label>
                      <input
                        className="form-control d-inline-block"
                        id="url"
                        onChange={
                          [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          }
                        }
                        placeholder="https://samples.clarifai.com/face-det.jpg"
                        type="url"
                      />
                      <button
                        className="btn btn-primary"
                        disabled={false}
                        onClick={[MockFunction]}
                        type="submit"
                      >
                        Detect
                      </button>
                    </div>,
                    undefined,
                  ],
                  "className": "form-group",
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    <div
                      className="form-input"
                    >
                      <label
                        className="mr-2"
                        htmlFor="url"
                      >
                        URL
                        <span
                          className="text-danger"
                        >
                          *
                        </span>
                      </label>
                      <input
                        className="form-control d-inline-block"
                        id="url"
                        onChange={
                          [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          }
                        }
                        placeholder="https://samples.clarifai.com/face-det.jpg"
                        type="url"
                      />
                      <button
                        className="btn btn-primary"
                        disabled={false}
                        onClick={[MockFunction]}
                        type="submit"
                      >
                        Detect
                      </button>
                    </div>,
                    undefined,
                  ],
                  "className": "form-group",
                },
                "ref": null,
                "return": FiberNode {
                  "_debugHookTypes": null,
                  "_debugID": 134,
                  "_debugIsCurrentlyTiming": false,
                  "_debugNeedsRemount": false,
                  "_debugOwner": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 130,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 128,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "refProp": null,
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "refProp": null,
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 125,
                        "_debugIsCurrentlyTiming": false,
                        "_debugNeedsRemount": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 125,
                          "_debugIsCurrentlyTiming": false,
                          "_debugNeedsRemount": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "dependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": FiberRootNode {
                            "callbackExpirationTime": 0,
                            "callbackNode": null,
                            "callbackPriority": 90,
                            "containerInfo": <div>
                              <div
                                class="border border-dark rounded url-form-container form-container mt-3"
                              >
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <div
                                      class="form-input"
                                    >
                                      <label
                                        class="mr-2"
                                        for="url"
                                      >
                                        URL
                                        <span
                                          class="text-danger"
                                        >
                                          *
                                        </span>
                                      </label>
                                      <input
                                        class="form-control d-inline-block"
                                        id="url"
                                        placeholder="https://samples.clarifai.com/face-det.jpg"
                                        type="url"
                                        value=""
                                      />
                                      <button
                                        class="btn btn-primary"
                                        type="submit"
                                      >
                                        Detect
                                      </button>
                                    </div>
                                  </div>
                                </form>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "finishedExpirationTime": 0,
                            "finishedWork": null,
                            "firstPendingTime": 0,
                            "firstSuspendedTime": 0,
                            "hydrate": false,
                            "interactionThreadID": 17,
                            "lastExpiredTime": 0,
                            "lastPingedTime": 0,
                            "lastSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextKnownPendingLevel": 0,
                            "pendingChildren": null,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "tag": 0,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseQueue": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": [Circular],
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "buttonDisabled": false,
                                      "buttonText": "Detect",
                                      "onChange": [MockFunction] {
                                        "calls": [Circular],
                                        "results": Array [
                                          Object {
                                            "type": "return",
                                            "value": undefined,
                                          },
                                        ],
                                      },
                                      "onSubmit": [MockFunction],
                                    }
                                  }
                                  refProp={null}
                                  wrappingComponentProps={null}
                                />,
                              },
                              "priority": 97,
                              "suspenseConfig": null,
                              "tag": 0,
                            },
                            "baseState": null,
                            "effects": null,
                            "shared": Object {
                              "pending": null,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "dependencies": null,
                        "effectTag": 0,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "buttonDisabled": false,
                                "buttonText": "Detect",
                                "onChange": [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                },
                                "onSubmit": [MockFunction],
                              }
                            }
                            refProp={null}
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": FiberRootNode {
                          "callbackExpirationTime": 0,
                          "callbackNode": null,
                          "callbackPriority": 90,
                          "containerInfo": <div>
                            <div
                              class="border border-dark rounded url-form-container form-container mt-3"
                            >
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <div
                                    class="form-input"
                                  >
                                    <label
                                      class="mr-2"
                                      for="url"
                                    >
                                      URL
                                      <span
                                        class="text-danger"
                                      >
                                        *
                                      </span>
                                    </label>
                                    <input
                                      class="form-control d-inline-block"
                                      id="url"
                                      placeholder="https://samples.clarifai.com/face-det.jpg"
                                      type="url"
                                      value=""
                                    />
                                    <button
                                      class="btn btn-primary"
                                      type="submit"
                                    >
                                      Detect
                                    </button>
                                  </div>
                                </div>
                              </form>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "finishedExpirationTime": 0,
                          "finishedWork": null,
                          "firstPendingTime": 0,
                          "firstSuspendedTime": 0,
                          "hydrate": false,
                          "interactionThreadID": 17,
                          "lastExpiredTime": 0,
                          "lastPingedTime": 0,
                          "lastSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextKnownPendingLevel": 0,
                          "pendingChildren": null,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "tag": 0,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseQueue": null,
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "buttonDisabled": false,
                                  "buttonText": "Detect",
                                  "onChange": [MockFunction] {
                                    "calls": [Circular],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                    ],
                                  },
                                  "onSubmit": [MockFunction],
                                }
                              }
                              refProp={null}
                              wrappingComponentProps={null}
                            />,
                          },
                          "effects": null,
                          "shared": Object {
                            "pending": null,
                          },
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "refProp": null,
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": Object {
                        "baseQueue": null,
                        "baseState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "wrappingComponentProps": null,
                        },
                        "effects": null,
                        "shared": Object {
                          "pending": null,
                        },
                      },
                    },
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 132,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "columnNumber": 5,
                        "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                        "lineNumber": 14,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 0,
                      "elementType": "div",
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <form>
                          <div
                            className="form-group"
                          >
                            <div
                              className="form-input"
                            >
                              <label
                                className="mr-2"
                                htmlFor="url"
                              >
                                URL
                                <span
                                  className="text-danger"
                                >
                                  *
                                </span>
                              </label>
                              <input
                                className="form-control d-inline-block"
                                id="url"
                                onChange={
                                  [MockFunction] {
                                    "calls": [Circular],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                    ],
                                  }
                                }
                                placeholder="https://samples.clarifai.com/face-det.jpg"
                                type="url"
                              />
                              <button
                                className="btn btn-primary"
                                disabled={false}
                                onClick={[MockFunction]}
                                type="submit"
                              >
                                Detect
                              </button>
                            </div>
                          </div>
                        </form>,
                        "className": "border border-dark rounded url-form-container form-container mt-3",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": <form>
                          <div
                            className="form-group"
                          >
                            <div
                              className="form-input"
                            >
                              <label
                                className="mr-2"
                                htmlFor="url"
                              >
                                URL
                                <span
                                  className="text-danger"
                                >
                                  *
                                </span>
                              </label>
                              <input
                                className="form-control d-inline-block"
                                id="url"
                                onChange={
                                  [MockFunction] {
                                    "calls": [Circular],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                    ],
                                  }
                                }
                                placeholder="https://samples.clarifai.com/face-det.jpg"
                                type="url"
                              />
                              <button
                                className="btn btn-primary"
                                disabled={false}
                                onClick={[MockFunction]}
                                type="submit"
                              >
                                Detect
                              </button>
                            </div>
                          </div>
                        </form>,
                        "className": "border border-dark rounded url-form-container form-container mt-3",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <div
                        class="border border-dark rounded url-form-container form-container mt-3"
                      >
                        <form>
                          <div
                            class="form-group"
                          >
                            <div
                              class="form-input"
                            >
                              <label
                                class="mr-2"
                                for="url"
                              >
                                URL
                                <span
                                  class="text-danger"
                                >
                                  *
                                </span>
                              </label>
                              <input
                                class="form-control d-inline-block"
                                id="url"
                                placeholder="https://samples.clarifai.com/face-det.jpg"
                                type="url"
                                value=""
                              />
                              <button
                                class="btn btn-primary"
                                type="submit"
                              >
                                Detect
                              </button>
                            </div>
                          </div>
                        </form>
                      </div>,
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 1,
                    "elementType": [Function],
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "buttonDisabled": false,
                      "buttonText": "Detect",
                      "onChange": [MockFunction] {
                        "calls": [Circular],
                        "results": Array [
                          Object {
                            "type": "return",
                            "value": undefined,
                          },
                        ],
                      },
                      "onSubmit": [MockFunction],
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 128,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "refProp": null,
                        "wrappingComponentProps": null,
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "wrappingComponentProps": null,
                      },
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "buttonDisabled": false,
                          "buttonText": "Detect",
                          "onChange": [MockFunction] {
                            "calls": [Circular],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "onSubmit": [MockFunction],
                        },
                        "refProp": null,
                        "wrappingComponentProps": null,
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 125,
                        "_debugIsCurrentlyTiming": false,
                        "_debugNeedsRemount": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 125,
                          "_debugIsCurrentlyTiming": false,
                          "_debugNeedsRemount": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "dependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": FiberRootNode {
                            "callbackExpirationTime": 0,
                            "callbackNode": null,
                            "callbackPriority": 90,
                            "containerInfo": <div>
                              <div
                                class="border border-dark rounded url-form-container form-container mt-3"
                              >
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <div
                                      class="form-input"
                                    >
                                      <label
                                        class="mr-2"
                                        for="url"
                                      >
                                        URL
                                        <span
                                          class="text-danger"
                                        >
                                          *
                                        </span>
                                      </label>
                                      <input
                                        class="form-control d-inline-block"
                                        id="url"
                                        placeholder="https://samples.clarifai.com/face-det.jpg"
                                        type="url"
                                        value=""
                                      />
                                      <button
                                        class="btn btn-primary"
                                        type="submit"
                                      >
                                        Detect
                                      </button>
                                    </div>
                                  </div>
                                </form>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "finishedExpirationTime": 0,
                            "finishedWork": null,
                            "firstPendingTime": 0,
                            "firstSuspendedTime": 0,
                            "hydrate": false,
                            "interactionThreadID": 17,
                            "lastExpiredTime": 0,
                            "lastPingedTime": 0,
                            "lastSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextKnownPendingLevel": 0,
                            "pendingChildren": null,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "tag": 0,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseQueue": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": [Circular],
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "buttonDisabled": false,
                                      "buttonText": "Detect",
                                      "onChange": [MockFunction] {
                                        "calls": [Circular],
                                        "results": Array [
                                          Object {
                                            "type": "return",
                                            "value": undefined,
                                          },
                                        ],
                                      },
                                      "onSubmit": [MockFunction],
                                    }
                                  }
                                  refProp={null}
                                  wrappingComponentProps={null}
                                />,
                              },
                              "priority": 97,
                              "suspenseConfig": null,
                              "tag": 0,
                            },
                            "baseState": null,
                            "effects": null,
                            "shared": Object {
                              "pending": null,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "dependencies": null,
                        "effectTag": 0,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "buttonDisabled": false,
                                "buttonText": "Detect",
                                "onChange": [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                },
                                "onSubmit": [MockFunction],
                              }
                            }
                            refProp={null}
                            wrappingComponentProps={null}
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": FiberRootNode {
                          "callbackExpirationTime": 0,
                          "callbackNode": null,
                          "callbackPriority": 90,
                          "containerInfo": <div>
                            <div
                              class="border border-dark rounded url-form-container form-container mt-3"
                            >
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <div
                                    class="form-input"
                                  >
                                    <label
                                      class="mr-2"
                                      for="url"
                                    >
                                      URL
                                      <span
                                        class="text-danger"
                                      >
                                        *
                                      </span>
                                    </label>
                                    <input
                                      class="form-control d-inline-block"
                                      id="url"
                                      placeholder="https://samples.clarifai.com/face-det.jpg"
                                      type="url"
                                      value=""
                                    />
                                    <button
                                      class="btn btn-primary"
                                      type="submit"
                                    >
                                      Detect
                                    </button>
                                  </div>
                                </div>
                              </form>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "finishedExpirationTime": 0,
                          "finishedWork": null,
                          "firstPendingTime": 0,
                          "firstSuspendedTime": 0,
                          "hydrate": false,
                          "interactionThreadID": 17,
                          "lastExpiredTime": 0,
                          "lastPingedTime": 0,
                          "lastSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextKnownPendingLevel": 0,
                          "pendingChildren": null,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "tag": 0,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseQueue": null,
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "buttonDisabled": false,
                                  "buttonText": "Detect",
                                  "onChange": [MockFunction] {
                                    "calls": [Circular],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                    ],
                                  },
                                  "onSubmit": [MockFunction],
                                }
                              }
                              refProp={null}
                              wrappingComponentProps={null}
                            />,
                          },
                          "effects": null,
                          "shared": Object {
                            "pending": null,
                          },
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "refProp": null,
                          "wrappingComponentProps": null,
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "wrappingComponentProps": null,
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": Object {
                        "baseQueue": null,
                        "baseState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "wrappingComponentProps": null,
                        },
                        "effects": null,
                        "shared": Object {
                          "pending": null,
                        },
                      },
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": null,
                    "tag": 0,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "_debugSource": Object {
                    "columnNumber": 7,
                    "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                    "lineNumber": 15,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "dependencies": null,
                  "effectTag": 0,
                  "elementType": "form",
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <div
                      className="form-group"
                    >
                      <div
                        className="form-input"
                      >
                        <label
                          className="mr-2"
                          htmlFor="url"
                        >
                          URL
                          <span
                            className="text-danger"
                          >
                            *
                          </span>
                        </label>
                        <input
                          className="form-control d-inline-block"
                          id="url"
                          onChange={
                            [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            }
                          }
                          placeholder="https://samples.clarifai.com/face-det.jpg"
                          type="url"
                        />
                        <button
                          className="btn btn-primary"
                          disabled={false}
                          onClick={[MockFunction]}
                          type="submit"
                        >
                          Detect
                        </button>
                      </div>
                    </div>,
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <div
                      className="form-group"
                    >
                      <div
                        className="form-input"
                      >
                        <label
                          className="mr-2"
                          htmlFor="url"
                        >
                          URL
                          <span
                            className="text-danger"
                          >
                            *
                          </span>
                        </label>
                        <input
                          className="form-control d-inline-block"
                          id="url"
                          onChange={
                            [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            }
                          }
                          placeholder="https://samples.clarifai.com/face-det.jpg"
                          type="url"
                        />
                        <button
                          className="btn btn-primary"
                          disabled={false}
                          onClick={[MockFunction]}
                          type="submit"
                        >
                          Detect
                        </button>
                      </div>
                    </div>,
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugHookTypes": null,
                    "_debugID": 132,
                    "_debugIsCurrentlyTiming": false,
                    "_debugNeedsRemount": false,
                    "_debugOwner": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 130,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 128,
                        "_debugIsCurrentlyTiming": false,
                        "_debugNeedsRemount": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "dependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "refProp": null,
                          "wrappingComponentProps": null,
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "wrappingComponentProps": null,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "refProp": null,
                          "wrappingComponentProps": null,
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 125,
                          "_debugIsCurrentlyTiming": false,
                          "_debugNeedsRemount": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 125,
                            "_debugIsCurrentlyTiming": false,
                            "_debugNeedsRemount": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "dependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": FiberRootNode {
                              "callbackExpirationTime": 0,
                              "callbackNode": null,
                              "callbackPriority": 90,
                              "containerInfo": <div>
                                <div
                                  class="border border-dark rounded url-form-container form-container mt-3"
                                >
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <div
                                        class="form-input"
                                      >
                                        <label
                                          class="mr-2"
                                          for="url"
                                        >
                                          URL
                                          <span
                                            class="text-danger"
                                          >
                                            *
                                          </span>
                                        </label>
                                        <input
                                          class="form-control d-inline-block"
                                          id="url"
                                          placeholder="https://samples.clarifai.com/face-det.jpg"
                                          type="url"
                                          value=""
                                        />
                                        <button
                                          class="btn btn-primary"
                                          type="submit"
                                        >
                                          Detect
                                        </button>
                                      </div>
                                    </div>
                                  </form>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "finishedExpirationTime": 0,
                              "finishedWork": null,
                              "firstPendingTime": 0,
                              "firstSuspendedTime": 0,
                              "hydrate": false,
                              "interactionThreadID": 17,
                              "lastExpiredTime": 0,
                              "lastPingedTime": 0,
                              "lastSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextKnownPendingLevel": 0,
                              "pendingChildren": null,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "tag": 0,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseQueue": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": [Circular],
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "buttonDisabled": false,
                                        "buttonText": "Detect",
                                        "onChange": [MockFunction] {
                                          "calls": [Circular],
                                          "results": Array [
                                            Object {
                                              "type": "return",
                                              "value": undefined,
                                            },
                                          ],
                                        },
                                        "onSubmit": [MockFunction],
                                      }
                                    }
                                    refProp={null}
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "priority": 97,
                                "suspenseConfig": null,
                                "tag": 0,
                              },
                              "baseState": null,
                              "effects": null,
                              "shared": Object {
                                "pending": null,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "dependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "buttonDisabled": false,
                                  "buttonText": "Detect",
                                  "onChange": [MockFunction] {
                                    "calls": [Circular],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                    ],
                                  },
                                  "onSubmit": [MockFunction],
                                }
                              }
                              refProp={null}
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": FiberRootNode {
                            "callbackExpirationTime": 0,
                            "callbackNode": null,
                            "callbackPriority": 90,
                            "containerInfo": <div>
                              <div
                                class="border border-dark rounded url-form-container form-container mt-3"
                              >
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <div
                                      class="form-input"
                                    >
                                      <label
                                        class="mr-2"
                                        for="url"
                                      >
                                        URL
                                        <span
                                          class="text-danger"
                                        >
                                          *
                                        </span>
                                      </label>
                                      <input
                                        class="form-control d-inline-block"
                                        id="url"
                                        placeholder="https://samples.clarifai.com/face-det.jpg"
                                        type="url"
                                        value=""
                                      />
                                      <button
                                        class="btn btn-primary"
                                        type="submit"
                                      >
                                        Detect
                                      </button>
                                    </div>
                                  </div>
                                </form>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "finishedExpirationTime": 0,
                            "finishedWork": null,
                            "firstPendingTime": 0,
                            "firstSuspendedTime": 0,
                            "hydrate": false,
                            "interactionThreadID": 17,
                            "lastExpiredTime": 0,
                            "lastPingedTime": 0,
                            "lastSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextKnownPendingLevel": 0,
                            "pendingChildren": null,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "tag": 0,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseQueue": null,
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "buttonDisabled": false,
                                    "buttonText": "Detect",
                                    "onChange": [MockFunction] {
                                      "calls": [Circular],
                                      "results": Array [
                                        Object {
                                          "type": "return",
                                          "value": undefined,
                                        },
                                      ],
                                    },
                                    "onSubmit": [MockFunction],
                                  }
                                }
                                refProp={null}
                                wrappingComponentProps={null}
                              />,
                            },
                            "effects": null,
                            "shared": Object {
                              "pending": null,
                            },
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            },
                            "refProp": null,
                            "wrappingComponentProps": null,
                          },
                          "refs": Object {},
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            },
                            "wrappingComponentProps": null,
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": Object {
                          "baseQueue": null,
                          "baseState": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            },
                            "wrappingComponentProps": null,
                          },
                          "effects": null,
                          "shared": Object {
                            "pending": null,
                          },
                        },
                      },
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 128,
                        "_debugIsCurrentlyTiming": false,
                        "_debugNeedsRemount": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "dependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "refProp": null,
                          "wrappingComponentProps": null,
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "wrappingComponentProps": null,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "refProp": null,
                          "wrappingComponentProps": null,
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 125,
                          "_debugIsCurrentlyTiming": false,
                          "_debugNeedsRemount": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 125,
                            "_debugIsCurrentlyTiming": false,
                            "_debugNeedsRemount": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "dependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": FiberRootNode {
                              "callbackExpirationTime": 0,
                              "callbackNode": null,
                              "callbackPriority": 90,
                              "containerInfo": <div>
                                <div
                                  class="border border-dark rounded url-form-container form-container mt-3"
                                >
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <div
                                        class="form-input"
                                      >
                                        <label
                                          class="mr-2"
                                          for="url"
                                        >
                                          URL
                                          <span
                                            class="text-danger"
                                          >
                                            *
                                          </span>
                                        </label>
                                        <input
                                          class="form-control d-inline-block"
                                          id="url"
                                          placeholder="https://samples.clarifai.com/face-det.jpg"
                                          type="url"
                                          value=""
                                        />
                                        <button
                                          class="btn btn-primary"
                                          type="submit"
                                        >
                                          Detect
                                        </button>
                                      </div>
                                    </div>
                                  </form>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "finishedExpirationTime": 0,
                              "finishedWork": null,
                              "firstPendingTime": 0,
                              "firstSuspendedTime": 0,
                              "hydrate": false,
                              "interactionThreadID": 17,
                              "lastExpiredTime": 0,
                              "lastPingedTime": 0,
                              "lastSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextKnownPendingLevel": 0,
                              "pendingChildren": null,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "tag": 0,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseQueue": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": [Circular],
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "buttonDisabled": false,
                                        "buttonText": "Detect",
                                        "onChange": [MockFunction] {
                                          "calls": [Circular],
                                          "results": Array [
                                            Object {
                                              "type": "return",
                                              "value": undefined,
                                            },
                                          ],
                                        },
                                        "onSubmit": [MockFunction],
                                      }
                                    }
                                    refProp={null}
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "priority": 97,
                                "suspenseConfig": null,
                                "tag": 0,
                              },
                              "baseState": null,
                              "effects": null,
                              "shared": Object {
                                "pending": null,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "dependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "buttonDisabled": false,
                                  "buttonText": "Detect",
                                  "onChange": [MockFunction] {
                                    "calls": [Circular],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                    ],
                                  },
                                  "onSubmit": [MockFunction],
                                }
                              }
                              refProp={null}
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": FiberRootNode {
                            "callbackExpirationTime": 0,
                            "callbackNode": null,
                            "callbackPriority": 90,
                            "containerInfo": <div>
                              <div
                                class="border border-dark rounded url-form-container form-container mt-3"
                              >
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <div
                                      class="form-input"
                                    >
                                      <label
                                        class="mr-2"
                                        for="url"
                                      >
                                        URL
                                        <span
                                          class="text-danger"
                                        >
                                          *
                                        </span>
                                      </label>
                                      <input
                                        class="form-control d-inline-block"
                                        id="url"
                                        placeholder="https://samples.clarifai.com/face-det.jpg"
                                        type="url"
                                        value=""
                                      />
                                      <button
                                        class="btn btn-primary"
                                        type="submit"
                                      >
                                        Detect
                                      </button>
                                    </div>
                                  </div>
                                </form>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "finishedExpirationTime": 0,
                            "finishedWork": null,
                            "firstPendingTime": 0,
                            "firstSuspendedTime": 0,
                            "hydrate": false,
                            "interactionThreadID": 17,
                            "lastExpiredTime": 0,
                            "lastPingedTime": 0,
                            "lastSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextKnownPendingLevel": 0,
                            "pendingChildren": null,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "tag": 0,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseQueue": null,
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "buttonDisabled": false,
                                    "buttonText": "Detect",
                                    "onChange": [MockFunction] {
                                      "calls": [Circular],
                                      "results": Array [
                                        Object {
                                          "type": "return",
                                          "value": undefined,
                                        },
                                      ],
                                    },
                                    "onSubmit": [MockFunction],
                                  }
                                }
                                refProp={null}
                                wrappingComponentProps={null}
                              />,
                            },
                            "effects": null,
                            "shared": Object {
                              "pending": null,
                            },
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            },
                            "refProp": null,
                            "wrappingComponentProps": null,
                          },
                          "refs": Object {},
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            },
                            "wrappingComponentProps": null,
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": Object {
                          "baseQueue": null,
                          "baseState": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            },
                            "wrappingComponentProps": null,
                          },
                          "effects": null,
                          "shared": Object {
                            "pending": null,
                          },
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": null,
                      "tag": 0,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "_debugSource": Object {
                      "columnNumber": 5,
                      "fileName": "D:\\\\courses\\\\face-recognition\\\\client\\\\src\\\\components\\\\features\\\\main\\\\components\\\\form\\\\FormView.tsx",
                      "lineNumber": 14,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "dependencies": null,
                    "effectTag": 0,
                    "elementType": "div",
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <form>
                        <div
                          className="form-group"
                        >
                          <div
                            className="form-input"
                          >
                            <label
                              className="mr-2"
                              htmlFor="url"
                            >
                              URL
                              <span
                                className="text-danger"
                              >
                                *
                              </span>
                            </label>
                            <input
                              className="form-control d-inline-block"
                              id="url"
                              onChange={
                                [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                }
                              }
                              placeholder="https://samples.clarifai.com/face-det.jpg"
                              type="url"
                            />
                            <button
                              className="btn btn-primary"
                              disabled={false}
                              onClick={[MockFunction]}
                              type="submit"
                            >
                              Detect
                            </button>
                          </div>
                        </div>
                      </form>,
                      "className": "border border-dark rounded url-form-container form-container mt-3",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <form>
                        <div
                          className="form-group"
                        >
                          <div
                            className="form-input"
                          >
                            <label
                              className="mr-2"
                              htmlFor="url"
                            >
                              URL
                              <span
                                className="text-danger"
                              >
                                *
                              </span>
                            </label>
                            <input
                              className="form-control d-inline-block"
                              id="url"
                              onChange={
                                [MockFunction] {
                                  "calls": [Circular],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                }
                              }
                              placeholder="https://samples.clarifai.com/face-det.jpg"
                              type="url"
                            />
                            <button
                              className="btn btn-primary"
                              disabled={false}
                              onClick={[MockFunction]}
                              type="submit"
                            >
                              Detect
                            </button>
                          </div>
                        </div>
                      </form>,
                      "className": "border border-dark rounded url-form-container form-container mt-3",
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugHookTypes": null,
                      "_debugID": 130,
                      "_debugIsCurrentlyTiming": false,
                      "_debugNeedsRemount": false,
                      "_debugOwner": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 128,
                        "_debugIsCurrentlyTiming": false,
                        "_debugNeedsRemount": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "dependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "refProp": null,
                          "wrappingComponentProps": null,
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "wrappingComponentProps": null,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "refProp": null,
                          "wrappingComponentProps": null,
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 125,
                          "_debugIsCurrentlyTiming": false,
                          "_debugNeedsRemount": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 125,
                            "_debugIsCurrentlyTiming": false,
                            "_debugNeedsRemount": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "dependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": FiberRootNode {
                              "callbackExpirationTime": 0,
                              "callbackNode": null,
                              "callbackPriority": 90,
                              "containerInfo": <div>
                                <div
                                  class="border border-dark rounded url-form-container form-container mt-3"
                                >
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <div
                                        class="form-input"
                                      >
                                        <label
                                          class="mr-2"
                                          for="url"
                                        >
                                          URL
                                          <span
                                            class="text-danger"
                                          >
                                            *
                                          </span>
                                        </label>
                                        <input
                                          class="form-control d-inline-block"
                                          id="url"
                                          placeholder="https://samples.clarifai.com/face-det.jpg"
                                          type="url"
                                          value=""
                                        />
                                        <button
                                          class="btn btn-primary"
                                          type="submit"
                                        >
                                          Detect
                                        </button>
                                      </div>
                                    </div>
                                  </form>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "finishedExpirationTime": 0,
                              "finishedWork": null,
                              "firstPendingTime": 0,
                              "firstSuspendedTime": 0,
                              "hydrate": false,
                              "interactionThreadID": 17,
                              "lastExpiredTime": 0,
                              "lastPingedTime": 0,
                              "lastSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextKnownPendingLevel": 0,
                              "pendingChildren": null,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "tag": 0,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseQueue": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": [Circular],
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "buttonDisabled": false,
                                        "buttonText": "Detect",
                                        "onChange": [MockFunction] {
                                          "calls": [Circular],
                                          "results": Array [
                                            Object {
                                              "type": "return",
                                              "value": undefined,
                                            },
                                          ],
                                        },
                                        "onSubmit": [MockFunction],
                                      }
                                    }
                                    refProp={null}
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "priority": 97,
                                "suspenseConfig": null,
                                "tag": 0,
                              },
                              "baseState": null,
                              "effects": null,
                              "shared": Object {
                                "pending": null,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "dependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "buttonDisabled": false,
                                  "buttonText": "Detect",
                                  "onChange": [MockFunction] {
                                    "calls": [Circular],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                    ],
                                  },
                                  "onSubmit": [MockFunction],
                                }
                              }
                              refProp={null}
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": FiberRootNode {
                            "callbackExpirationTime": 0,
                            "callbackNode": null,
                            "callbackPriority": 90,
                            "containerInfo": <div>
                              <div
                                class="border border-dark rounded url-form-container form-container mt-3"
                              >
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <div
                                      class="form-input"
                                    >
                                      <label
                                        class="mr-2"
                                        for="url"
                                      >
                                        URL
                                        <span
                                          class="text-danger"
                                        >
                                          *
                                        </span>
                                      </label>
                                      <input
                                        class="form-control d-inline-block"
                                        id="url"
                                        placeholder="https://samples.clarifai.com/face-det.jpg"
                                        type="url"
                                        value=""
                                      />
                                      <button
                                        class="btn btn-primary"
                                        type="submit"
                                      >
                                        Detect
                                      </button>
                                    </div>
                                  </div>
                                </form>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "finishedExpirationTime": 0,
                            "finishedWork": null,
                            "firstPendingTime": 0,
                            "firstSuspendedTime": 0,
                            "hydrate": false,
                            "interactionThreadID": 17,
                            "lastExpiredTime": 0,
                            "lastPingedTime": 0,
                            "lastSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextKnownPendingLevel": 0,
                            "pendingChildren": null,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "tag": 0,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseQueue": null,
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "buttonDisabled": false,
                                    "buttonText": "Detect",
                                    "onChange": [MockFunction] {
                                      "calls": [Circular],
                                      "results": Array [
                                        Object {
                                          "type": "return",
                                          "value": undefined,
                                        },
                                      ],
                                    },
                                    "onSubmit": [MockFunction],
                                  }
                                }
                                refProp={null}
                                wrappingComponentProps={null}
                              />,
                            },
                            "effects": null,
                            "shared": Object {
                              "pending": null,
                            },
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            },
                            "refProp": null,
                            "wrappingComponentProps": null,
                          },
                          "refs": Object {},
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            },
                            "wrappingComponentProps": null,
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": Object {
                          "baseQueue": null,
                          "baseState": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            },
                            "wrappingComponentProps": null,
                          },
                          "effects": null,
                          "shared": Object {
                            "pending": null,
                          },
                        },
                      },
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "dependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "buttonDisabled": false,
                        "buttonText": "Detect",
                        "onChange": [MockFunction] {
                          "calls": [Circular],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": undefined,
                            },
                          ],
                        },
                        "onSubmit": [MockFunction],
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugHookTypes": null,
                        "_debugID": 128,
                        "_debugIsCurrentlyTiming": false,
                        "_debugNeedsRemount": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "dependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "refProp": null,
                          "wrappingComponentProps": null,
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "wrappingComponentProps": null,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "buttonDisabled": false,
                            "buttonText": "Detect",
                            "onChange": [MockFunction] {
                              "calls": [Circular],
                              "results": Array [
                                Object {
                                  "type": "return",
                                  "value": undefined,
                                },
                              ],
                            },
                            "onSubmit": [MockFunction],
                          },
                          "refProp": null,
                          "wrappingComponentProps": null,
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugHookTypes": null,
                          "_debugID": 125,
                          "_debugIsCurrentlyTiming": false,
                          "_debugNeedsRemount": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugHookTypes": null,
                            "_debugID": 125,
                            "_debugIsCurrentlyTiming": false,
                            "_debugNeedsRemount": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "dependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": FiberRootNode {
                              "callbackExpirationTime": 0,
                              "callbackNode": null,
                              "callbackPriority": 90,
                              "containerInfo": <div>
                                <div
                                  class="border border-dark rounded url-form-container form-container mt-3"
                                >
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <div
                                        class="form-input"
                                      >
                                        <label
                                          class="mr-2"
                                          for="url"
                                        >
                                          URL
                                          <span
                                            class="text-danger"
                                          >
                                            *
                                          </span>
                                        </label>
                                        <input
                                          class="form-control d-inline-block"
                                          id="url"
                                          placeholder="https://samples.clarifai.com/face-det.jpg"
                                          type="url"
                                          value=""
                                        />
                                        <button
                                          class="btn btn-primary"
                                          type="submit"
                                        >
                                          Detect
                                        </button>
                                      </div>
                                    </div>
                                  </form>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "finishedExpirationTime": 0,
                              "finishedWork": null,
                              "firstPendingTime": 0,
                              "firstSuspendedTime": 0,
                              "hydrate": false,
                              "interactionThreadID": 17,
                              "lastExpiredTime": 0,
                              "lastPingedTime": 0,
                              "lastSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextKnownPendingLevel": 0,
                              "pendingChildren": null,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "tag": 0,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseQueue": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": [Circular],
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "buttonDisabled": false,
                                        "buttonText": "Detect",
                                        "onChange": [MockFunction] {
                                          "calls": [Circular],
                                          "results": Array [
                                            Object {
                                              "type": "return",
                                              "value": undefined,
                                            },
                                          ],
                                        },
                                        "onSubmit": [MockFunction],
                                      }
                                    }
                                    refProp={null}
                                    wrappingComponentProps={null}
                                  />,
                                },
                                "priority": 97,
                                "suspenseConfig": null,
                                "tag": 0,
                              },
                              "baseState": null,
                              "effects": null,
                              "shared": Object {
                                "pending": null,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "dependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "buttonDisabled": false,
                                  "buttonText": "Detect",
                                  "onChange": [MockFunction] {
                                    "calls": [Circular],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": undefined,
                                      },
                                    ],
                                  },
                                  "onSubmit": [MockFunction],
                                }
                              }
                              refProp={null}
                              wrappingComponentProps={null}
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": FiberRootNode {
                            "callbackExpirationTime": 0,
                            "callbackNode": null,
                            "callbackPriority": 90,
                            "containerInfo": <div>
                              <div
                                class="border border-dark rounded url-form-container form-container mt-3"
                              >
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <div
                                      class="form-input"
                                    >
                                      <label
                                        class="mr-2"
                                        for="url"
                                      >
                                        URL
                                        <span
                                          class="text-danger"
                                        >
                                          *
                                        </span>
                                      </label>
                                      <input
                                        class="form-control d-inline-block"
                                        id="url"
                                        placeholder="https://samples.clarifai.com/face-det.jpg"
                                        type="url"
                                        value=""
                                      />
                                      <button
                                        class="btn btn-primary"
                                        type="submit"
                                      >
                                        Detect
                                      </button>
                                    </div>
                                  </div>
                                </form>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "finishedExpirationTime": 0,
                            "finishedWork": null,
                            "firstPendingTime": 0,
                            "firstSuspendedTime": 0,
                            "hydrate": false,
                            "interactionThreadID": 17,
                            "lastExpiredTime": 0,
                            "lastPingedTime": 0,
                            "lastSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextKnownPendingLevel": 0,
                            "pendingChildren": null,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "tag": 0,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseQueue": null,
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "buttonDisabled": false,
                                    "buttonText": "Detect",
                                    "onChange": [MockFunction] {
                                      "calls": [Circular],
                                      "results": Array [
                                        Object {
                                          "type": "return",
                                          "value": undefined,
                                        },
                                      ],
                                    },
                                    "onSubmit": [MockFunction],
                                  }
                                }
                                refProp={null}
                                wrappingComponentProps={null}
                              />,
                            },
                            "effects": null,
                            "shared": Object {
                              "pending": null,
                            },
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            },
                            "refProp": null,
                            "wrappingComponentProps": null,
                          },
                          "refs": Object {},
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            },
                            "wrappingComponentProps": null,
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": Object {
                          "baseQueue": null,
                          "baseState": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "buttonDisabled": false,
                              "buttonText": "Detect",
                              "onChange": [MockFunction] {
                                "calls": [Circular],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": undefined,
                                  },
                                ],
                              },
                              "onSubmit": [MockFunction],
                            },
                            "wrappingComponentProps": null,
                          },
                          "effects": null,
                          "shared": Object {
                            "pending": null,
                          },
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": null,
                      "tag": 0,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <div
                      class="border border-dark rounded url-form-container form-container mt-3"
                    >
                      <form>
                        <div
                          class="form-group"
                        >
                          <div
                            class="form-input"
                          >
                            <label
                              class="mr-2"
                              for="url"
                            >
                              URL
                              <span
                                class="text-danger"
                              >
                                *
                              </span>
                            </label>
                            <input
                              class="form-control d-inline-block"
                              id="url"
                              placeholder="https://samples.clarifai.com/face-det.jpg"
                              type="url"
                              value=""
                            />
                            <button
                              class="btn btn-primary"
                              type="submit"
                            >
                              Detect
                            </button>
                          </div>
                        </div>
                      </form>
                    </div>,
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": <form>
                    <div
                      class="form-group"
                    >
                      <div
                        class="form-input"
                      >
                        <label
                          class="mr-2"
                          for="url"
                        >
                          URL
                          <span
                            class="text-danger"
                          >
                            *
                          </span>
                        </label>
                        <input
                          class="form-control d-inline-block"
                          id="url"
                          placeholder="https://samples.clarifai.com/face-det.jpg"
                          type="url"
                          value=""
                        />
                        <button
                          class="btn btn-primary"
                          type="submit"
                        >
                          Detect
                        </button>
                      </div>
                    </div>
                  </form>,
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": "form",
                  "updateQueue": null,
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": <div
                  class="form-group"
                >
                  <div
                    class="form-input"
                  >
                    <label
                      class="mr-2"
                      for="url"
                    >
                      URL
                      <span
                        class="text-danger"
                      >
                        *
                      </span>
                    </label>
                    <input
                      class="form-control d-inline-block"
                      id="url"
                      placeholder="https://samples.clarifai.com/face-det.jpg"
                      type="url"
                      value=""
                    />
                    <button
                      class="btn btn-primary"
                      type="submit"
                    >
                      Detect
                    </button>
                  </div>
                </div>,
                "tag": 5,
                "treeBaseDuration": 0,
                "type": "div",
                "updateQueue": null,
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": <div
                class="form-input"
              >
                <label
                  class="mr-2"
                  for="url"
                >
                  URL
                  <span
                    class="text-danger"
                  >
                    *
                  </span>
                </label>
                <input
                  class="form-control d-inline-block"
                  id="url"
                  placeholder="https://samples.clarifai.com/face-det.jpg"
                  type="url"
                  value=""
                />
                <button
                  class="btn btn-primary"
                  type="submit"
                >
                  Detect
                </button>
              </div>,
              "tag": 5,
              "treeBaseDuration": 0,
              "type": "div",
              "updateQueue": null,
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": <button
              class="btn btn-primary"
              type="submit"
            >
              Detect
            </button>,
            "tag": 5,
            "treeBaseDuration": 0,
            "type": "button",
            "updateQueue": null,
          },
          "stateNode": <input
            class="form-control d-inline-block"
            id="url"
            placeholder="https://samples.clarifai.com/face-det.jpg"
            type="url"
            value=""
          />,
          "tag": 5,
          "treeBaseDuration": 0,
          "type": "input",
          "updateQueue": null,
        },
        "bubbles": undefined,
        "cancelable": undefined,
        "currentTarget": null,
        "defaultPrevented": undefined,
        "dispatchConfig": Object {
          "dependencies": Array [
            "blur",
            "change",
            "click",
            "focus",
            "input",
            "keydown",
            "keyup",
            "selectionchange",
          ],
          "phasedRegistrationNames": Object {
            "bubbled": "onChange",
            "captured": "onChangeCapture",
          },
        },
        "eventPhase": undefined,
        "isDefaultPrevented": [Function],
        "isPersistent": [Function],
        "isPropagationStopped": [Function],
        "isTrusted": undefined,
        "nativeEvent": Event {
          "target": <input
            class="form-control d-inline-block"
            id="url"
            placeholder="https://samples.clarifai.com/face-det.jpg"
            type="url"
            value=""
          />,
          "type": "change",
        },
        "preventDefault": [Function],
        "target": Object {
          "value": "https://samples.clarifai",
        },
        "timeStamp": 1587669956674,
        "type": "change",
      },
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`FormView component should render 1`] = `ShallowWrapper {}`;
